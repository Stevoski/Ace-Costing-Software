package newpackage1;
//32 Bit
//0707793095
import Taskit.taskIt;
import com.canning.returns.*;
import SetterGetter.mouseClick;
import com.canning.proreport.prorptShow;
import java.sql.Connection;
import java.util.HashMap;
import java.awt.BorderLayout;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.DriverManager;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import java.util.*;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.TableColumn;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.*;
import static newpackage1.ExportAndImport.bomPanel;
import static newpackage1.ExportAndImport.engtable;
//import login.LoginForm;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Stevoski
 */
public class NewJFrame extends javax.swing.JFrame {

    public Object[][] Paster = {};
//    ArrayList<String> Pname = new ArrayList<>();
//    ArrayList<String> arplete = new ArrayList<>();
//
//     NewJFrame.setSize( w,h );
    ResultSet rs = null;
    ResultSet rs1 = null;
    ResultSet rs2 = null;
    ResultSet rs3 = null;

//    public boolean checkInputs() {
//        if (jTextField30.getText() == null) {
//            return false;
//        } else {
//            try {
//                Double.parseDouble(jTextField30.getText());
//                return true;
//            } catch (Exception ex) {
//                return false;
//            }
//        }
//    }
//    public void showItem(int index) throws SQLException {
//        jTextField50.setText(Double.toString(getProductList().get(index).getQuantity()));
//
//    }
//
//    //FOR AUTOCOMPLETE TXT
//    private void DatabaseName() {
//        try {
//            java.sql.Connection on = (Connection) db_Connection.getInstance();
//            String s = "select * from product";
//            try (PreparedStatement ps = on.prepareStatement(s)) {
//                rs = ps.executeQuery(s);
//
//                while (rs.next()) {
//                    String Pname1 = rs.getString("product_name");
//                    Pname.add(Pname1);
//                }
//
//                rs.close();
//                ps.close();
//                
//
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }
//    //FOR AUTOCOMPLETE TXTFLD
//
//    public void autocomplete(String txt) {
//        String complete = "";
//        int start = txt.length();
//        int last = txt.length();
//        int a;
//        for (a = 0; a < Pname.size(); a++) {
//            if (Pname.get(a).toString().startsWith(txt)) {
//                complete = Pname.get(a).toString();
//                last = complete.length();
//                break;
//            }
//        }
//        if (last > start) {
//            jTextField25.setText(complete);
//            jTextField25.setCaretPosition(last);
//            jTextField25.moveCaretPosition(start);
//        }
//    }
//    // PRINT JPANEL 8
//    public class Printer extends JPanel implements Printable {
//
//        final Component jPanel8;
//
//        public Printer(Component comp) {
//            this.jPanel8 = comp;
//            getContentPane().setBackground(Color.white);
//        }
//
//        @Override
//        public int print(Graphics g, PageFormat format, int page_index)
//                throws PrinterException {
//            if (page_index > 0) {
//                return Printable.NO_SUCH_PAGE;
//            }
//
//            // get the bounds of the component
//            Dimension dim = jPanel8.getSize();
//            double cHeight = dim.getHeight();
//            double cWidth = dim.getWidth();
//
//            // get the bounds of the printable area
//            double pHeight = format.getImageableHeight();
//            double pWidth = format.getImageableWidth();
//
//            double pXStart = format.getImageableX();
//            double pYStart = format.getImageableY();
//
//            double xRatio = pWidth / cWidth;
//            double yRatio = pHeight / cHeight;
//
//            Graphics2D g2 = (Graphics2D) g;
//            g2.translate(pXStart, pYStart);
//            g2.scale(xRatio, yRatio);
//            jPanel8.print(g2);
//
//            return Printable.PAGE_EXISTS;
//        }
//    }
    PreparedStatement ps;
    PreparedStatement ps1;
    JComboBox<String> consno = new JComboBox<>();
    static String cperunit = null;

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("mtn.png")));
        initComponents();
        TableColumn colpac = jTable2.getColumnModel().getColumn(1);
        TableColumn colcons = jTable2.getColumnModel().getColumn(2);
        colpac.setCellEditor(new DefaultCellEditor(consiered));
        colcons.setCellEditor(new DefaultCellEditor(consno));
//        packagename.addActionListener(new ActionListener() {
//            @Override
//            public void itemStateChanged(ItemEvent e) {
//               if (e.getStateChange() == ItemEvent.SELECTED) {
//			    try {
//            String conpack = (String) packagename.getSelectedItem();
//            String krood = "select cons_no from package_reception where package=?";
//            try (PreparedStatement oloki = db_Connection.getInstance().prepareStatement(krood)) {
//                oloki.setString(1, conpack);
//                trm = oloki.executeQuery();             
//				while (trm.next()) {
//                    consno.addItem(rs.getString("cons_no"));
//                   
//                }
//                rs.close();
//                ps.close();
//
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        
//    }
//                   System.out.println(e.getItem() + " selected");
//                }
//            }
//        });
//        
        //frame.setIconImage(icon.getImage());
//    this.setResizable(true);
//    this.setAlwaysOnTop(true);
//        this.setVisible(true);
// Toolkit toolkit = Toolkit.getDefaultToolkit();
//    Dimension d = toolkit.getScreenSize();
//        int h = (int) toolkit.getScreenSize().getHeight();
//        int w = (int) toolkit.getScreenSize().getWidth();
//        this.setLayout(new BorderLayout());
////        this.setMaximumSize(d);
//        this.setSize(w, h);
//ImageIcon skraan= new ImageIcon(new ImageIcon("loginosting.png").getImage().getScaledInstance(1010, 1010, Image.SCALE_SMOOTH)); 
//jLabel44 profile=new jLabel44();
//jLabel44.getBounds();
//ImageIcon skraan= new ImageIcon("loginosting.png");
//Image umaga = skraan.getImage();
//Image img=umaga.getScaledInstance(jLabel44.getWidth(),jLabel44.getHeight(),Image.SCALE_SMOOTH);
//ImageIcon imaga= new ImageIcon(img);
//jLabel44.setIcon(imaga);
        jMenuBar1.setVisible(
                false);
        jToolBar2.setVisible(
                false);
//        jToolBar2.setRollover(true);
        MainPanel.add(jToolBar2, BorderLayout.NORTH);
//        Container contentPane = this.getContentPane();
//    contentPane.add(jToolBar2, BorderLayout.NORTH);
//        DatabaseName();
////        databasename();

        this.setExtendedState(NewJFrame.MAXIMIZED_BOTH);

//this.setUndecorated(true);
        this.setVisible(
                true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jScrollPane26 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jScrollPane27 = new javax.swing.JScrollPane();
        jTable22 = new javax.swing.JTable();
        jScrollPane28 = new javax.swing.JScrollPane();
        jTable23 = new javax.swing.JTable();
        buttonGroupPackage = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jScrollPane33 = new javax.swing.JScrollPane();
        jTable28 = new javax.swing.JTable();
        jScrollPane34 = new javax.swing.JScrollPane();
        jTable29 = new javax.swing.JTable();
        jLabel181 = new javax.swing.JLabel();
        jDialog1 = new javax.swing.JDialog();
        jLabel191 = new javax.swing.JLabel();
        jRadioButton22 = new javax.swing.JRadioButton();
        jComboBox32 = new javax.swing.JComboBox<>();
        jLabel192 = new javax.swing.JLabel();
        jComboBox38 = new javax.swing.JComboBox<>();
        jLabel193 = new javax.swing.JLabel();
        jDateChooser5 = new com.toedter.calendar.JDateChooser();
        jLabel194 = new javax.swing.JLabel();
        jDateChooser6 = new com.toedter.calendar.JDateChooser();
        jButton72 = new javax.swing.JButton();
        jButton73 = new javax.swing.JButton();
        jButton77 = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu10 = new javax.swing.JMenu();
        jMenu11 = new javax.swing.JMenu();
        jToolBar2 = new javax.swing.JToolBar();
        jButton37 = new javax.swing.JButton();
        jButton38 = new javax.swing.JButton();
        jButton42 = new javax.swing.JButton();
        jButton44 = new javax.swing.JButton();
        jButton45 = new javax.swing.JButton();
        jButton47 = new javax.swing.JButton();
        jButton48 = new javax.swing.JButton();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        MainPanel = new javax.swing.JPanel();
        jPanelStart1 = new javax.swing.JPanel();
        jPanelLogin = new javax.swing.JPanel();
        jLabel_Username = new javax.swing.JLabel();
        jLabel_Password = new javax.swing.JLabel();
        jTextField_Username = new javax.swing.JTextField();
        jPasswordField_Password = new javax.swing.JPasswordField();
        jButton_Login = new javax.swing.JButton();
        jButton_Cancel = new javax.swing.JButton();
        jPanel48 = new javax.swing.JPanel();
        jTextField162 = new javax.swing.JTextField();
        jLabel230 = new javax.swing.JLabel();
        jLabel107 = new javax.swing.JLabel();
        jPanelMenu2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jRadioButton7 = new javax.swing.JRadioButton();
        jTextField46 = new javax.swing.JTextField();
        jPanel2Carded = new javax.swing.JPanel();
        jLabel74 = new javax.swing.JLabel();
        jComboBox23 = new javax.swing.JComboBox<>();
        jLabel92 = new javax.swing.JLabel();
        jButton34 = new javax.swing.JButton();
        jPanel19 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jButtonReset_Product = new javax.swing.JButton();
        jButtonSave_Product = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane17 = new javax.swing.JScrollPane();
        jTable15 = new javax.swing.JTable();
        jScrollPane16 = new javax.swing.JScrollPane();
        jTable14 = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jPanel3Carded = new javax.swing.JPanel();
        jButton22 = new javax.swing.JButton();
        jScrollPane19 = new javax.swing.JScrollPane();
        jTable17 = new javax.swing.JTable();
        jComboBox21 = new javax.swing.JComboBox();
        jLabel91 = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jLabel64 = new javax.swing.JLabel();
        jTextField73 = new javax.swing.JTextField();
        jComboBox13 = new javax.swing.JComboBox<>();
        jLabel63 = new javax.swing.JLabel();
        jButtonAdd_productproduction = new javax.swing.JButton();
        jButtonDelete_productproduction = new javax.swing.JButton();
        jButtonSplit_productproduction = new javax.swing.JButton();
        jLabel115 = new javax.swing.JLabel();
        jTextField87 = new javax.swing.JTextField();
        jTextField64 = new javax.swing.JTextField();
        jTextField30 = new javax.swing.JTextField();
        jLabel101 = new javax.swing.JLabel();
        batch_no = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        jTextField95 = new javax.swing.JTextField();
        jLabel179 = new javax.swing.JLabel();
        jTextField96 = new javax.swing.JTextField();
        jLabel180 = new javax.swing.JLabel();
        jComboBox26 = new javax.swing.JComboBox<>();
        jButton55 = new javax.swing.JButton();
        jPanel24 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton33 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jDate1 = new com.toedter.calendar.JDateChooser();
        jLabel19 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jLabel154 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel119 = new javax.swing.JLabel();
        jTextField98 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jTextField118 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel219 = new javax.swing.JLabel();
        jTextField94 = new javax.swing.JTextField();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel184 = new javax.swing.JLabel();
        enddate = new com.toedter.calendar.JDateChooser();
        jLabel47 = new javax.swing.JLabel();
        jButton64 = new javax.swing.JButton();
        jRadioButton11 = new javax.swing.JRadioButton();
        jPanel18 = new javax.swing.JPanel();
        jLabel89 = new javax.swing.JLabel();
        jTextField62 = new javax.swing.JTextField();
        jComboBox14 = new javax.swing.JComboBox<>();
        jTextField32 = new javax.swing.JTextField();
        jLabel68 = new javax.swing.JLabel();
        jButton30 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jLabel67 = new javax.swing.JLabel();
        jButton36 = new javax.swing.JButton();
        jRadioButton14 = new javax.swing.JRadioButton();
        jComboBox30 = new javax.swing.JComboBox<>();
        jLabel143 = new javax.swing.JLabel();
        jTextField39 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel182 = new javax.swing.JLabel();
        jRadioButton21 = new javax.swing.JRadioButton();
        jScrollPane18 = new javax.swing.JScrollPane();
        jTable16 = new javax.swing.JTable();
        jButton26 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jTextField99 = new javax.swing.JTextField();
        jLabel135 = new javax.swing.JLabel();
        jTextField24 = new javax.swing.JTextField();
        jComboBox5 = new javax.swing.JComboBox();
        jLabel23 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jTextField23 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox();
        jTextField68 = new javax.swing.JTextField();
        jComboBox31 = new javax.swing.JComboBox<>();
        jComboBox35 = new javax.swing.JComboBox<>();
        jLabel164 = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jLabel65 = new javax.swing.JLabel();
        jComboBox15 = new javax.swing.JComboBox();
        jLabel90 = new javax.swing.JLabel();
        jTextField63 = new javax.swing.JTextField();
        jComboBox20 = new javax.swing.JComboBox<>();
        jLabel66 = new javax.swing.JLabel();
        jTextField31 = new javax.swing.JTextField();
        jButton35 = new javax.swing.JButton();
        jButton29 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jLabel144 = new javax.swing.JLabel();
        jTextField92 = new javax.swing.JTextField();
        jLabel145 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel183 = new javax.swing.JLabel();
        jButton69 = new javax.swing.JButton();
        jRadioButton12 = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel161 = new javax.swing.JLabel();
        jLabel160 = new javax.swing.JLabel();
        jLabel159 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanelWithFunctions = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jTextField14 = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jTextField15 = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jComboBox6 = new javax.swing.JComboBox<>();
        jLabel25 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jTextField17 = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        jTextField18 = new javax.swing.JTextField();
        jTextField19 = new javax.swing.JTextField();
        jButton24 = new javax.swing.JButton();
        jLabel104 = new javax.swing.JLabel();
        jComboBox25 = new javax.swing.JComboBox<>();
        jPanel6 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jComboBox8 = new javax.swing.JComboBox<>();
        jLabel36 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jComboBox7 = new javax.swing.JComboBox<>();
        jLabel35 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jTextField37 = new javax.swing.JTextField();
        jButton11 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jTextField38 = new javax.swing.JTextField();
        jLabel163 = new javax.swing.JLabel();
        jButton25 = new javax.swing.JButton();
        jScrollPane23 = new javax.swing.JScrollPane();
        jTable19 = new javax.swing.JTable();
        jLabel157 = new javax.swing.JLabel();
        jComboBox36 = new javax.swing.JComboBox<>();
        jTextField6 = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jPanel7Carded = new javax.swing.JPanel();
        jLabel42 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel45 = new javax.swing.JLabel();
        jComboBox12 = new javax.swing.JComboBox<>();
        jLabel40 = new javax.swing.JLabel();
        jTextField21 = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        jComboBox9 = new javax.swing.JComboBox<>();
        jLabel24 = new javax.swing.JLabel();
        jTextField36 = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        jComboBox10 = new javax.swing.JComboBox<>();
        jLabel43 = new javax.swing.JLabel();
        jTextField22 = new javax.swing.JTextField();
        jLabel141 = new javax.swing.JLabel();
        jTextField93 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jButton27 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jScrollPane24 = new javax.swing.JScrollPane();
        jTable20 = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jDate2 = new com.toedter.calendar.JDateChooser();
        jLabel49 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jLabel51 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTable8 = new javax.swing.JTable();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel54 = new javax.swing.JLabel();
        jTextField40 = new javax.swing.JTextField();
        jTextField41 = new javax.swing.JTextField();
        jTextField42 = new javax.swing.JTextField();
        jButton19 = new javax.swing.JButton();
        jRadioButton8 = new javax.swing.JRadioButton();
        jRadioButton9 = new javax.swing.JRadioButton();
        jRadioButton13 = new javax.swing.JRadioButton();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jDateChooser3 = new com.toedter.calendar.JDateChooser();
        jLabel117 = new javax.swing.JLabel();
        jButton39 = new javax.swing.JButton();
        jButton40 = new javax.swing.JButton();
        jRadioButton20 = new javax.swing.JRadioButton();
        jTextField138 = new javax.swing.JTextField();
        jComboBox48 = new javax.swing.JComboBox<>();
        jPanelAverageCost = new javax.swing.JPanel();
        jScrollPaneavg = new javax.swing.JScrollPane();
        jTableavg = new javax.swing.JTable();
        jLabelavg = new javax.swing.JLabel();
        jComboBoxavg = new javax.swing.JComboBox<>();
        jLabeavg = new javax.swing.JLabel();
        jButton108 = new javax.swing.JButton();
        jButton110 = new javax.swing.JButton();
        jTextField20 = new javax.swing.JTextField();
        jButton111 = new javax.swing.JButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        Choose1 = new com.toedter.calendar.JDateChooser();
        Choose2 = new com.toedter.calendar.JDateChooser();
        jLabel105 = new javax.swing.JLabel();
        jLabel156 = new javax.swing.JLabel();
        jButton53 = new javax.swing.JButton();
        jButton54 = new javax.swing.JButton();
        StocksPanel = new javax.swing.JPanel();
        jPanel35 = new javax.swing.JPanel();
        jButton84 = new javax.swing.JButton();
        jButton85 = new javax.swing.JButton();
        jPanel42 = new javax.swing.JPanel();
        jPanel43 = new javax.swing.JPanel();
        jLabel218 = new javax.swing.JLabel();
        jScrollPane43 = new javax.swing.JScrollPane();
        jTable37 = new javax.swing.JTable();
        IngFormer = new javax.swing.JPanel();
        jPanelPacking = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPanel25 = new javax.swing.JPanel();
        jButton65 = new javax.swing.JButton();
        jButton66 = new javax.swing.JButton();
        jButton99 = new javax.swing.JButton();
        jPanel62 = new javax.swing.JPanel();
        jPanelpackDetails = new javax.swing.JPanel();
        jPanel26 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelTabpacking = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jDatePacking = new com.toedter.calendar.JDateChooser();
        jTextpackid = new javax.swing.JTextField();
        jLabel72 = new javax.swing.JLabel();
        jLabel73 = new javax.swing.JLabel();
        jTextpaqty = new javax.swing.JTextField();
        jButton_savepack = new javax.swing.JButton();
        jButton101 = new javax.swing.JButton();
        jScrollPane52 = new javax.swing.JScrollPane();
        jTable44 = new javax.swing.JTable();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanelConsumption = new javax.swing.JPanel();
        jLabel132 = new javax.swing.JLabel();
        jLabel137 = new javax.swing.JLabel();
        jLabel138 = new javax.swing.JLabel();
        jTextpid = new javax.swing.JTextField();
        jTextppname = new javax.swing.JTextField();
        jTextppqty = new javax.swing.JTextField();
        jScrollPane53 = new javax.swing.JScrollPane();
        jTable_consumedproduct = new javax.swing.JTable();
        jButton102 = new javax.swing.JButton();
        jButton103 = new javax.swing.JButton();
        jScrollPane54 = new javax.swing.JScrollPane();
        jTable_ppack = new javax.swing.JTable();
        jLabel139 = new javax.swing.JLabel();
        jLabel148 = new javax.swing.JLabel();
        jLabel198 = new javax.swing.JLabel();
        jLabel199 = new javax.swing.JLabel();
        jCombo_package = new javax.swing.JComboBox<>();
        jText_packageqty = new javax.swing.JTextField();
        jCombo_label = new javax.swing.JComboBox<>();
        jText_lblqty = new javax.swing.JTextField();
        jButton104 = new javax.swing.JButton();
        jButton105 = new javax.swing.JButton();
        jButton51 = new javax.swing.JButton();
        jButton61 = new javax.swing.JButton();
        jButton97 = new javax.swing.JButton();
        jButton106 = new javax.swing.JButton();
        jPanelLoader = new javax.swing.JPanel();
        jCombopprod = new javax.swing.JComboBox<>();
        jLabel56 = new javax.swing.JLabel();
        jText_manpower = new javax.swing.JTextField();
        jPanelTabpackrpt = new javax.swing.JPanel();
        jPanelRawMaterialMovement = new javax.swing.JPanel();
        jScrollPane20 = new javax.swing.JScrollPane();
        jTable12 = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jPanelING = new javax.swing.JPanel();
        jPanel45 = new javax.swing.JPanel();
        jButton88 = new javax.swing.JButton();
        jButton89 = new javax.swing.JButton();
        jPanel47 = new javax.swing.JPanel();
        jScrollPane45 = new javax.swing.JScrollPane();
        jTable39 = new javax.swing.JTable();
        jLabel229 = new javax.swing.JLabel();
        jPanelPStock = new javax.swing.JPanel();
        jLabel195 = new javax.swing.JLabel();
        jPanel34 = new javax.swing.JPanel();
        jButton75 = new javax.swing.JButton();
        jButton76 = new javax.swing.JButton();
        jScrollPane39 = new javax.swing.JScrollPane();
        jTable34 = new javax.swing.JTable();
        jPanel40 = new javax.swing.JPanel();
        jScrollPane46 = new javax.swing.JScrollPane();
        jTable40 = new javax.swing.JTable();
        jButton49 = new javax.swing.JButton();
        jButton50 = new javax.swing.JButton();
        jPanel36 = new javax.swing.JPanel();
        stocksproduct = new javax.swing.JPanel();
        jLabel196 = new javax.swing.JLabel();
        jScrollPane38 = new javax.swing.JScrollPane();
        jTable33 = new javax.swing.JTable();
        jButton83 = new javax.swing.JButton();
        productmovement = new javax.swing.JPanel();
        jLabel197 = new javax.swing.JLabel();
        jPanelPck = new javax.swing.JPanel();
        jButton62 = new javax.swing.JButton();
        jButton63 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jComboBox17 = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jComboBox16 = new javax.swing.JComboBox<>();
        jButton98 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane22 = new javax.swing.JScrollPane();
        jTable18 = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        jPanelFactory = new javax.swing.JPanel();
        jLabel120 = new javax.swing.JLabel();
        jCombofof = new javax.swing.JComboBox<>();
        jButton43 = new javax.swing.JButton();
        UsageAnalysis = new javax.swing.JPanel();
        jComboBox18 = new javax.swing.JComboBox();
        jComboBox19 = new javax.swing.JComboBox();
        jDate1st = new com.toedter.calendar.JDateChooser();
        jDate2nd = new com.toedter.calendar.JDateChooser();
        jLabel126 = new javax.swing.JLabel();
        jLabel127 = new javax.swing.JLabel();
        jLabel128 = new javax.swing.JLabel();
        jLabel129 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabledisp = new javax.swing.JTable();
        jLabel130 = new javax.swing.JLabel();
        jButtondisplay = new javax.swing.JButton();
        jButton109 = new javax.swing.JButton();
        jButton100 = new javax.swing.JButton();
        jScrollPane14 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jLabel155 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jPanelWarehouse = new javax.swing.JPanel();
        jLabel146 = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        jButton56 = new javax.swing.JButton();
        jButton57 = new javax.swing.JButton();
        jButton74 = new javax.swing.JButton();
        jButton96 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        jButton52 = new javax.swing.JButton();
        jPanel54 = new javax.swing.JPanel();
        jPanel55 = new javax.swing.JPanel();
        jPanel56 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jTextWarehouse = new javax.swing.JTextField();
        jDateWarehouse = new com.toedter.calendar.JDateChooser();
        jRadioButton15 = new javax.swing.JRadioButton();
        jRadioButton16 = new javax.swing.JRadioButton();
        jRadioButton17 = new javax.swing.JRadioButton();
        jProdWarehouse = new javax.swing.JTextField();
        jButton58 = new javax.swing.JButton();
        jScrollPane31 = new javax.swing.JScrollPane();
        jTable26 = new javax.swing.JTable();
        jScrollPane32 = new javax.swing.JScrollPane();
        jTable27 = new javax.swing.JTable();
        jTextField111 = new javax.swing.JTextField();
        jTextField112 = new javax.swing.JTextField();
        jTextField113 = new javax.swing.JTextField();
        jComboBox33 = new javax.swing.JComboBox<>();
        jTextField114 = new javax.swing.JTextField();
        jTextField115 = new javax.swing.JTextField();
        jButton59 = new javax.swing.JButton();
        jButton60 = new javax.swing.JButton();
        jComboBox34 = new javax.swing.JComboBox<>();
        jLabel147 = new javax.swing.JLabel();
        jLabel149 = new javax.swing.JLabel();
        jTextField116 = new javax.swing.JTextField();
        jLabel151 = new javax.swing.JLabel();
        jTextField117 = new javax.swing.JTextField();
        jLabel152 = new javax.swing.JLabel();
        jTextField109 = new javax.swing.JTextField();
        jLabel113 = new javax.swing.JLabel();
        jLabel114 = new javax.swing.JLabel();
        jButton86 = new javax.swing.JButton();
        warehousiing_date = new com.toedter.calendar.JDateChooser();
        jLabel162 = new javax.swing.JLabel();
        jLabel206 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel207 = new javax.swing.JLabel();
        jLabel150 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel96 = new javax.swing.JLabel();
        jLabel131 = new javax.swing.JLabel();
        jTextField91 = new javax.swing.JTextField();
        jTextField97 = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jLabel58 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jTextField25 = new javax.swing.JTextField();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTable9 = new javax.swing.JTable();
        jTextField26 = new javax.swing.JTextField();
        jLabel60 = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTable10 = new javax.swing.JTable();
        jTextField27 = new javax.swing.JTextField();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTable11 = new javax.swing.JTable();
        jTextField29 = new javax.swing.JTextField();
        jLabel61 = new javax.swing.JLabel();
        jLabel69 = new javax.swing.JLabel();
        jTextField33 = new javax.swing.JTextField();
        jButton16 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jLabel70 = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        jTextField34 = new javax.swing.JTextField();
        jTextField35 = new javax.swing.JTextField();
        jTextField47 = new javax.swing.JTextField();
        jLabel75 = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        jTextField48 = new javax.swing.JTextField();
        jTextField49 = new javax.swing.JTextField();
        jLabel77 = new javax.swing.JLabel();
        jLabel78 = new javax.swing.JLabel();
        jTextField50 = new javax.swing.JTextField();
        jTextField51 = new javax.swing.JTextField();
        jLabel79 = new javax.swing.JLabel();
        jLabel80 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel81 = new javax.swing.JLabel();
        jLabel82 = new javax.swing.JLabel();
        jTextField52 = new javax.swing.JTextField();
        jTextField53 = new javax.swing.JTextField();
        jTextField54 = new javax.swing.JTextField();
        jTextField55 = new javax.swing.JTextField();
        jLabel83 = new javax.swing.JLabel();
        jTextField56 = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jLabel84 = new javax.swing.JLabel();
        jLabel85 = new javax.swing.JLabel();
        jTextField57 = new javax.swing.JTextField();
        jTextField58 = new javax.swing.JTextField();
        jLabel86 = new javax.swing.JLabel();
        jLabel87 = new javax.swing.JLabel();
        jTextField59 = new javax.swing.JTextField();
        jTextField60 = new javax.swing.JTextField();
        jTextField61 = new javax.swing.JTextField();
        jLabel88 = new javax.swing.JLabel();
        jButton23 = new javax.swing.JButton();
        jComboBox22 = new javax.swing.JComboBox<>();
        jButton32 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jDate5 = new com.toedter.calendar.JDateChooser();
        jDate6 = new com.toedter.calendar.JDateChooser();
        jLabel57 = new javax.swing.JLabel();
        jRadioButton10 = new javax.swing.JRadioButton();
        jComboBox24 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel103 = new javax.swing.JLabel();
        jLabel116 = new javax.swing.JLabel();
        jTextField88 = new javax.swing.JTextField();
        jComboBox43 = new javax.swing.JComboBox<>();
        jRadioButton23 = new javax.swing.JRadioButton();
        jPanelRecp = new javax.swing.JPanel();
        jPanel44 = new javax.swing.JPanel();
        jLabel231 = new javax.swing.JLabel();
        jLabel232 = new javax.swing.JLabel();
        jTextId = new javax.swing.JTextField();
        jComborecp = new javax.swing.JComboBox<>();
        jDaterecp = new com.toedter.calendar.JDateChooser();
        jLabel233 = new javax.swing.JLabel();
        jLabel234 = new javax.swing.JLabel();
        jLabel235 = new javax.swing.JLabel();
        jComboFrom = new javax.swing.JComboBox<>();
        jTextQty = new javax.swing.JTextField();
        jComboName = new javax.swing.JComboBox<>();
        jButtonDiscard = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jScrollPane47 = new javax.swing.JScrollPane();
        jTablerecp = new javax.swing.JTable();
        jButtonSaveall = new javax.swing.JButton();
        jButton94 = new javax.swing.JButton();
        jLabel125 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jPanelPasteurization = new javax.swing.JPanel();
        jDatePast = new com.toedter.calendar.JDateChooser();
        jLabel202 = new javax.swing.JLabel();
        jLabel203 = new javax.swing.JLabel();
        jComboRawPast = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        fieldin = new javax.swing.JTextField();
        fieldout = new javax.swing.JTextField();
        fieldwaste = new javax.swing.JTextField();
        jLabel204 = new javax.swing.JLabel();
        waste = new javax.swing.JLabel();
        manpo = new javax.swing.JLabel();
        jLabel208 = new javax.swing.JLabel();
        fieldmanp = new javax.swing.JTextField();
        jButton80 = new javax.swing.JButton();
        jButton81 = new javax.swing.JButton();
        jButton78 = new javax.swing.JButton();
        jTextField154 = new javax.swing.JTextField();
        past_no = new javax.swing.JLabel();
        jComboBox29 = new javax.swing.JComboBox<>();
        jLabel106 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel140 = new javax.swing.JLabel();
        decider = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel62 = new javax.swing.JLabel();
        jButton17 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        jScrollPane15 = new javax.swing.JScrollPane();
        jTable13 = new javax.swing.JTable();
        jTextField65 = new javax.swing.JTextField();
        jTextField66 = new javax.swing.JTextField();
        jLabel94 = new javax.swing.JLabel();
        jLabel93 = new javax.swing.JLabel();
        jLabel97 = new javax.swing.JLabel();
        jTextField70 = new javax.swing.JTextField();
        jTextField71 = new javax.swing.JTextField();
        jTextField72 = new javax.swing.JTextField();
        jLabel98 = new javax.swing.JLabel();
        jLabel99 = new javax.swing.JLabel();
        jTextField69 = new javax.swing.JTextField();
        jTextField28 = new javax.swing.JTextField();
        jLabel100 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jTextField74 = new javax.swing.JTextField();
        jLabel102 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jTextField75 = new javax.swing.JTextField();
        jTextField76 = new javax.swing.JTextField();
        jLabel108 = new javax.swing.JLabel();
        jLabel109 = new javax.swing.JLabel();
        jTextField77 = new javax.swing.JTextField();
        jTextField84 = new javax.swing.JTextField();
        jLabel110 = new javax.swing.JLabel();
        jTextField89 = new javax.swing.JTextField();
        jLabel118 = new javax.swing.JLabel();
        jLabel153 = new javax.swing.JLabel();
        jTextField110 = new javax.swing.JTextField();
        jPanel23 = new javax.swing.JPanel();
        jTextField44 = new javax.swing.JTextField();
        jTextField45 = new javax.swing.JTextField();
        jTextField78 = new javax.swing.JTextField();
        jTextField79 = new javax.swing.JTextField();
        jTextField82 = new javax.swing.JTextField();
        jTextField80 = new javax.swing.JTextField();
        jTextField43 = new javax.swing.JTextField();
        jTextField81 = new javax.swing.JTextField();
        jTextField83 = new javax.swing.JTextField();
        jTextField123 = new javax.swing.JTextField();
        jTextField128 = new javax.swing.JTextField();
        jTextField122 = new javax.swing.JTextField();
        jLabel158 = new javax.swing.JLabel();
        jLabel167 = new javax.swing.JLabel();
        jLabel168 = new javax.swing.JLabel();
        jPanel28 = new javax.swing.JPanel();
        jLabel166 = new javax.swing.JLabel();
        jLabel169 = new javax.swing.JLabel();
        jLabel170 = new javax.swing.JLabel();
        jTextField129 = new javax.swing.JTextField();
        jTextField130 = new javax.swing.JTextField();
        jTextField131 = new javax.swing.JTextField();
        jTextField132 = new javax.swing.JTextField();
        jTextField133 = new javax.swing.JTextField();
        jTextField134 = new javax.swing.JTextField();
        jTextField135 = new javax.swing.JTextField();
        jTextField136 = new javax.swing.JTextField();
        jTextField137 = new javax.swing.JTextField();
        jLabel171 = new javax.swing.JLabel();
        jLabel172 = new javax.swing.JLabel();
        jLabel173 = new javax.swing.JLabel();
        jLabel174 = new javax.swing.JLabel();
        jLabel175 = new javax.swing.JLabel();
        jLabel176 = new javax.swing.JLabel();
        jLabel200 = new javax.swing.JLabel();
        jLabel201 = new javax.swing.JLabel();
        jTextField148 = new javax.swing.JTextField();
        jTextField149 = new javax.swing.JTextField();
        jTextField160 = new javax.swing.JTextField();
        jLabel225 = new javax.swing.JLabel();
        jTextmainidtransferlist = new javax.swing.JTextField();
        totsea = new javax.swing.JTextField();
        totman = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField139 = new javax.swing.JTextField();
        jTextField140 = new javax.swing.JTextField();
        jLabel177 = new javax.swing.JLabel();
        jLabel178 = new javax.swing.JLabel();
        jTextField141 = new javax.swing.JTextField();
        jTextField67 = new javax.swing.JTextField();
        jLabel95 = new javax.swing.JLabel();
        jTextLogin = new javax.swing.JTextField();
        jTextUser = new javax.swing.JTextField();
        jTextStatus = new javax.swing.JTextField();
        jLabel122 = new javax.swing.JLabel();
        jTextSubsidiary = new javax.swing.JTextField();
        rawm = new javax.swing.JTextField();
        consiered = new javax.swing.JComboBox<>();
        subof = new javax.swing.JTextField();
        jLabel142 = new javax.swing.JLabel();
        rawCombox = new javax.swing.JComboBox<>();
        SupCombox = new javax.swing.JComboBox<>();
        jPanelmodVouch = new javax.swing.JPanel();
        jPanel49 = new javax.swing.JPanel();
        jLabel236 = new javax.swing.JLabel();
        jLabel237 = new javax.swing.JLabel();
        jButton90 = new javax.swing.JButton();
        jButton91 = new javax.swing.JButton();
        jTextField163 = new javax.swing.JTextField();
        jTextField16 = new javax.swing.JTextField();
        jButton107 = new javax.swing.JButton();
        jDateChooser4 = new com.toedter.calendar.JDateChooser();
        jDateChooser7 = new com.toedter.calendar.JDateChooser();
        jPanel16 = new javax.swing.JPanel();
        jScrollPane25 = new javax.swing.JScrollPane();
        jTable21 = new javax.swing.JTable();
        jButton67 = new javax.swing.JButton();
        jButton68 = new javax.swing.JButton();
        jScrollPane30 = new javax.swing.JScrollPane();
        modTable = new javax.swing.JTable();
        jPanel27 = new javax.swing.JPanel();
        jScrollPane29 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanelSorting = new javax.swing.JPanel();
        jDatesort = new com.toedter.calendar.JDateChooser();
        jLabel209 = new javax.swing.JLabel();
        jLabel210 = new javax.swing.JLabel();
        jCombosort = new javax.swing.JComboBox<>();
        jLabel211 = new javax.swing.JLabel();
        jTextqtybefore = new javax.swing.JTextField();
        jLabel212 = new javax.swing.JLabel();
        jTextsortwaste = new javax.swing.JTextField();
        jLabel213 = new javax.swing.JLabel();
        jTextsortmanpower = new javax.swing.JTextField();
        jLabel214 = new javax.swing.JLabel();
        jTextsortqtyafter = new javax.swing.JTextField();
        jButton79 = new javax.swing.JButton();
        jButton82 = new javax.swing.JButton();
        jScrollPane40 = new javax.swing.JScrollPane();
        jTable35 = new javax.swing.JTable();
        jLabel215 = new javax.swing.JLabel();
        jCombosorttype = new javax.swing.JComboBox<>();
        jLabel216 = new javax.swing.JLabel();
        jScrollPane41 = new javax.swing.JScrollPane();
        jTextcomment = new javax.swing.JTextArea();
        jLabel217 = new javax.swing.JLabel();
        jComboBox46 = new javax.swing.JComboBox<>();
        jPanelTransfer = new javax.swing.JPanel();
        jPanel46 = new javax.swing.JPanel();
        jLabel238 = new javax.swing.JLabel();
        jLabel239 = new javax.swing.JLabel();
        jLabel240 = new javax.swing.JLabel();
        jTextFieldid = new javax.swing.JTextField();
        jtransDate = new com.toedter.calendar.JDateChooser();
        jScrollPane49 = new javax.swing.JScrollPane();
        jTable42 = new javax.swing.JTable();
        jLabel241 = new javax.swing.JLabel();
        jCombotoe = new javax.swing.JComboBox<>();
        jButton92 = new javax.swing.JButton();
        jLabel242 = new javax.swing.JLabel();
        jLabel243 = new javax.swing.JLabel();
        jButton93 = new javax.swing.JButton();
        jButton95 = new javax.swing.JButton();
        jTexty = new javax.swing.JTextField();
        jLabel244 = new javax.swing.JLabel();
        jTextid = new javax.swing.JTextField();
        jTextprod = new javax.swing.JTextField();
        jScrollPane48 = new javax.swing.JScrollPane();
        jTextcomm = new javax.swing.JTextArea();
        jLabel245 = new javax.swing.JLabel();
        jComboBox27 = new javax.swing.JComboBox<>();
        jPanelTransferList = new javax.swing.JPanel();
        jLabel246 = new javax.swing.JLabel();
        jScrollPane51 = new javax.swing.JScrollPane();
        jTable43 = new javax.swing.JTable();
        jButton41 = new javax.swing.JButton();
        WarehouseStock = new javax.swing.JPanel();
        jLabel247 = new javax.swing.JLabel();
        jScrollPane50 = new javax.swing.JScrollPane();
        jTable41 = new javax.swing.JTable();
        jPanelsalesstockupdate = new javax.swing.JPanel();
        jLabel121 = new javax.swing.JLabel();
        jPanel50 = new javax.swing.JPanel();
        jButton13 = new javax.swing.JButton();
        jButton28 = new javax.swing.JButton();
        jButton46 = new javax.swing.JButton();
        jPanel51 = new javax.swing.JPanel();
        jPanel52 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jPanel53 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField86 = new javax.swing.JTextField();
        jLabel111 = new javax.swing.JLabel();
        jLabel112 = new javax.swing.JLabel();
        jDatesct = new com.toedter.calendar.JDateChooser();
        jLabel123 = new javax.swing.JLabel();
        jLabel124 = new javax.swing.JLabel();
        jTextField85 = new javax.swing.JTextField();
        jTextField90 = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem26 = new javax.swing.JMenuItem();
        jMenuItem33 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem38 = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenu14 = new javax.swing.JMenu();
        jMenuItem27 = new javax.swing.JMenuItem();
        jMenuItem31 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem24 = new javax.swing.JMenuItem();
        jMenuItem25 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenu17 = new javax.swing.JMenu();
        jMenuItem47 = new javax.swing.JMenuItem();
        jMenuItem43 = new javax.swing.JMenuItem();
        jMenu13 = new javax.swing.JMenu();
        jMenuItem29 = new javax.swing.JMenuItem();
        jMenuItem30 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenu15 = new javax.swing.JMenu();
        jMenu16 = new javax.swing.JMenu();
        jMenu19 = new javax.swing.JMenu();
        jMenuItem45 = new javax.swing.JMenuItem();
        jMenuItem48 = new javax.swing.JMenuItem();
        jMenuItem49 = new javax.swing.JMenuItem();
        jMenuItem46 = new javax.swing.JMenuItem();
        jMenuItem44 = new javax.swing.JMenuItem();
        jMenu20 = new javax.swing.JMenu();
        jMenu21 = new javax.swing.JMenu();
        jMenuItem39 = new javax.swing.JMenuItem();
        jMenuItem42 = new javax.swing.JMenuItem();
        jMenu22 = new javax.swing.JMenu();
        jMenuItem40 = new javax.swing.JMenuItem();
        jMenuItem41 = new javax.swing.JMenuItem();
        jMenuItem35 = new javax.swing.JMenuItem();
        jMenuItem34 = new javax.swing.JMenuItem();
        jMenuItem36 = new javax.swing.JMenuItem();
        jMenuItem37 = new javax.swing.JMenuItem();
        jMenu23 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu9 = new javax.swing.JMenu();
        jMenuItem23 = new javax.swing.JMenuItem();
        jMenuItem22 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem32 = new javax.swing.JMenuItem();
        jMenu12 = new javax.swing.JMenu();
        jMenuItem28 = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenu1.setText("jMenu1");

        jMenuItem2.setText("jMenuItem2");

        jMenuItem8.setText("jMenuItem8");

        jPopupMenu1.setAutoscrolls(true);

        jTextArea5.setColumns(20);
        jTextArea5.setRows(5);
        jScrollPane26.setViewportView(jTextArea5);

        jTable22.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Raw Material", "Quantity", "Unit", "Product ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane27.setViewportView(jTable22);

        jTable23.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane28.setViewportView(jTable23);

        jTable28.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PId", "Date", "Packing Material", "Quantity", "Label", "Label Qty", "Manpower(hrs)"
            }
        ));
        jScrollPane33.setViewportView(jTable28);

        jTable29.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Date", "Product", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable29.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable26MouseClicked(evt);
            }
        });
        jScrollPane34.setViewportView(jTable29);

        jLabel181.setText("jLabel181");

        jLabel191.setText("DISPLAY PRODUCTION REPORT");

        jRadioButton22.setText("PRODUCT");

        jComboBox32.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel192.setText("FACTORY");

        jComboBox38.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel193.setText("DATE BETWEEEN");

        jLabel194.setText("AND");

        jButton72.setText("DISPLAY");
        jButton72.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton72ActionPerformed(evt);
            }
        });

        jButton73.setText("CANCEL");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addComponent(jRadioButton22)
                .addGap(18, 18, 18)
                .addComponent(jComboBox32, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(jLabel191))
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jButton72)
                        .addGap(45, 45, 45)
                        .addComponent(jButton73))
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel193)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jDialog1Layout.createSequentialGroup()
                                .addComponent(jLabel192)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox38, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jDialog1Layout.createSequentialGroup()
                                .addComponent(jDateChooser5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(jLabel194)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateChooser6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addComponent(jLabel191)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton22)
                    .addComponent(jComboBox32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox38, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel192))
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel194))
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDateChooser5, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                            .addComponent(jDateChooser6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel193, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(135, 135, 135)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton72)
                    .addComponent(jButton73))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jButton77.setText("jButton77");

        jMenu10.setText("File");
        jMenuBar2.add(jMenu10);

        jMenu11.setText("Edit");
        jMenuBar2.add(jMenu11);

        jToolBar2.setRollover(true);

        jButton37.setIcon(new javax.swing.ImageIcon(getClass().getResource("/newpackage1/navigate-left-icon.png"))); // NOI18N
        jButton37.setText("Previous");
        jButton37.setFocusable(false);
        jButton37.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton37.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(jButton37);

        jButton38.setIcon(new javax.swing.ImageIcon(getClass().getResource("/newpackage1/navigate-right-icon.png"))); // NOI18N
        jButton38.setText("Next");
        jButton38.setFocusable(false);
        jButton38.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton38.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(jButton38);

        jButton42.setIcon(new javax.swing.ImageIcon(getClass().getResource("/newpackage1/Actions-edit-redo-icon.png"))); // NOI18N
        jButton42.setText("jButton42");
        jButton42.setFocusable(false);
        jButton42.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton42.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(jButton42);

        jButton44.setText("jButton44");
        jButton44.setFocusable(false);
        jButton44.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton44.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(jButton44);

        jButton45.setText("jButton45");
        jButton45.setFocusable(false);
        jButton45.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton45.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(jButton45);

        jToolBar2.getAccessibleContext().setAccessibleParent(this);

        jButton47.setText("jButton47");

        jButton48.setText("jButton48");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NJORO CANNING FACTORY");
        setSize(new java.awt.Dimension(1066, 682));

        MainPanel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        MainPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        MainPanel.setPreferredSize(new java.awt.Dimension(1100, 650));
        MainPanel.setLayout(new java.awt.CardLayout());

        jPanelStart1.setBackground(new java.awt.Color(32, 191, 56));
        jPanelStart1.setLayout(null);

        jLabel_Username.setText("Username:");

        jLabel_Password.setText("Password:");

        jPasswordField_Password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPasswordField_PasswordKeyPressed(evt);
            }
        });

        jButton_Login.setText("Login");
        jButton_Login.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButton_LoginFocusGained(evt);
            }
        });
        jButton_Login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_LoginActionPerformed(evt);
            }
        });

        jButton_Cancel.setText("Cancel");
        jButton_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CancelActionPerformed(evt);
            }
        });

        jPanel48.setBackground(new java.awt.Color(75, 119, 190));
        jPanel48.setAutoscrolls(true);

        jTextField162.setEditable(false);
        jTextField162.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jTextField162.setText("NJORO CANNING FACTORY COST ANALYSIS");
        jTextField162.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField162ActionPerformed(evt);
            }
        });
        jPanel48.add(jTextField162);

        jLabel230.setIcon(new javax.swing.ImageIcon(getClass().getResource("/newpackage1/secrecy-icon.png"))); // NOI18N
        jLabel230.setText("jLabel1");

        javax.swing.GroupLayout jPanelLoginLayout = new javax.swing.GroupLayout(jPanelLogin);
        jPanelLogin.setLayout(jPanelLoginLayout);
        jPanelLoginLayout.setHorizontalGroup(
            jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel48, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                    .addGroup(jPanelLoginLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel230, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_Username)
                            .addComponent(jLabel_Password))
                        .addGap(17, 17, 17)
                        .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField_Username)
                            .addComponent(jPasswordField_Password)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLoginLayout.createSequentialGroup()
                        .addComponent(jButton_Login, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_Cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)))
                .addContainerGap())
        );
        jPanelLoginLayout.setVerticalGroup(
            jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel48, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelLoginLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel_Username, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField_Username, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPasswordField_Password, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addComponent(jLabel_Password, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelLoginLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                        .addComponent(jLabel230, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)))
                .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_Login)
                    .addComponent(jButton_Cancel))
                .addContainerGap())
        );

        jPanelStart1.add(jPanelLogin);
        jPanelLogin.setBounds(0, 30, 490, 197);

        jLabel107.setBackground(new java.awt.Color(255, 102, 51));
        jLabel107.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel107.setForeground(new java.awt.Color(204, 204, 0));
        jLabel107.setText("NJORO CANNING FACTORY (K) LIMITED");
        jPanelStart1.add(jLabel107);
        jLabel107.setBounds(340, 0, 360, 20);

        MainPanel.add(jPanelStart1, "card4");

        jPanelMenu2.setBackground(new java.awt.Color(75, 119, 190));
        jPanelMenu2.setFocusTraversalPolicyProvider(true);
        jPanelMenu2.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanelMenu2.setName(""); // NOI18N
        jPanelMenu2.setPreferredSize(new java.awt.Dimension(1010, 840));
        jPanelMenu2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("ITEM NAME");
        jPanelMenu2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 230, -1, 30));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanelMenu2.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 230, 230, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("  UNIT");
        jPanelMenu2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 280, 50, 30));
        jLabel2.getAccessibleContext().setAccessibleName("UNIT");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("FACTORY");
        jPanelMenu2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 180, -1, 30));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "T/Lite cream", "T/Lite dry mix" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanelMenu2.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 180, 230, 30));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dozen", "Gms.", "Hours", "Kgs", "Metre", "Pcs", "Tonne", "Units" }));
        jPanelMenu2.add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 280, 230, 30));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("OPENING BALANCE");
        jPanelMenu2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 330, -1, 30));

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jPanelMenu2.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 330, 230, 30));

        jRadioButton7.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jRadioButton7.setText("Quantity");
        jPanelMenu2.add(jRadioButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 270, -1, -1));
        jPanelMenu2.add(jTextField46, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 270, 90, 30));

        jPanel2Carded.setLayout(new java.awt.CardLayout());
        jPanelMenu2.add(jPanel2Carded, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel74.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel74.setText("Kgs.");
        jPanelMenu2.add(jLabel74, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 280, -1, 20));

        jPanelMenu2.add(jComboBox23, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 160, 170, 30));

        jLabel92.setText("Group");
        jPanelMenu2.add(jLabel92, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 165, -1, 20));

        jButton34.setText("jButton34");
        jPanelMenu2.add(jButton34, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 160, 40, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("      ADD  PRODUCT ");

        jButtonReset_Product.setText("RESET");
        jButtonReset_Product.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReset_ProductActionPerformed(evt);
            }
        });

        jButtonSave_Product.setText("ADD");
        jButtonSave_Product.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSave_ProductActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap(410, Short.MAX_VALUE)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel19Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(306, 306, 306))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel19Layout.createSequentialGroup()
                        .addComponent(jButtonSave_Product, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonReset_Product, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(228, 228, 228))))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 276, Short.MAX_VALUE)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonReset_Product, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSave_Product, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41))
        );

        jPanelMenu2.add(jPanel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, 890, 400));

        MainPanel.add(jPanelMenu2, "card5");

        jPanel3.setBackground(new java.awt.Color(188, 170, 164));
        jPanel3.setAutoscrolls(true);
        jPanel3.setPreferredSize(new java.awt.Dimension(1010, 840));

        jTable15.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ProductID", "Raw Material", "Quantity", "rawid", "Cons_No"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable15MouseClicked(evt);
            }
        });
        jScrollPane17.setViewportView(jTable15);
        if (jTable15.getColumnModel().getColumnCount() > 0) {
            jTable15.getColumnModel().getColumn(0).setResizable(false);
            jTable15.getColumnModel().getColumn(0).setPreferredWidth(45);
        }

        jTable14.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Product", "Quantity", "Unit", "Batch/No"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable14MouseClicked(evt);
            }
        });
        jTable14.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable14KeyPressed(evt);
            }
        });
        jScrollPane16.setViewportView(jTable14);
        if (jTable14.getColumnModel().getColumnCount() > 0) {
            jTable14.getColumnModel().getColumn(0).setResizable(false);
            jTable14.getColumnModel().getColumn(0).setPreferredWidth(45);
        }

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("PRODUCTS");

        jPanel3Carded.setLayout(new java.awt.CardLayout());

        jButton22.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton22.setText("SAVE ALL");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });

        jTable17.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Package", "No Of Packages", "Label", "No Of Labels"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable17MouseClicked(evt);
            }
        });
        jScrollPane19.setViewportView(jTable17);
        if (jTable17.getColumnModel().getColumnCount() > 0) {
            jTable17.getColumnModel().getColumn(0).setResizable(false);
            jTable17.getColumnModel().getColumn(0).setPreferredWidth(45);
        }

        jComboBox21.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Click Here!!" }));
        jComboBox21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox21MouseClicked(evt);
            }
        });
        jComboBox21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox21ActionPerformed(evt);
            }
        });

        jLabel91.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel91.setText("Group");

        jPanel17.setBackground(new java.awt.Color(141, 110, 99));

        jLabel64.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel64.setText("QUANTITY");

        jTextField73.setMinimumSize(new java.awt.Dimension(4, 17));
        jTextField73.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField73FocusGained(evt);
            }
        });

        jComboBox13.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CLICK" }));
        jComboBox13.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBox13FocusGained(evt);
            }
        });
        jComboBox13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox13ActionPerformed(evt);
            }
        });

        jLabel63.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel63.setText("PRODUCT");

        jButtonAdd_productproduction.setText("SAVE");
        jButtonAdd_productproduction.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButtonAdd_productproductionFocusGained(evt);
            }
        });
        jButtonAdd_productproduction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAdd_productproductionActionPerformed(evt);
            }
        });

        jButtonDelete_productproduction.setText("DELETE");
        jButtonDelete_productproduction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelete_productproductionActionPerformed(evt);
            }
        });

        jButtonSplit_productproduction.setText("SPLIT");
        jButtonSplit_productproduction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSplit_productproductionActionPerformed(evt);
            }
        });

        jLabel115.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel115.setText("WASTE");

        jTextField87.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField87FocusGained(evt);
            }
        });

        jTextField64.setEditable(false);

        jTextField30.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField30FocusGained(evt);
            }
        });
        jTextField30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField30ActionPerformed(evt);
            }
        });

        jLabel101.setFont(new java.awt.Font("Dialog", 1, 8)); // NOI18N
        jLabel101.setText("monthly");

        batch_no.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batch_noActionPerformed(evt);
            }
        });

        jLabel44.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel44.setText("B/No");

        jTextField95.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        jLabel179.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel179.setText("Seasonal");

        jTextField96.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        jLabel180.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel180.setText("Permanent");

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel64)
                        .addGap(48, 48, 48)
                        .addComponent(jLabel115, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(jLabel179))
                    .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel17Layout.createSequentialGroup()
                            .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel17Layout.createSequentialGroup()
                                    .addGap(2, 2, 2)
                                    .addComponent(jTextField30, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jTextField87, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel17Layout.createSequentialGroup()
                                    .addGap(68, 68, 68)
                                    .addComponent(jButtonDelete_productproduction)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButtonAdd_productproduction, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(7, 7, 7)
                            .addComponent(jLabel180)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTextField96, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel17Layout.createSequentialGroup()
                            .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel17Layout.createSequentialGroup()
                                    .addComponent(jLabel63)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextField64, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButtonSplit_productproduction, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel44))
                                .addGroup(jPanel17Layout.createSequentialGroup()
                                    .addComponent(jComboBox13, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel101)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel17Layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(jTextField73, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(batch_no, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jTextField95, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel63, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField64, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSplit_productproduction, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel44)
                    .addComponent(batch_no))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel101)
                    .addComponent(jTextField73, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel115, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel64)
                    .addComponent(jTextField95, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel179))
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField87, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonDelete_productproduction)
                            .addComponent(jButtonAdd_productproduction)))
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField96, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel180))))
                .addContainerGap())
        );

        jComboBox26.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default" }));
        jComboBox26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox26ActionPerformed(evt);
            }
        });

        jButton55.setText("BOM");
        jButton55.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton55ActionPerformed(evt);
            }
        });

        jPanel24.setBackground(new java.awt.Color(141, 110, 99));
        jPanel24.setBorder(javax.swing.BorderFactory.createTitledBorder("ADD PRODUCTION VOUCHER"));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("VOUCHER NO:");

        jTextField3.setEditable(false);
        jTextField3.setMinimumSize(new java.awt.Dimension(4, 15));
        jTextField3.setPreferredSize(new java.awt.Dimension(4, 15));
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField3KeyPressed(evt);
            }
        });

        jButton33.setText("jButton33");
        jButton33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton33ActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel17.setText("START DATE");

        jDate1.setDateFormatString("yyyy,MM,dd");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel19.setText("ELECTRICITY");

        jTextField11.setText("0");

        jLabel154.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel154.setText("DIESEL");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel18.setText("FIREWOOD");

        jLabel119.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel119.setText("BRIQUETTES");

        jTextField98.setText("0");

        jTextField10.setText("0");
        jTextField10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField10ActionPerformed(evt);
            }
        });

        jTextField118.setText("0");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("ADD");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel219.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel219.setText("Water");

        jTextField94.setText("0");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "OTHER" }));
        jComboBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox3ItemStateChanged(evt);
            }
        });
        jComboBox3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox3MouseClicked(evt);
            }
        });
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jLabel184.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel184.setText("END DATE");

        enddate.setDateFormatString("yyyy,MM,dd");

        jLabel47.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel47.setText("FACTORY");

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel24Layout.createSequentialGroup()
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton33, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel24Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)))
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(enddate, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jLabel184)
                        .addGap(79, 79, 79)
                        .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel119, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField98, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField118, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel154, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jTextField94, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel219, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel24Layout.createSequentialGroup()
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel24Layout.createSequentialGroup()
                                .addComponent(jLabel154, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGap(9, 9, 9))
                            .addGroup(jPanel24Layout.createSequentialGroup()
                                .addComponent(jLabel219, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField118, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField94, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel24Layout.createSequentialGroup()
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel184, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel119)
                                .addComponent(jLabel47)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(enddate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField98, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBox3))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel24Layout.createSequentialGroup()
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel24Layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jButton33, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel24Layout.createSequentialGroup()
                                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(7, 7, 7)
                                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jDate1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jButton64.setText("Product as raw material");
        jButton64.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton64ActionPerformed(evt);
            }
        });

        jRadioButton11.setText("Shared");
        jRadioButton11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRadioButton11MouseClicked(evt);
            }
        });
        jRadioButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton11ActionPerformed(evt);
            }
        });

        jPanel18.setBackground(new java.awt.Color(141, 110, 99));

        jLabel89.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel89.setText("ID");

        jTextField62.setEditable(false);

        jComboBox14.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CLICK" }));
        jComboBox14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox14ActionPerformed(evt);
            }
        });

        jTextField32.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField32FocusGained(evt);
            }
        });
        jTextField32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField32ActionPerformed(evt);
            }
        });
        jTextField32.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField32KeyPressed(evt);
            }
        });

        jLabel68.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel68.setText("QUANTITY");

        jButton30.setText("DELETE");
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton30ActionPerformed(evt);
            }
        });

        jButton15.setText("ADD");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jLabel67.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel67.setText("INGREDIENT");

        jButton36.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jButton36.setText("SPLIT");
        jButton36.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton36ActionPerformed(evt);
            }
        });

        jRadioButton14.setText("Shared");

        jComboBox30.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "pre-cosn_no" }));
        jComboBox30.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBox30FocusGained(evt);
            }
        });
        jComboBox30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox30ActionPerformed(evt);
            }
        });

        jLabel143.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel143.setText("Waste");

        jTextField39.setText("0");
        jTextField39.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField39ActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel21.setText("INGREDIENTS");

        jLabel182.setText("cons/no    ");

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addComponent(jLabel67)
                        .addGap(13, 13, 13)
                        .addComponent(jComboBox14, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel18Layout.createSequentialGroup()
                                .addComponent(jLabel89, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jTextField62, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jRadioButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(80, 80, 80)
                                .addComponent(jButton36, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel21)
                            .addGroup(jPanel18Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jLabel143)
                                .addGap(12, 12, 12)
                                .addComponent(jTextField39, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel18Layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jComboBox30, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel18Layout.createSequentialGroup()
                                        .addComponent(jButton30)
                                        .addGap(21, 21, 21)
                                        .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel18Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel68, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jTextField32, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel182)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel18Layout.createSequentialGroup()
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel89, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField62, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton36, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel67, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel68, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextField32))
                            .addComponent(jLabel182))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel143)
                            .addComponent(jTextField39, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton30)
                    .addComponent(jButton15)))
        );

        jRadioButton21.setText("NO INGREDIENT");

        jTable16.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ProductionID", "Ingredient", "Quantity", "ingredid", "Price", "Cons_no"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable16MouseClicked(evt);
            }
        });
        jScrollPane18.setViewportView(jTable16);

        jButton26.setText("DELETE");
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
            }
        });

        jButton12.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jButton12.setText("ADD");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jTextField99.setText("0");

        jLabel135.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel135.setText("Waste");

        jTextField24.setText("0");

        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Click Here!" }));
        jComboBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox5ActionPerformed(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel23.setText("LABEL");

        jLabel46.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel46.setText("Qty");

        jTextField23.setText("0");
        jTextField23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField23ActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel22.setText("PACKAGE");

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Click Here!" }));
        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });

        jTextField68.setEditable(false);

        jComboBox31.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "pre-cosn_no" }));

        jComboBox35.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "pre-cosn_no" }));

        jLabel164.setText("Cons No");

        jLabel65.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel65.setText("Raw Material");

        jComboBox15.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CLICK" }));
        jComboBox15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jComboBox15MouseReleased(evt);
            }
        });
        jComboBox15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox15ActionPerformed(evt);
            }
        });

        jLabel90.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel90.setText("ID");

        jTextField63.setEditable(false);
        jTextField63.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField63ActionPerformed(evt);
            }
        });

        jComboBox20.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "pre-cosn_no" }));
        jComboBox20.setOpaque(false);
        jComboBox20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox20ActionPerformed(evt);
            }
        });

        jLabel66.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel66.setText("QUANTITY");

        jTextField31.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField31FocusGained(evt);
            }
        });
        jTextField31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField31ActionPerformed(evt);
            }
        });
        jTextField31.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField31KeyPressed(evt);
            }
        });

        jButton35.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        jButton35.setText("SPLIT");
        jButton35.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton35ActionPerformed(evt);
            }
        });

        jButton29.setText("DELETE");
        jButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton29ActionPerformed(evt);
            }
        });

        jButton14.setText("ADD");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jLabel144.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel144.setText("Waste");

        jTextField92.setText("0");
        jTextField92.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField92ActionPerformed(evt);
            }
        });

        jLabel145.setText("Raw Material");
        jLabel145.setEnabled(false);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Raw Materials");

        jLabel183.setText("cons/no  ");

        jButton69.setText("Reworks");

        jRadioButton12.setText("Shared");

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addComponent(jLabel65)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox15, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
                                .addComponent(jLabel90, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField63, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(16, 16, 16)
                        .addComponent(jButton69)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton35, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66))))
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(jButton29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton14))
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel20Layout.createSequentialGroup()
                                .addComponent(jLabel66, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField92, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                    .addComponent(jTextField31)))
                            .addComponent(jLabel144, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel20Layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(jLabel145, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel20Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel183, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox20, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(80, 80, 80))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField63, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel90, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton69, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton35, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButton12))
                .addGap(6, 6, 6)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox15, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel65, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel66)
                    .addComponent(jTextField31, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel183))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel144)
                    .addComponent(jTextField92, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel145))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton14)
                    .addComponent(jButton29)))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel91, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox21, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBox26, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioButton11)
                                .addGap(106, 106, 106)
                                .addComponent(jButton55)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(216, 216, 216)
                                        .addComponent(jPanel3Carded, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(58, 58, 58)
                                        .addComponent(jLabel11))))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane17, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                                    .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField68, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                                        .addGap(28, 28, 28)
                                                        .addComponent(jLabel22))
                                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                            .addComponent(jLabel164)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                            .addComponent(jComboBox35, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addGroup(jPanel3Layout.createSequentialGroup()
                                                                    .addGap(10, 10, 10)
                                                                    .addComponent(jLabel135, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                .addGroup(jPanel3Layout.createSequentialGroup()
                                                                    .addGap(27, 27, 27)
                                                                    .addComponent(jLabel46)))
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                .addComponent(jTextField99)
                                                                .addComponent(jTextField23, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)))))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                                        .addGap(31, 31, 31)
                                                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(jTextField24, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jComboBox31, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(34, 34, 34)
                                        .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(65, 65, 65)
                                        .addComponent(jButton26))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton22, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jRadioButton21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton64)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(86, 86, 86)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel91, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBox21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBox26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jRadioButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jPanel24, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel3Carded, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton55)
                                    .addComponent(jTextField68, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(2, 2, 2)
                                .addComponent(jLabel22)
                                .addGap(2, 2, 2)
                                .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel164)
                            .addComponent(jComboBox35, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox31, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField24))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel135)
                            .addComponent(jTextField99, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton26)
                            .addComponent(jButton12))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(jButton22, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton64)
                            .addComponent(jRadioButton21)))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap(163, Short.MAX_VALUE))
        );

        MainPanel.add(jPanel3, "card5");
        jPanel3.getAccessibleContext().setAccessibleName("PRODUCTION VOUCHER");
        jPanel3.getAccessibleContext().setAccessibleDescription("");

        jLabel161.setText("MANPOWER HRS");

        jLabel160.setText("QUANTITY");

        jLabel159.setText("PRODUCT");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(1174, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel161)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel160)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGap(4, 4, 4)
                            .addComponent(jLabel159))))
                .addGap(3, 3, 3))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(344, 344, 344)
                .addComponent(jLabel159, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel160)
                .addGap(34, 34, 34)
                .addComponent(jLabel161)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MainPanel.add(jPanel4, "card33");

        jPanel5.setBackground(new java.awt.Color(22, 160, 133));
        jPanel5.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel5.setPreferredSize(new java.awt.Dimension(1010, 840));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(204, 0, 51));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1130, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 119, Short.MAX_VALUE)
        );

        jPanel5.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, -1, 119));

        jPanelWithFunctions.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 0, 51), 2, true));
        jPanelWithFunctions.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel26.setText("MATERIAL NAME");
        jPanelWithFunctions.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, 118, -1));

        jTextField14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField14ActionPerformed(evt);
            }
        });
        jPanelWithFunctions.add(jTextField14, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 90, 317, 31));

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel30.setText("LABEL NAME");
        jPanelWithFunctions.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 70, -1, 30));
        jPanelWithFunctions.add(jTextField15, new org.netbeans.lib.awtextra.AbsoluteConstraints(722, 71, 183, 30));

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel31.setText("OPENING BALANCE");
        jPanelWithFunctions.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 200, -1, 32));

        jComboBox6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        jComboBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox6ActionPerformed(evt);
            }
        });
        jPanelWithFunctions.add(jComboBox6, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 140, 317, 32));

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel25.setText("ADD PACKING  MATERIAL");
        jPanelWithFunctions.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, -1, -1));

        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel33.setText("PRODUCT");
        jPanelWithFunctions.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 140, 100, 30));

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel27.setText("PRICE/CAN");
        jPanelWithFunctions.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 190, 70, 20));
        jPanelWithFunctions.add(jTextField13, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 190, 317, 30));

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel28.setText("OPENING BALANCE");
        jPanelWithFunctions.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 250, -1, 20));

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton5.setText("SAVE");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanelWithFunctions.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 320, 100, 30));

        jTextField17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField17ActionPerformed(evt);
            }
        });
        jPanelWithFunctions.add(jTextField17, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 130, 183, 30));

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel32.setText("PRICE/LABEL");
        jPanelWithFunctions.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 150, -1, -1));

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton6.setText("DISCARD");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanelWithFunctions.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 320, -1, 30));

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel29.setText("ADD LABEL");
        jPanelWithFunctions.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(741, 14, 80, 30));

        jTextField18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField18ActionPerformed(evt);
            }
        });
        jPanelWithFunctions.add(jTextField18, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 240, 317, 30));

        jTextField19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField19ActionPerformed(evt);
            }
        });
        jPanelWithFunctions.add(jTextField19, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 190, 174, 32));

        jButton24.setText("jButton24");
        jButton24.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButton24FocusGained(evt);
            }
        });
        jPanelWithFunctions.add(jButton24, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 140, 34, -1));

        jLabel104.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel104.setText("FACTORY");
        jPanelWithFunctions.add(jLabel104, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 50, -1, -1));

        jComboBox25.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F1", "F2", "F3", "F4", "F5", "F6", "F8", "T/Lite cream", "T/Lite dry mix" }));
        jComboBox25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox25ActionPerformed(evt);
            }
        });
        jPanelWithFunctions.add(jComboBox25, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 40, 310, 30));

        jPanel5.add(jPanelWithFunctions, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 180, 920, 350));

        MainPanel.add(jPanel5, "card11");

        jPanel6.setBackground(new java.awt.Color(0, 153, 204));
        jPanel6.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel6.setPreferredSize(new java.awt.Dimension(1010, 840));

        jPanel11.setBackground(new java.awt.Color(0, 153, 204));

        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel34.setText("FACTORY");

        jComboBox8.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dozen", "Gms.", "Hours", "Kgs", "Metre", "Pcs", "Tonne", "Units" }));

        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel36.setText("UNIT:");

        jLabel38.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel38.setText("ADD INGREDIENT");

        jComboBox7.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F1" }));
        jComboBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox7ActionPerformed(evt);
            }
        });

        jLabel35.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel35.setText("INGREDIENT:");

        jLabel37.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel37.setText("OPENING BALANCE:");

        jTextField37.setEditable(false);
        jTextField37.setText("0");

        jButton11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton11.setText("DISCARD");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton10.setText("SAVE");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel163.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel163.setText("PRICE:");

        jButton25.setText("MODIFY");
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });

        jTable19.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ingredient Name", "Factory", "Unit", "Unit Price", "Stock In Hand"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane23.setViewportView(jTable19);

        jLabel157.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel157.setText("PRODUCT:");

        jComboBox36.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel11Layout.createSequentialGroup()
                            .addGap(344, 344, 344)
                            .addComponent(jLabel38))
                        .addGroup(jPanel11Layout.createSequentialGroup()
                            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel35, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel11Layout.createSequentialGroup()
                                        .addGap(53, 53, 53)
                                        .addComponent(jLabel34)))
                                .addComponent(jLabel36, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel163, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel157, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jComboBox36, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextField37, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox8, javax.swing.GroupLayout.Alignment.LEADING, 0, 165, Short.MAX_VALUE))
                                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane23, javax.swing.GroupLayout.PREFERRED_SIZE, 807, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jButton25)
                        .addGap(37, 37, 37)
                        .addComponent(jButton11))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel37)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField38, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(432, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel38)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField37, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel163))
                .addGap(8, 8, 8)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel157)
                    .addComponent(jComboBox36, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField38, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton11)
                        .addComponent(jButton25)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane23, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        MainPanel.add(jPanel6, "card7");

        jPanel7.setBackground(new java.awt.Color(0, 153, 204));
        jPanel7.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel7.setPreferredSize(new java.awt.Dimension(1010, 840));
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel7Carded.setBackground(new java.awt.Color(0, 153, 204));
        jPanel7Carded.setDoubleBuffered(false);
        jPanel7Carded.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel42.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel42.setText("ADD RAW MATERIAL");
        jPanel7Carded.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 30, 190, 20));

        jPanel2.setBackground(new java.awt.Color(0, 153, 204));

        jLabel45.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel45.setText("PRODUCT");

        jComboBox12.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CLICK ONCE!" }));
        jComboBox12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox12ActionPerformed(evt);
            }
        });

        jLabel40.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel40.setText("RAW MATERIAL");

        jLabel39.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel39.setText("FACTORY");

        jComboBox9.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "T/Lite cream", "T/Lite dry mix" }));
        jComboBox9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox9ActionPerformed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel24.setText("PRICE");

        jLabel41.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel41.setText("UNIT");

        jComboBox10.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dozen", "Gms.", "Hours", "Kgs", "Metre", "Pcs", "Tonne", "Units" }));

        jLabel43.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel43.setText("OPENING BALANCE");

        jTextField22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField22ActionPerformed(evt);
            }
        });

        jLabel141.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel141.setText("Rm_name");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(jComboBox9, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(jComboBox12, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(160, 160, 160)
                                .addComponent(jLabel24))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField22)
                            .addComponent(jComboBox10, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField36))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(jLabel40))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(jLabel141)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField21, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                    .addComponent(jTextField93))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jComboBox9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jComboBox12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField21, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel141))
                    .addComponent(jTextField93, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel24))
                    .addComponent(jTextField36, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel43))
                    .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel7Carded.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 420, 310));

        jButton7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton7.setText("SAVE");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel7Carded.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 370, 115, -1));

        jButton27.setText("jButton27");
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton27ActionPerformed(evt);
            }
        });
        jPanel7Carded.add(jButton27, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 400, 30, -1));

        jButton8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton8.setText("DISCARD");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel7Carded.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 370, 124, -1));

        jTable20.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane24.setViewportView(jTable20);

        jPanel7Carded.add(jScrollPane24, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 70, 670, -1));

        jPanel7.add(jPanel7Carded, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 540));

        MainPanel.add(jPanel7, "card2");

        jPanel8.setBackground(new java.awt.Color(75, 119, 190));
        jPanel8.setAutoscrolls(true);
        jPanel8.setPreferredSize(new java.awt.Dimension(1010, 840));

        jDate2.setDateFormatString("yyyy,MM,dd");
        jDate2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jDate2KeyPressed(evt);
            }
        });

        jLabel49.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel49.setText("Choose by:");

        jTextField9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField9ActionPerformed(evt);
            }
        });
        jTextField9.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField9KeyPressed(evt);
            }
        });

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Production ID", "Product Name", "Product Quantity", "waste"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable5MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTable5);

        jLabel51.setText("Product");

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Raw Material", "Qty"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(jTable6);

        jTable7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ingredient", "Qty"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(jTable7);

        jTable8.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Voucher No", "ProdID", "Date", "factory", "Firewood", "Briquettes", "Manpower", "Electricity", "Can Name", "No Of Cans", "Label Name", "No Of Labels"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable8MouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(jTable8);

        jLabel52.setText("Raw Materials");

        jLabel53.setText("Ingredients");

        jButton9.setText("Show");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane10.setViewportView(jTextArea2);

        jLabel54.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel54.setText("REMARKS");

        jTextField40.setEditable(false);

        jTextField41.setEditable(false);
        jTextField41.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField41ActionPerformed(evt);
            }
        });

        jTextField42.setEditable(false);

        jButton19.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton19.setText("PRINT");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        buttonGroup3.add(jRadioButton8);
        jRadioButton8.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jRadioButton8.setText("Voucher No");
        jRadioButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton8ActionPerformed(evt);
            }
        });

        buttonGroup3.add(jRadioButton9);
        jRadioButton9.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jRadioButton9.setText("Date");

        buttonGroup3.add(jRadioButton13);
        jRadioButton13.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jRadioButton13.setText("Date Between");
        jRadioButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton13ActionPerformed(evt);
            }
        });

        jDateChooser2.setDateFormatString("yyyy-MM-dd");

        jDateChooser3.setDateFormatString("yyyy-MM-dd");

        jLabel117.setText("AND");

        jButton39.setText("Waste Report");
        jButton39.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton39ActionPerformed(evt);
            }
        });

        jButton40.setText("Packing Report");
        jButton40.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton40ActionPerformed(evt);
            }
        });

        buttonGroup3.add(jRadioButton20);
        jRadioButton20.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jRadioButton20.setText("Production ID");

        jTextField138.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField138KeyPressed(evt);
            }
        });

        jComboBox48.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "OTHER" }));
        jComboBox48.setEnabled(false);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(4, 4, 4)
                                        .addComponent(jRadioButton9)
                                        .addGap(59, 59, 59)
                                        .addComponent(jDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addComponent(jRadioButton8)
                                        .addGap(28, 28, 28)
                                        .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBox48, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField138)
                                    .addComponent(jRadioButton20, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE))
                                .addGap(57, 57, 57)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton39, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton40, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGap(101, 101, 101)
                                .addComponent(jRadioButton13)
                                .addGap(18, 18, 18)
                                .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)
                                .addComponent(jLabel117, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateChooser3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jButton9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap(468, Short.MAX_VALUE)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jButton19, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane9)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(jLabel51, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel8Layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(jTextField40, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                        .addGap(38, 38, 38)))
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                            .addComponent(jLabel52, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(42, 42, 42)))
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addGap(16, 16, 16)
                                        .addComponent(jLabel54)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jTextField41, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                                .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(29, 29, 29))
                                            .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField42, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButton9)
                                    .addComponent(jDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jComboBox48, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButton8)
                            .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jButton40)
                        .addGap(10, 10, 10)
                        .addComponent(jButton39))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jRadioButton20)
                        .addGap(8, 8, 8)
                        .addComponent(jTextField138, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButton13)
                    .addComponent(jDateChooser3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel117))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel52)
                    .addComponent(jLabel51)
                    .addComponent(jLabel53))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField41, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField42, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel54)))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField40, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton19, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MainPanel.add(jPanel8, "card9");

        jPanelAverageCost.setBackground(new java.awt.Color(0, 153, 255));

        jTableavg.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product", "Factory", "Rawcost", "CanCost", "fuelCost", "Elecost", "DieselCost", "ManCost", "WasteCost", "Average Cost", "Date", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableavg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableavgMouseClicked(evt);
            }
        });
        jTableavg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableavgKeyPressed(evt);
            }
        });
        jScrollPaneavg.setViewportView(jTableavg);

        jLabelavg.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabelavg.setText("AVERAGE COST");

        jComboBoxavg.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Factories" }));
        jComboBoxavg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBoxavgMouseClicked(evt);
            }
        });
        jComboBoxavg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxavgActionPerformed(evt);
            }
        });

        jLabeavg.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabeavg.setText("FACTORY");

        jButton108.setText("show movement");
        jButton108.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton108ActionPerformed(evt);
            }
        });

        jButton110.setText("Refresh");
        jButton110.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton110ActionPerformed(evt);
            }
        });

        jTextField20.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField20KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField20KeyReleased(evt);
            }
        });

        jButton111.setText("Back");
        jButton111.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton111ActionPerformed(evt);
            }
        });

        jRadioButton3.setText("Date Between");

        Choose1.setDateFormatString("yyyy,MM,dd");

        Choose2.setDateFormatString("yyyy,MM,dd");

        jLabel105.setText("And");

        jLabel156.setText("production");

        jButton53.setText("jButton53");

        jButton54.setText("Print Report");

        javax.swing.GroupLayout jPanelAverageCostLayout = new javax.swing.GroupLayout(jPanelAverageCost);
        jPanelAverageCost.setLayout(jPanelAverageCostLayout);
        jPanelAverageCostLayout.setHorizontalGroup(
            jPanelAverageCostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAverageCostLayout.createSequentialGroup()
                .addGroup(jPanelAverageCostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAverageCostLayout.createSequentialGroup()
                        .addGap(234, 234, 234)
                        .addComponent(jButton111)
                        .addGap(31, 31, 31)
                        .addComponent(jButton110)
                        .addGap(202, 202, 202)
                        .addComponent(jLabelavg))
                    .addGroup(jPanelAverageCostLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel156)
                        .addGap(46, 46, 46)
                        .addComponent(jButton108, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelAverageCostLayout.createSequentialGroup()
                        .addGap(203, 203, 203)
                        .addComponent(jTextField20, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(135, 135, 135)
                        .addComponent(jButton53))
                    .addGroup(jPanelAverageCostLayout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addGroup(jPanelAverageCostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanelAverageCostLayout.createSequentialGroup()
                                .addComponent(jLabeavg)
                                .addGap(33, 33, 33)
                                .addComponent(jComboBoxavg, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelAverageCostLayout.createSequentialGroup()
                                .addComponent(jRadioButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(Choose1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel105)))
                        .addGap(16, 16, 16)
                        .addComponent(Choose2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelAverageCostLayout.createSequentialGroup()
                        .addGap(510, 510, 510)
                        .addComponent(jButton54))
                    .addGroup(jPanelAverageCostLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPaneavg, javax.swing.GroupLayout.PREFERRED_SIZE, 1190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelAverageCostLayout.setVerticalGroup(
            jPanelAverageCostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAverageCostLayout.createSequentialGroup()
                .addGroup(jPanelAverageCostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAverageCostLayout.createSequentialGroup()
                        .addGroup(jPanelAverageCostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelAverageCostLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanelAverageCostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton111)
                                    .addComponent(jButton110)))
                            .addComponent(jLabelavg, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelAverageCostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabeavg)
                            .addComponent(jComboBoxavg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelAverageCostLayout.createSequentialGroup()
                        .addComponent(jButton53)
                        .addGap(17, 17, 17)))
                .addGroup(jPanelAverageCostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(Choose2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Choose1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel105, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRadioButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelAverageCostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton108)
                    .addComponent(jLabel156))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneavg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton54)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MainPanel.add(jPanelAverageCost, "card36");

        StocksPanel.setLayout(new java.awt.BorderLayout());

        jButton84.setText("Raw Material Stocks");
        jButton84.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton84ActionPerformed(evt);
            }
        });

        jButton85.setText("Movement");
        jButton85.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton85ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel35Layout = new javax.swing.GroupLayout(jPanel35);
        jPanel35.setLayout(jPanel35Layout);
        jPanel35Layout.setHorizontalGroup(
            jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel35Layout.createSequentialGroup()
                .addGroup(jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton84, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton85, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel35Layout.setVerticalGroup(
            jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel35Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jButton84)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton85)
                .addContainerGap(713, Short.MAX_VALUE))
        );

        StocksPanel.add(jPanel35, java.awt.BorderLayout.LINE_START);

        jPanel42.setLayout(new java.awt.CardLayout());

        jPanel43.setBackground(new java.awt.Color(153, 204, 255));

        jLabel218.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel218.setText("RAW MATERIAL STOCKS");

        jTable37.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "RAW MATERIAL", "FACTORY", "STOCK IN HAND", "UNIT"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane43.setViewportView(jTable37);

        javax.swing.GroupLayout jPanel43Layout = new javax.swing.GroupLayout(jPanel43);
        jPanel43.setLayout(jPanel43Layout);
        jPanel43Layout.setHorizontalGroup(
            jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel43Layout.createSequentialGroup()
                .addGap(250, 250, 250)
                .addComponent(jLabel218, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(716, Short.MAX_VALUE))
            .addComponent(jScrollPane43, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel43Layout.setVerticalGroup(
            jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel43Layout.createSequentialGroup()
                .addComponent(jLabel218)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane43, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel218.getAccessibleContext().setAccessibleDescription("");

        jPanel42.add(jPanel43, "card2");

        StocksPanel.add(jPanel42, java.awt.BorderLayout.CENTER);

        MainPanel.add(StocksPanel, "card22");

        IngFormer.setPreferredSize(new java.awt.Dimension(1010, 840));
        IngFormer.setLayout(new java.awt.BorderLayout());
        MainPanel.add(IngFormer, "card34");

        jPanelPacking.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanelPacking.setPreferredSize(new java.awt.Dimension(1010, 840));
        jPanelPacking.setLayout(new java.awt.BorderLayout());

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel8.setText("                                                                                                                                  PACKING REPORT");
        jPanelPacking.add(jLabel8, java.awt.BorderLayout.PAGE_START);

        jPanel25.setBackground(new java.awt.Color(188, 170, 164));

        jButton65.setText("Add Packing");
        jButton65.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton65ActionPerformed(evt);
            }
        });

        jButton66.setText("Packing Report");
        jButton66.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton66ActionPerformed(evt);
            }
        });

        jButton99.setText("Status");
        jButton99.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton99ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel25Layout = new javax.swing.GroupLayout(jPanel25);
        jPanel25.setLayout(jPanel25Layout);
        jPanel25Layout.setHorizontalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton65, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton66, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton99, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel25Layout.setVerticalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton65)
                .addGap(18, 18, 18)
                .addComponent(jButton66)
                .addGap(18, 18, 18)
                .addComponent(jButton99)
                .addContainerGap(659, Short.MAX_VALUE))
        );

        jPanelPacking.add(jPanel25, java.awt.BorderLayout.LINE_START);

        jPanel62.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout jPanelpackDetailsLayout = new javax.swing.GroupLayout(jPanelpackDetails);
        jPanelpackDetails.setLayout(jPanelpackDetailsLayout);
        jPanelpackDetailsLayout.setHorizontalGroup(
            jPanelpackDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1154, Short.MAX_VALUE)
        );
        jPanelpackDetailsLayout.setVerticalGroup(
            jPanelpackDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 775, Short.MAX_VALUE)
        );

        jPanel62.add(jPanelpackDetails, "card3");

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        jLabel15.setText("DATE");

        jLabel16.setText("Pack ID");

        jDatePacking.setDateFormatString("yyyy,MM,dd");

        jTextpackid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextpackidActionPerformed(evt);
            }
        });

        jLabel72.setText("Packed Product");

        jLabel73.setText("Packed Qty");

        jButton_savepack.setText("Save");
        jButton_savepack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_savepackActionPerformed(evt);
            }
        });

        jButton101.setText("Revert");

        jTable44.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pack ID", "Packed Product", "Packed Qty"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable44.setSelectionBackground(new java.awt.Color(51, 102, 0));
        jTable44.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable44MouseClicked(evt);
            }
        });
        jScrollPane52.setViewportView(jTable44);

        jTabbedPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane2MouseClicked(evt);
            }
        });

        jLabel132.setText("Production ID");

        jLabel137.setText("Product Name");

        jLabel138.setText("Qty");

        jTable_consumedproduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pack ID", "Product Name", "ProductionID", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_consumedproduct.setSelectionBackground(new java.awt.Color(51, 102, 0));
        jScrollPane53.setViewportView(jTable_consumedproduct);

        jButton102.setText("Save");
        jButton102.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton102ActionPerformed(evt);
            }
        });

        jButton103.setText("Discard");

        jTable_ppack.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pack Id", "Package Name", "Package Qty", "Label Name", "Label Qty"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_ppack.setSelectionBackground(new java.awt.Color(51, 102, 0));
        jScrollPane54.setViewportView(jTable_ppack);

        jLabel139.setText("Package");

        jLabel148.setText("Package Qty");

        jLabel198.setText("Label ");

        jLabel199.setText("Label Qty");

        jCombo_package.setBackground(new java.awt.Color(153, 255, 204));
        jCombo_package.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jCombo_label.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton104.setText("Save");
        jButton104.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton104ActionPerformed(evt);
            }
        });

        jButton105.setText("Discard");

        jButton51.setText("Load");
        jButton51.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton51ActionPerformed(evt);
            }
        });

        jButton61.setText("Generate Report ");
        jButton61.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton61ActionPerformed(evt);
            }
        });

        jButton97.setText("Save");
        jButton97.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton97ActionPerformed(evt);
            }
        });

        jButton106.setText("Revert");

        javax.swing.GroupLayout jPanelConsumptionLayout = new javax.swing.GroupLayout(jPanelConsumption);
        jPanelConsumption.setLayout(jPanelConsumptionLayout);
        jPanelConsumptionLayout.setHorizontalGroup(
            jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConsumptionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelConsumptionLayout.createSequentialGroup()
                        .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane53, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelConsumptionLayout.createSequentialGroup()
                                .addComponent(jButton102)
                                .addGap(44, 44, 44)
                                .addComponent(jButton103)))
                        .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelConsumptionLayout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addComponent(jButton104)
                                .addGap(45, 45, 45)
                                .addComponent(jButton105)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanelConsumptionLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelConsumptionLayout.createSequentialGroup()
                                        .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel139)
                                            .addComponent(jLabel148))
                                        .addGap(8, 8, 8)
                                        .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jCombo_package, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jText_packageqty, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel199)
                                            .addComponent(jLabel198))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jText_lblqty, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jCombo_label, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jScrollPane54, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanelConsumptionLayout.createSequentialGroup()
                        .addComponent(jButton61)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton97)
                        .addGap(63, 63, 63)
                        .addComponent(jButton106)
                        .addGap(290, 290, 290))
                    .addGroup(jPanelConsumptionLayout.createSequentialGroup()
                        .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelConsumptionLayout.createSequentialGroup()
                                .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel137, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel138)
                                    .addComponent(jLabel132))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextppname)
                                    .addComponent(jTextppqty, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                                    .addComponent(jTextpid)))
                            .addGroup(jPanelConsumptionLayout.createSequentialGroup()
                                .addGap(287, 287, 287)
                                .addComponent(jButton51)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanelConsumptionLayout.setVerticalGroup(
            jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConsumptionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelConsumptionLayout.createSequentialGroup()
                        .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextpid)
                            .addComponent(jLabel132))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel137)
                            .addComponent(jTextppname, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton51, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelConsumptionLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel139)
                            .addComponent(jLabel198)
                            .addComponent(jCombo_package, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCombo_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel199)
                            .addComponent(jLabel148, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jText_lblqty, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jText_packageqty, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelConsumptionLayout.createSequentialGroup()
                        .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanelConsumptionLayout.createSequentialGroup()
                                .addComponent(jLabel138)
                                .addGap(10, 10, 10))
                            .addGroup(jPanelConsumptionLayout.createSequentialGroup()
                                .addComponent(jTextppqty, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton102)
                            .addComponent(jButton103))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelConsumptionLayout.createSequentialGroup()
                        .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton104)
                            .addComponent(jButton105))
                        .addGap(17, 17, 17)))
                .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane54, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                    .addComponent(jScrollPane53, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addGroup(jPanelConsumptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton61)
                    .addComponent(jButton97)
                    .addComponent(jButton106))
                .addGap(136, 136, 136))
        );

        jTabbedPane2.addTab("Consumption", jPanelConsumption);

        javax.swing.GroupLayout jPanelLoaderLayout = new javax.swing.GroupLayout(jPanelLoader);
        jPanelLoader.setLayout(jPanelLoaderLayout);
        jPanelLoaderLayout.setHorizontalGroup(
            jPanelLoaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1134, Short.MAX_VALUE)
        );
        jPanelLoaderLayout.setVerticalGroup(
            jPanelLoaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 320, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Loader", jPanelLoader);

        jCombopprod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel56.setText("Manpower Hrs");

        javax.swing.GroupLayout jPanelTabpackingLayout = new javax.swing.GroupLayout(jPanelTabpacking);
        jPanelTabpacking.setLayout(jPanelTabpackingLayout);
        jPanelTabpackingLayout.setHorizontalGroup(
            jPanelTabpackingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTabpackingLayout.createSequentialGroup()
                .addGroup(jPanelTabpackingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelTabpackingLayout.createSequentialGroup()
                        .addGroup(jPanelTabpackingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanelTabpackingLayout.createSequentialGroup()
                                .addGroup(jPanelTabpackingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelTabpackingLayout.createSequentialGroup()
                                        .addGap(35, 35, 35)
                                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanelTabpackingLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jDatePacking, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanelTabpackingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelTabpackingLayout.createSequentialGroup()
                                        .addGap(70, 70, 70)
                                        .addComponent(jLabel16))
                                    .addGroup(jPanelTabpackingLayout.createSequentialGroup()
                                        .addGap(43, 43, 43)
                                        .addComponent(jTextpackid, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanelTabpackingLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanelTabpackingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelTabpackingLayout.createSequentialGroup()
                                        .addComponent(jLabel72, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(9, 9, 9)
                                        .addGroup(jPanelTabpackingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanelTabpackingLayout.createSequentialGroup()
                                                .addGap(12, 12, 12)
                                                .addComponent(jButton_savepack)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButton101))
                                            .addComponent(jCombopprod, 0, 209, Short.MAX_VALUE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelTabpackingLayout.createSequentialGroup()
                                        .addGroup(jPanelTabpackingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel73, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel56))
                                        .addGap(1, 1, 1)
                                        .addGroup(jPanelTabpackingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextpaqty)
                                            .addComponent(jText_manpower))))))
                        .addGap(49, 49, 49)
                        .addComponent(jScrollPane52, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanelTabpackingLayout.setVerticalGroup(
            jPanelTabpackingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTabpackingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTabpackingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanelTabpackingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelTabpackingLayout.createSequentialGroup()
                        .addGroup(jPanelTabpackingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDatePacking, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                            .addComponent(jTextpackid))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelTabpackingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel72, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCombopprod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelTabpackingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel73, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextpaqty, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelTabpackingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jText_manpower, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel56))
                        .addGap(19, 19, 19))
                    .addGroup(jPanelTabpackingLayout.createSequentialGroup()
                        .addComponent(jScrollPane52, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)))
                .addGroup(jPanelTabpackingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_savepack, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton101))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("Add Packing", jPanelTabpacking);

        jPanelTabpackrpt.setLayout(new java.awt.CardLayout());
        jTabbedPane1.addTab("Packing List", jPanelTabpackrpt);

        javax.swing.GroupLayout jPanel26Layout = new javax.swing.GroupLayout(jPanel26);
        jPanel26.setLayout(jPanel26Layout);
        jPanel26Layout.setHorizontalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel26Layout.setVerticalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        jPanel62.add(jPanel26, "card2");

        jPanelPacking.add(jPanel62, java.awt.BorderLayout.CENTER);

        MainPanel.add(jPanelPacking, "card19");

        jTable12.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Raw Material", "Stock b/f", "In", "Out", "Stock c/f"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane20.setViewportView(jTable12);

        jLabel9.setText("Raw Material Movement");

        javax.swing.GroupLayout jPanelRawMaterialMovementLayout = new javax.swing.GroupLayout(jPanelRawMaterialMovement);
        jPanelRawMaterialMovement.setLayout(jPanelRawMaterialMovementLayout);
        jPanelRawMaterialMovementLayout.setHorizontalGroup(
            jPanelRawMaterialMovementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRawMaterialMovementLayout.createSequentialGroup()
                .addGap(400, 400, 400)
                .addComponent(jLabel9)
                .addContainerGap(744, Short.MAX_VALUE))
            .addGroup(jPanelRawMaterialMovementLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane20)
                .addContainerGap())
        );
        jPanelRawMaterialMovementLayout.setVerticalGroup(
            jPanelRawMaterialMovementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRawMaterialMovementLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MainPanel.add(jPanelRawMaterialMovement, "card37");

        jPanelING.setLayout(new java.awt.BorderLayout());

        jButton88.setText("INGREDIENT STOCK");
        jButton88.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton88ActionPerformed(evt);
            }
        });

        jButton89.setText("INGREDIENT MOVEMENT");
        jButton89.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton89ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel45Layout = new javax.swing.GroupLayout(jPanel45);
        jPanel45.setLayout(jPanel45Layout);
        jPanel45Layout.setHorizontalGroup(
            jPanel45Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton88, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton89, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel45Layout.setVerticalGroup(
            jPanel45Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel45Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jButton88)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton89)
                .addContainerGap(706, Short.MAX_VALUE))
        );

        jPanelING.add(jPanel45, java.awt.BorderLayout.LINE_START);

        jPanel47.setBackground(new java.awt.Color(153, 204, 255));

        jTable39.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "INGREDIENT", "FACTORY", "STOCK IN HAND", "UNIT"
            }
        ));
        jScrollPane45.setViewportView(jTable39);

        jLabel229.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel229.setText("INGREDIENT STOCK");

        javax.swing.GroupLayout jPanel47Layout = new javax.swing.GroupLayout(jPanel47);
        jPanel47.setLayout(jPanel47Layout);
        jPanel47Layout.setHorizontalGroup(
            jPanel47Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel47Layout.createSequentialGroup()
                .addGap(305, 305, 305)
                .addComponent(jLabel229)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel47Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane45, javax.swing.GroupLayout.DEFAULT_SIZE, 1088, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel47Layout.setVerticalGroup(
            jPanel47Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel47Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel229)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane45, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelING.add(jPanel47, java.awt.BorderLayout.CENTER);

        MainPanel.add(jPanelING, "card29");

        jPanelPStock.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanelPStock.setLayout(new java.awt.BorderLayout());

        jLabel195.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel195.setText("                                                                                                                                                              PRODUCT PANEL");
        jPanelPStock.add(jLabel195, java.awt.BorderLayout.PAGE_START);

        jPanel34.setBackground(new java.awt.Color(153, 204, 255));

        jButton75.setText("PRODUCT STOCK");
        jButton75.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton75ActionPerformed(evt);
            }
        });

        jButton76.setText("MOVEMENT");
        jButton76.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton76ActionPerformed(evt);
            }
        });

        jTable34.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(1, 1, 1)));
        jTable34.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DATE", "STOCK B/F", "RECIEVED", "FROM", "STOCK OUT", "TO", "STOCK C/F"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane39.setViewportView(jTable34);

        javax.swing.GroupLayout jPanel34Layout = new javax.swing.GroupLayout(jPanel34);
        jPanel34.setLayout(jPanel34Layout);
        jPanel34Layout.setHorizontalGroup(
            jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel34Layout.createSequentialGroup()
                .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton75, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton76, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane39, javax.swing.GroupLayout.PREFERRED_SIZE, 934, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel34Layout.setVerticalGroup(
            jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel34Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane39, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel34Layout.createSequentialGroup()
                        .addComponent(jButton75)
                        .addGap(18, 18, 18)
                        .addComponent(jButton76)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelPStock.add(jPanel34, java.awt.BorderLayout.LINE_START);

        MainPanel.add(jPanelPStock, "card3");

        jTable40.setAutoCreateRowSorter(true);
        jTable40.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pack Id", "Date", "Packed Product", "Packed Qty", "Manpower Hrs"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable40.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable40MouseClicked(evt);
            }
        });
        jScrollPane46.setViewportView(jTable40);

        jButton49.setText("Generate Report");
        jButton49.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton49ActionPerformed(evt);
            }
        });

        jButton50.setText("View Full Details");
        jButton50.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton50ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel40Layout = new javax.swing.GroupLayout(jPanel40);
        jPanel40.setLayout(jPanel40Layout);
        jPanel40Layout.setHorizontalGroup(
            jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel40Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane46, javax.swing.GroupLayout.DEFAULT_SIZE, 1239, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel40Layout.createSequentialGroup()
                .addGap(406, 406, 406)
                .addComponent(jButton49)
                .addGap(44, 44, 44)
                .addComponent(jButton50)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel40Layout.setVerticalGroup(
            jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel40Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane46, javax.swing.GroupLayout.DEFAULT_SIZE, 704, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton49)
                    .addComponent(jButton50))
                .addGap(42, 42, 42))
        );

        MainPanel.add(jPanel40, "card26");

        jPanel36.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));

        stocksproduct.setBackground(new java.awt.Color(153, 204, 255));
        stocksproduct.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));

        jLabel196.setText("PRODUCT STOCKS");

        jTable33.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PRODUCT NAME", "STOCK IN HAND", "UNIT", "GROUP", "UNIT QTY"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane38.setViewportView(jTable33);

        jButton83.setText("Movement");

        javax.swing.GroupLayout stocksproductLayout = new javax.swing.GroupLayout(stocksproduct);
        stocksproduct.setLayout(stocksproductLayout);
        stocksproductLayout.setHorizontalGroup(
            stocksproductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stocksproductLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(stocksproductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane38)
                    .addGroup(stocksproductLayout.createSequentialGroup()
                        .addComponent(jButton83)
                        .addGap(246, 246, 246)
                        .addComponent(jLabel196)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        stocksproductLayout.setVerticalGroup(
            stocksproductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stocksproductLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(stocksproductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel196)
                    .addComponent(jButton83))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane38, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel197.setText("PRODUCT MOVEMENT");

        javax.swing.GroupLayout productmovementLayout = new javax.swing.GroupLayout(productmovement);
        productmovement.setLayout(productmovementLayout);
        productmovementLayout.setHorizontalGroup(
            productmovementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productmovementLayout.createSequentialGroup()
                .addGap(349, 349, 349)
                .addComponent(jLabel197)
                .addContainerGap(804, Short.MAX_VALUE))
        );
        productmovementLayout.setVerticalGroup(
            productmovementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productmovementLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel197)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel36Layout = new javax.swing.GroupLayout(jPanel36);
        jPanel36.setLayout(jPanel36Layout);
        jPanel36Layout.setHorizontalGroup(
            jPanel36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(productmovement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel36Layout.createSequentialGroup()
                .addComponent(stocksproduct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel36Layout.setVerticalGroup(
            jPanel36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(productmovement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel36Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(stocksproduct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MainPanel.add(jPanel36, "card27");

        jButton62.setText("CANCEL");
        jButton62.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton62ActionPerformed(evt);
            }
        });

        jButton63.setText("SAVE");
        jButton63.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton63ActionPerformed(evt);
            }
        });

        jComboBox17.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox17MouseClicked(evt);
            }
        });
        jComboBox17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox17ActionPerformed(evt);
            }
        });

        jLabel13.setText("From");

        jComboBox16.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Production", "Packing", "Reception", "Ingredient" }));
        jComboBox16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox16MouseClicked(evt);
            }
        });
        jComboBox16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox16ActionPerformed(evt);
            }
        });

        jButton98.setText("Add");
        jButton98.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton98ActionPerformed(evt);
            }
        });

        jLabel14.setText("Item Name");

        jTable18.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Product Name", "Qty Consumed", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable18MouseClicked(evt);
            }
        });
        jScrollPane22.setViewportView(jTable18);

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel12.setText("Loader");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, 911, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addGap(268, 268, 268)
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel12Layout.createSequentialGroup()
                                        .addGap(107, 107, 107)
                                        .addComponent(jButton98))
                                    .addGroup(jPanel12Layout.createSequentialGroup()
                                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel13)
                                            .addComponent(jComboBox16, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel12Layout.createSequentialGroup()
                                                .addGap(71, 71, 71)
                                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel12Layout.createSequentialGroup()
                                                .addGap(30, 30, 30)
                                                .addComponent(jComboBox17, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(406, 406, 406)
                        .addComponent(jLabel12)))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jComboBox16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox17, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton98)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanelPckLayout = new javax.swing.GroupLayout(jPanelPck);
        jPanelPck.setLayout(jPanelPckLayout);
        jPanelPckLayout.setHorizontalGroup(
            jPanelPckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPckLayout.createSequentialGroup()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanelPckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelPckLayout.createSequentialGroup()
                    .addGap(90, 90, 90)
                    .addComponent(jButton62, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jButton63, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(945, Short.MAX_VALUE)))
        );
        jPanelPckLayout.setVerticalGroup(
            jPanelPckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPckLayout.createSequentialGroup()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 525, Short.MAX_VALUE))
            .addGroup(jPanelPckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelPckLayout.createSequentialGroup()
                    .addContainerGap(757, Short.MAX_VALUE)
                    .addGroup(jPanelPckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton62)
                        .addComponent(jButton63))
                    .addContainerGap()))
        );

        MainPanel.add(jPanelPck, "card32");

        jLabel120.setText("Choose Factory here!!");

        jCombofof.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "Briquettes" }));

        jButton43.setText("Okay");
        jButton43.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton43ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelFactoryLayout = new javax.swing.GroupLayout(jPanelFactory);
        jPanelFactory.setLayout(jPanelFactoryLayout);
        jPanelFactoryLayout.setHorizontalGroup(
            jPanelFactoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFactoryLayout.createSequentialGroup()
                .addGroup(jPanelFactoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelFactoryLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelFactoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jCombofof, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel120, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)))
                    .addGroup(jPanelFactoryLayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jButton43)))
                .addContainerGap(1068, Short.MAX_VALUE))
        );
        jPanelFactoryLayout.setVerticalGroup(
            jPanelFactoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFactoryLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel120)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCombofof, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton43)
                .addContainerGap(686, Short.MAX_VALUE))
        );

        MainPanel.add(jPanelFactory, "card35");

        jComboBox18.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Product", "Raw Material", "Package" }));
        jComboBox18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox18MouseClicked(evt);
            }
        });
        jComboBox18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox18ActionPerformed(evt);
            }
        });

        jComboBox19.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Items" }));

        jDate1st.setDateFormatString("yyyy-MM-dd");

        jDate2nd.setDateFormatString("yyyy-MM-dd");

        jLabel126.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel126.setText("USAGE ANALYSIS");

        jLabel127.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel127.setText("CATEGORY:");

        jLabel128.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel128.setText("NAME:");

        jLabel129.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel129.setText("DATE BETWEEN:");

        tabledisp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DATE", "NAME", "CONS NO ", "QTY", "ACTION"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tabledisp);

        jLabel130.setText("and");

        jButtondisplay.setText("DISPLAY");
        jButtondisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtondisplayActionPerformed(evt);
            }
        });

        jButton109.setText("More Details");
        jButton109.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton109ActionPerformed(evt);
            }
        });

        jButton100.setText("PRINT");
        jButton100.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton100ActionPerformed(evt);
            }
        });

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ACTION", "QTY USED"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable4MouseClicked(evt);
            }
        });
        jScrollPane14.setViewportView(jTable4);

        jLabel155.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel155.setText("BATCH/CONS_No");

        buttonGroup6.add(jRadioButton4);

        buttonGroup6.add(jRadioButton5);

        javax.swing.GroupLayout UsageAnalysisLayout = new javax.swing.GroupLayout(UsageAnalysis);
        UsageAnalysis.setLayout(UsageAnalysisLayout);
        UsageAnalysisLayout.setHorizontalGroup(
            UsageAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UsageAnalysisLayout.createSequentialGroup()
                .addGroup(UsageAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UsageAnalysisLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(UsageAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jRadioButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(UsageAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UsageAnalysisLayout.createSequentialGroup()
                                .addGroup(UsageAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel129, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel155, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(UsageAnalysisLayout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(UsageAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel127)
                                    .addComponent(jLabel128))
                                .addGap(18, 18, 18)))
                        .addGroup(UsageAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(UsageAnalysisLayout.createSequentialGroup()
                                .addComponent(jDate1st, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel130)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDate2nd, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(UsageAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jComboBox19, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextField5)
                                .addComponent(jComboBox18, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(UsageAnalysisLayout.createSequentialGroup()
                        .addGap(389, 389, 389)
                        .addComponent(jButton100)
                        .addGap(30, 30, 30)
                        .addComponent(jButton109))
                    .addGroup(UsageAnalysisLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(UsageAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(UsageAnalysisLayout.createSequentialGroup()
                                .addGap(374, 374, 374)
                                .addComponent(jLabel126, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 966, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(UsageAnalysisLayout.createSequentialGroup()
                        .addGap(260, 260, 260)
                        .addComponent(jButtondisplay)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        UsageAnalysisLayout.setVerticalGroup(
            UsageAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UsageAnalysisLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel126, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(UsageAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UsageAnalysisLayout.createSequentialGroup()
                        .addGroup(UsageAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel127))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(UsageAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel128))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(UsageAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(UsageAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel155)
                                .addComponent(jRadioButton4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(UsageAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(UsageAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jDate1st, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jDate2nd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(UsageAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel129, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jRadioButton5)))
                            .addComponent(jLabel130)))
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtondisplay)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 533, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(UsageAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton109)
                    .addComponent(jButton100)))
        );

        MainPanel.add(UsageAnalysis, "card34");

        jPanelWarehouse.setBackground(new java.awt.Color(153, 204, 255));
        jPanelWarehouse.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanelWarehouse.setPreferredSize(new java.awt.Dimension(1010, 840));
        jPanelWarehouse.setLayout(new java.awt.BorderLayout());

        jLabel146.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel146.setText("                                                                                                WAREHOUSE ACTIVITIES");
        jPanelWarehouse.add(jLabel146, java.awt.BorderLayout.PAGE_START);

        jButton56.setText("Transfer Report");
        jButton56.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton56ActionPerformed(evt);
            }
        });

        jButton57.setText("Activities");
        jButton57.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton57ActionPerformed(evt);
            }
        });

        jButton74.setText("Product Transfer");
        jButton74.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton74ActionPerformed(evt);
            }
        });

        jButton96.setText("Products Status");
        jButton96.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton96ActionPerformed(evt);
            }
        });

        jButton31.setText("Warehouse Sales");
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton31ActionPerformed(evt);
            }
        });

        jButton52.setText("Warehousing Report");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton74, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton57, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton56, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                    .addComponent(jButton96, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jButton31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton52, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addComponent(jButton96)
                .addGap(20, 20, 20)
                .addComponent(jButton56, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton57, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton74)
                .addGap(18, 18, 18)
                .addComponent(jButton31)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton52)
                .addContainerGap(440, Short.MAX_VALUE))
        );

        jPanelWarehouse.add(jPanel21, java.awt.BorderLayout.LINE_START);

        jPanel54.setBackground(new java.awt.Color(153, 204, 255));

        javax.swing.GroupLayout jPanel54Layout = new javax.swing.GroupLayout(jPanel54);
        jPanel54.setLayout(jPanel54Layout);
        jPanel54Layout.setHorizontalGroup(
            jPanel54Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1259, Short.MAX_VALUE)
        );
        jPanel54Layout.setVerticalGroup(
            jPanel54Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanelWarehouse.add(jPanel54, java.awt.BorderLayout.PAGE_END);

        jPanel55.setBackground(new java.awt.Color(153, 204, 255));

        javax.swing.GroupLayout jPanel55Layout = new javax.swing.GroupLayout(jPanel55);
        jPanel55.setLayout(jPanel55Layout);
        jPanel55Layout.setHorizontalGroup(
            jPanel55Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel55Layout.setVerticalGroup(
            jPanel55Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 672, Short.MAX_VALUE)
        );

        jPanelWarehouse.add(jPanel55, java.awt.BorderLayout.LINE_END);

        jPanel56.setLayout(new java.awt.CardLayout());

        jPanel22.setBackground(new java.awt.Color(153, 204, 255));

        jTextWarehouse.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextWarehouseKeyPressed(evt);
            }
        });

        jDateWarehouse.setDateFormatString("yyyy,MM,dd");

        buttonGroup4.add(jRadioButton15);
        jRadioButton15.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jRadioButton15.setText("Date");

        buttonGroup4.add(jRadioButton16);
        jRadioButton16.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jRadioButton16.setText("Transfer ID");

        buttonGroup4.add(jRadioButton17);
        jRadioButton17.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jRadioButton17.setText("Production Id");

        jButton58.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jButton58.setText("Load");
        jButton58.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton58ActionPerformed(evt);
            }
        });

        jTable26.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Date", "Product", "Quantity", "From"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable26.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable26MouseClicked(evt);
            }
        });
        jScrollPane31.setViewportView(jTable26);

        jTable27.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PId", "Date", "Packing Material", "Quantity", "Label", "Label Qty", "Manpower(hrs)", "Carton", "Carton Qty"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane32.setViewportView(jTable27);

        jTextField111.setEditable(false);

        jTextField112.setEditable(false);

        jTextField113.setEditable(false);

        jComboBox33.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));

        jTextField114.setText("0");
        jTextField114.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField114ActionPerformed(evt);
            }
        });

        jButton59.setText("Save");
        jButton59.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton59ActionPerformed(evt);
            }
        });

        jButton60.setText("Delete");
        jButton60.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton60ActionPerformed(evt);
            }
        });

        jComboBox34.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel147.setText("Qty");

        jLabel149.setText("Qty");

        jLabel151.setText("Production ID");

        jTextField117.setEditable(false);

        jLabel152.setText("Product");

        jTextField109.setEditable(false);

        jLabel113.setText("Carton");

        jLabel114.setText("Label");

        jButton86.setText("POST");
        jButton86.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton86ActionPerformed(evt);
            }
        });

        warehousiing_date.setDateFormatString("yyyy,MM,dd");

        jLabel162.setText("DATE");

        jLabel206.setText("Monthly");

        jLabel207.setText("W/H ID");

        jLabel150.setText("Packed Qty");

        jLabel96.setText("Seasonal");

        jLabel131.setText("Permanent");

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton15)
                            .addComponent(jRadioButton16)
                            .addComponent(jRadioButton17))
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel22Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jDateWarehouse, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                    .addComponent(jTextWarehouse)))
                            .addGroup(jPanel22Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jProdWarehouse, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane31))
                    .addComponent(jScrollPane32)
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel22Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel206, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel22Layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(jLabel162, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(warehousiing_date, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField116, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel22Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jLabel96, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel22Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField91, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel131, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField97))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton58, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel22Layout.createSequentialGroup()
                                .addGap(330, 330, 330)
                                .addComponent(jTextField111, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(120, 120, 120)
                                .addComponent(jTextField112, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jTextField113, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel22Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel207))
                            .addGroup(jPanel22Layout.createSequentialGroup()
                                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextField8)
                                    .addComponent(jLabel151, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel152, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField117, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField109, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                                    .addComponent(jLabel150, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel22Layout.createSequentialGroup()
                                        .addGap(250, 250, 250)
                                        .addComponent(jButton59)
                                        .addGap(11, 11, 11)
                                        .addComponent(jButton60))
                                    .addGroup(jPanel22Layout.createSequentialGroup()
                                        .addGap(100, 100, 100)
                                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel22Layout.createSequentialGroup()
                                                .addGap(53, 53, 53)
                                                .addComponent(jLabel113)
                                                .addGap(118, 118, 118)
                                                .addComponent(jLabel114, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel22Layout.createSequentialGroup()
                                                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jComboBox33, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel147)
                                                    .addComponent(jTextField114, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(9, 9, 9)
                                                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jComboBox34, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel149)
                                                    .addComponent(jTextField115, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                            .addGroup(jPanel22Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButton86, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 246, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addComponent(jLabel207)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel206)
                    .addComponent(jLabel96)
                    .addComponent(jLabel131))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(warehousiing_date, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField116, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField91, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField97, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel162, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton86)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addComponent(jRadioButton15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButton17)
                            .addComponent(jProdWarehouse, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel22Layout.createSequentialGroup()
                            .addComponent(jDateWarehouse, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(8, 8, 8)
                            .addComponent(jTextWarehouse, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 30, Short.MAX_VALUE))
                        .addComponent(jScrollPane31, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton58)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel113)
                            .addComponent(jLabel114))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel22Layout.createSequentialGroup()
                                .addComponent(jComboBox33, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel147)
                                .addGap(5, 5, 5)
                                .addComponent(jTextField114, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel22Layout.createSequentialGroup()
                                .addComponent(jComboBox34, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(jLabel149)
                                .addGap(5, 5, 5)
                                .addComponent(jTextField115, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton59)
                            .addComponent(jButton60)))
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addComponent(jLabel151)
                        .addGap(5, 5, 5)
                        .addComponent(jTextField117, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(jLabel152)
                        .addGap(5, 5, 5)
                        .addComponent(jTextField109, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jLabel150)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane32, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField111, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField112, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField113, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(148, Short.MAX_VALUE))
        );

        jPanel56.add(jPanel22, "card2");

        jPanelWarehouse.add(jPanel56, java.awt.BorderLayout.CENTER);

        MainPanel.add(jPanelWarehouse, "card18");

        jPanel9.setBackground(new java.awt.Color(22, 160, 133));
        jPanel9.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel9.setPreferredSize(new java.awt.Dimension(1010, 840));
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel58.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel58.setText("COST ANALYSIS");
        jPanel9.add(jLabel58, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 0, 170, -1));

        jLabel59.setText("PRODUCT (S)");
        jPanel9.add(jLabel59, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 262, -1, -1));

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jRadioButton1.setText("DATE");
        jPanel9.add(jRadioButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 42, 90, -1));

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jRadioButton2.setText("VOUCHER_NO");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });
        jPanel9.add(jRadioButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 82, 110, -1));

        jDateChooser1.setDateFormatString("yyyy,MM,dd");
        jPanel9.add(jDateChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 42, 350, 30));

        jTextField25.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(219, 10, 91)));
        jTextField25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField25ActionPerformed(evt);
            }
        });
        jPanel9.add(jTextField25, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 82, 350, 30));

        jTable9.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID ", "DATE", "PRODUCT NAME", "QUANTITY", "PRICE/UNIT", "AMOUNT"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable9MouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(jTable9);

        jPanel9.add(jScrollPane11, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 282, 790, 130));

        jTextField26.setEditable(false);
        jTextField26.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jTextField26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField26ActionPerformed(evt);
            }
        });
        jPanel9.add(jTextField26, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 422, 150, 30));

        jLabel60.setText("RAW MATERIAL(S)");
        jPanel9.add(jLabel60, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 472, -1, -1));

        jTable10.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "RAW MATERIAL NAME", "PRICE", "AMOUNT"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane12.setViewportView(jTable10);

        jPanel9.add(jScrollPane12, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 492, 400, 110));

        jTextField27.setEditable(false);
        jTextField27.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jPanel9.add(jTextField27, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 602, 130, 30));

        jTable11.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "INGREDIENT NAME", "PRICE", "AMOUNT"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane13.setViewportView(jTable11);

        jPanel9.add(jScrollPane13, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 492, 380, 110));

        jTextField29.setEditable(false);
        jTextField29.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jTextField29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField29ActionPerformed(evt);
            }
        });
        jPanel9.add(jTextField29, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 602, 140, 30));

        jLabel61.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel61.setText("ADDITIONAL COSTS");
        jPanel9.add(jLabel61, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 92, 140, 20));

        jLabel69.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel69.setText("PRICE PER UNIT:");
        jPanel9.add(jLabel69, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 42, 120, 30));

        jTextField33.setEditable(false);
        jTextField33.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jTextField33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField33ActionPerformed(evt);
            }
        });
        jPanel9.add(jTextField33, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 42, 160, 30));

        jButton16.setBackground(new java.awt.Color(51, 51, 51));
        jButton16.setText("DISPLAY");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });
        jPanel9.add(jButton16, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 192, 830, 30));

        jButton18.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jButton18.setText("COMPUTE");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });
        jPanel9.add(jButton18, new org.netbeans.lib.awtextra.AbsoluteConstraints(437, 232, 243, 32));

        jLabel70.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel70.setText("PRODUCTION OVERHEAD");
        jPanel9.add(jLabel70, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 132, 130, 20));

        jLabel71.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel71.setText("SELLING AND ADMIN COSTS");
        jPanel9.add(jLabel71, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 132, 150, 20));

        jTextField34.setText("0");
        jPanel9.add(jTextField34, new org.netbeans.lib.awtextra.AbsoluteConstraints(545, 152, 150, 30));

        jTextField35.setText("0");
        jTextField35.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField35ActionPerformed(evt);
            }
        });
        jPanel9.add(jTextField35, new org.netbeans.lib.awtextra.AbsoluteConstraints(705, 152, 160, 30));

        jTextField47.setEditable(false);
        jPanel9.add(jTextField47, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 422, 160, 30));

        jLabel75.setText("Qty in Kgs");
        jPanel9.add(jLabel75, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 432, 60, -1));

        jLabel76.setText("Raw Material Cost");
        jPanel9.add(jLabel76, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 60, 1105, 20));

        jTextField48.setEditable(false);
        jTextField48.setText(" ");
        jTextField48.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField48ActionPerformed(evt);
            }
        });
        jPanel9.add(jTextField48, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 90, 212, 30));

        jTextField49.setEditable(false);
        jTextField49.setText(" ");
        jPanel9.add(jTextField49, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 150, 217, 30));

        jLabel77.setText("Ingredient Cost");
        jPanel9.add(jLabel77, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 130, 1105, -1));

        jLabel78.setText("TOTAL");
        jPanel9.add(jLabel78, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 432, -1, -1));

        jTextField50.setEditable(false);
        jTextField50.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField50ActionPerformed(evt);
            }
        });
        jPanel9.add(jTextField50, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 422, 170, 30));

        jTextField51.setEditable(false);
        jTextField51.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField51ActionPerformed(evt);
            }
        });
        jPanel9.add(jTextField51, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 422, 70, 30));

        jLabel79.setText("QTY");
        jPanel9.add(jLabel79, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 422, -1, 30));

        jLabel80.setText("Ksh");
        jPanel9.add(jLabel80, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 52, -1, -1));

        jLabel48.setText("Package Amount");
        jPanel9.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 510, 130, -1));

        jLabel50.setText("Labels Amount");
        jPanel9.add(jLabel50, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 560, 130, -1));

        jLabel81.setText("Manpower Amount");
        jPanel9.add(jLabel81, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 620, 100, 30));

        jLabel82.setText("Electricity");
        jPanel9.add(jLabel82, new org.netbeans.lib.awtextra.AbsoluteConstraints(1045, 510, 120, -1));

        jTextField52.setEditable(false);
        jPanel9.add(jTextField52, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 530, 130, 30));

        jTextField53.setEditable(false);
        jPanel9.add(jTextField53, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 580, 130, 30));

        jTextField54.setEditable(false);
        jTextField54.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField54ActionPerformed(evt);
            }
        });
        jPanel9.add(jTextField54, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 620, 130, 30));

        jTextField55.setEditable(false);
        jTextField55.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField55ActionPerformed(evt);
            }
        });
        jPanel9.add(jTextField55, new org.netbeans.lib.awtextra.AbsoluteConstraints(1035, 530, 130, 30));

        jLabel83.setText("Fuel Amount");
        jPanel9.add(jLabel83, new org.netbeans.lib.awtextra.AbsoluteConstraints(1035, 560, 130, -1));

        jTextField56.setEditable(false);
        jPanel9.add(jTextField56, new org.netbeans.lib.awtextra.AbsoluteConstraints(1035, 580, 130, 30));

        jPanel14.setBackground(new java.awt.Color(153, 255, 255));

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 555, Short.MAX_VALUE)
        );

        jPanel9.add(jPanel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(875, 20, -1, -1));

        jLabel84.setText("Package Cost");
        jPanel9.add(jLabel84, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 180, 1105, 20));

        jLabel85.setText("Label Cost");
        jPanel9.add(jLabel85, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 240, 1105, 10));

        jTextField57.setEditable(false);
        jPanel9.add(jTextField57, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 210, 213, 30));

        jTextField58.setEditable(false);
        jPanel9.add(jTextField58, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 260, 211, 30));

        jLabel86.setText("Manpower Cost");
        jPanel9.add(jLabel86, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 290, 1105, 20));

        jLabel87.setText("Electricity Cost");
        jPanel9.add(jLabel87, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 352, 1105, 12));

        jTextField59.setEditable(false);
        jPanel9.add(jTextField59, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 310, 215, 30));

        jTextField60.setEditable(false);
        jPanel9.add(jTextField60, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 370, 213, 30));

        jTextField61.setEditable(false);
        jPanel9.add(jTextField61, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 430, 214, 30));

        jLabel88.setText("Fuel Cost");
        jPanel9.add(jLabel88, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 410, 240, 10));

        jButton23.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jButton23.setText("DETAILED REPORT");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });
        jPanel9.add(jButton23, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 20, 130, 30));

        jComboBox22.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Groups" }));
        jComboBox22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox22MouseClicked(evt);
            }
        });
        jComboBox22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox22ActionPerformed(evt);
            }
        });
        jPanel9.add(jComboBox22, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 232, 160, 30));

        jButton32.setText("REPORT");
        jButton32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton32ActionPerformed(evt);
            }
        });
        jPanel9.add(jButton32, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 232, 130, 30));

        jButton2.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jButton2.setText("CLEAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel9.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1036, 20, 110, 30));

        jDate5.setDateFormatString("yyyy,MM,dd");
        jPanel9.add(jDate5, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 122, 170, 30));

        jDate6.setDateFormatString("yyyy,MM,dd");
        jPanel9.add(jDate6, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 122, 150, 30));

        jLabel57.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel57.setText("AND");
        jPanel9.add(jLabel57, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 122, 30, 30));

        buttonGroup1.add(jRadioButton10);
        jRadioButton10.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jRadioButton10.setText("DATE BETWEEN");
        jPanel9.add(jRadioButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 122, -1, -1));

        jComboBox24.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Products" }));
        jComboBox24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox24ActionPerformed(evt);
            }
        });
        jPanel9.add(jComboBox24, new org.netbeans.lib.awtextra.AbsoluteConstraints(175, 162, 350, -1));

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jTextArea3.setName(""); // NOI18N
        jScrollPane1.setViewportView(jTextArea3);

        jPanel9.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 683, 0, -1));

        jLabel103.setText("INGREDIENT(S)");
        jPanel9.add(jLabel103, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 472, 90, -1));

        jLabel116.setText("Waste Cost");
        jPanel9.add(jLabel116, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 460, -1, -1));

        jTextField88.setEditable(false);
        jPanel9.add(jTextField88, new org.netbeans.lib.awtextra.AbsoluteConstraints(895, 480, 214, 30));

        jComboBox43.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "Briquettes" }));
        jComboBox43.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox43ActionPerformed(evt);
            }
        });
        jPanel9.add(jComboBox43, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 12, 161, -1));

        jRadioButton23.setText("jRadioButton23");
        jPanel9.add(jRadioButton23, new org.netbeans.lib.awtextra.AbsoluteConstraints(133, 163, 24, -1));

        MainPanel.add(jPanel9, "card35");
        jPanel9.getAccessibleContext().setAccessibleName("COST ANALYSIS");

        jPanelRecp.setBackground(new java.awt.Color(153, 204, 255));

        jPanel44.setBackground(new java.awt.Color(153, 204, 255));
        jPanel44.setBorder(javax.swing.BorderFactory.createTitledBorder("Stocks Update"));

        jLabel231.setText("ID");

        jLabel232.setText("DATE");

        jTextId.setEditable(false);

        jComborecp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Product", "Raw Material", "Ingredient", "Package" }));
        jComborecp.setEnabled(false);
        jComborecp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComborecpActionPerformed(evt);
            }
        });

        jDaterecp.setDateFormatString("yyyy,MM,dd");

        jLabel233.setText("From");

        jLabel234.setText("Item");

        jLabel235.setText("Quantity");

        jComboFrom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Factory Transfer", "Central Store", "External Supplier" }));
        jComboFrom.setEnabled(false);

        jTextQty.setEnabled(false);

        jComboName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboName.setEnabled(false);

        jButtonDiscard.setText("DISCARD");
        jButtonDiscard.setEnabled(false);

        jButtonSave.setText("SAVE");
        jButtonSave.setEnabled(false);
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jTablerecp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CATEGORY", "ITEM", "QUANTITY", "FROM"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablerecp.setEnabled(false);
        jScrollPane47.setViewportView(jTablerecp);

        jButtonSaveall.setText("NEW");
        jButtonSaveall.setEnabled(false);

        jButton94.setText("Save");
        jButton94.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton94ActionPerformed(evt);
            }
        });

        jLabel125.setText("Remarks");

        javax.swing.GroupLayout jPanel44Layout = new javax.swing.GroupLayout(jPanel44);
        jPanel44.setLayout(jPanel44Layout);
        jPanel44Layout.setHorizontalGroup(
            jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel44Layout.createSequentialGroup()
                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel44Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel44Layout.createSequentialGroup()
                                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel234, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel235, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel44Layout.createSequentialGroup()
                                        .addComponent(jTextQty, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 111, Short.MAX_VALUE))))
                            .addGroup(jPanel44Layout.createSequentialGroup()
                                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel233)
                                    .addComponent(jLabel125))
                                .addGap(32, 32, 32)
                                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboFrom, 0, 249, Short.MAX_VALUE)
                                    .addComponent(jTextField4))))
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane47, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel44Layout.createSequentialGroup()
                        .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel44Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel44Layout.createSequentialGroup()
                                        .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel44Layout.createSequentialGroup()
                                                .addComponent(jLabel232)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                            .addGroup(jPanel44Layout.createSequentialGroup()
                                                .addComponent(jLabel231, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(21, 21, 21)))
                                        .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextId, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jDaterecp, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(217, 217, 217))
                                    .addComponent(jComborecp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel44Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jButton94)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel44Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jButtonDiscard)
                .addGap(47, 47, 47)
                .addComponent(jButtonSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSaveall)
                .addGap(231, 231, 231))
        );
        jPanel44Layout.setVerticalGroup(
            jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel44Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel231)
                    .addComponent(jTextId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel232, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDaterecp, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addGap(1, 1, 1)
                .addComponent(jComborecp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel44Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jButton94)
                        .addGap(38, 38, 38)
                        .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel44Layout.createSequentialGroup()
                                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel233)
                                    .addComponent(jComboFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel44Layout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addComponent(jLabel125))
                                    .addGroup(jPanel44Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel234)
                                    .addComponent(jComboName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextQty, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel235))
                                .addGap(10, 10, 10))
                            .addComponent(jScrollPane47, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48)
                        .addComponent(jButtonSaveall)
                        .addContainerGap(28, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel44Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonDiscard)
                            .addComponent(jButtonSave))
                        .addGap(47, 47, 47))))
        );

        javax.swing.GroupLayout jPanelRecpLayout = new javax.swing.GroupLayout(jPanelRecp);
        jPanelRecp.setLayout(jPanelRecpLayout);
        jPanelRecpLayout.setHorizontalGroup(
            jPanelRecpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRecpLayout.createSequentialGroup()
                .addComponent(jPanel44, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 441, Short.MAX_VALUE))
        );
        jPanelRecpLayout.setVerticalGroup(
            jPanelRecpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRecpLayout.createSequentialGroup()
                .addComponent(jPanel44, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        MainPanel.add(jPanelRecp, "card31");

        jPanelPasteurization.setBackground(new java.awt.Color(153, 204, 255));
        jPanelPasteurization.setBorder(javax.swing.BorderFactory.createTitledBorder("PASTEURIZATION/SORTING"));

        jDatePast.setDateFormatString("yyyy,MM,dd");

        jLabel202.setText("DATE");

        jLabel203.setText("RAW MATERIAL");

        jComboRawPast.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Raw material" }));
        jComboRawPast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboRawPastActionPerformed(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", null, null, null, null, null, null, null}
            },
            new String [] {
                "Past No", "Time In", "Qty In", "Retort No", "Duration", "Temperature", "Time Out", "Bin NO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jTable3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable3KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable3KeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);

        fieldin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldinActionPerformed(evt);
            }
        });

        jLabel204.setText("Qty After");

        waste.setText("waste");

        manpo.setText("Manpower(Hrs)");

        jLabel208.setText("Qty Before");

        jButton80.setText("Discard");
        jButton80.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton80ActionPerformed(evt);
            }
        });

        jButton81.setText("Save");
        jButton81.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton81ActionPerformed(evt);
            }
        });

        jButton78.setText("Save");
        jButton78.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton78ActionPerformed(evt);
            }
        });

        jTextField154.setEditable(false);

        past_no.setText("Past No");

        jComboBox29.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "cons_no" }));

        jLabel106.setText("Consignment/No");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "ID", "PACKAGE", "CONS NO", "NO OF BAGS"
            }
        ));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jTable2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable2KeyPressed(evt);
            }
        });
        jScrollPane6.setViewportView(jTable2);

        jLabel140.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel140.setText("DETAILS");

        decider.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        decider.setText("PASTEURIZATION");

        javax.swing.GroupLayout jPanelPasteurizationLayout = new javax.swing.GroupLayout(jPanelPasteurization);
        jPanelPasteurization.setLayout(jPanelPasteurizationLayout);
        jPanelPasteurizationLayout.setHorizontalGroup(
            jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPasteurizationLayout.createSequentialGroup()
                .addGroup(jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPasteurizationLayout.createSequentialGroup()
                        .addGap(325, 325, 325)
                        .addComponent(jButton80)
                        .addGap(29, 29, 29)
                        .addComponent(jButton81))
                    .addGroup(jPanelPasteurizationLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelPasteurizationLayout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(jLabel202, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jDatePast, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelPasteurizationLayout.createSequentialGroup()
                                .addGroup(jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel203)
                                    .addComponent(jLabel106))
                                .addGap(19, 19, 19)
                                .addGroup(jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox29, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboRawPast, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(82, 82, 82)
                                .addGroup(jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(waste, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(manpo, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanelPasteurizationLayout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(jLabel204, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanelPasteurizationLayout.createSequentialGroup()
                                .addComponent(past_no)
                                .addGap(23, 23, 23)
                                .addComponent(jTextField154, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(287, 287, 287)
                                .addComponent(jLabel208, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelPasteurizationLayout.createSequentialGroup()
                                        .addComponent(fieldout, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)
                                        .addComponent(jButton78))
                                    .addComponent(fieldin, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(fieldmanp, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(fieldwaste, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))))))
                    .addGroup(jPanelPasteurizationLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 790, Short.MAX_VALUE)
                            .addComponent(jScrollPane6)))
                    .addGroup(jPanelPasteurizationLayout.createSequentialGroup()
                        .addGap(210, 210, 210)
                        .addComponent(decider)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel140)))
                .addContainerGap(445, Short.MAX_VALUE))
        );
        jPanelPasteurizationLayout.setVerticalGroup(
            jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPasteurizationLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(past_no)
                    .addComponent(jTextField154, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel208, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fieldin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel202, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDatePast, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel204, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fieldout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton78)))
                .addGroup(jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPasteurizationLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel203)
                            .addComponent(jComboRawPast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel106)
                            .addComponent(jComboBox29, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelPasteurizationLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(waste, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelPasteurizationLayout.createSequentialGroup()
                                .addComponent(fieldwaste, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)))
                        .addGroup(jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(manpo)
                            .addComponent(fieldmanp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel140)
                    .addComponent(decider))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPasteurizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton80)
                    .addComponent(jButton81)))
        );

        MainPanel.add(jPanelPasteurization, "card26");

        jPanel10.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel10.setPreferredSize(new java.awt.Dimension(1010, 840));
        jPanel10.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel62.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel62.setText("PRODUCTION rough work");
        jPanel10.add(jLabel62, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, 200, 26));

        jButton17.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton17.setText("BACK");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });
        jPanel10.add(jButton17, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 530, 140, 60));

        jButton20.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jButton20.setText("SAVE");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });
        jPanel10.add(jButton20, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 530, 110, 60));

        jButton21.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jButton21.setText("RESET");
        jPanel10.add(jButton21, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 530, 100, 60));

        jTable13.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Package", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane15.setViewportView(jTable13);

        jPanel10.add(jScrollPane15, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 80, 300, 110));

        jTextField65.setEditable(false);
        jPanel10.add(jTextField65, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 80, 30));

        jTextField66.setEditable(false);
        jPanel10.add(jTextField66, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 80, 30));

        jLabel94.setText("FUEL");
        jPanel10.add(jLabel94, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 70, -1, -1));

        jLabel93.setText("ELECTRICITY");
        jPanel10.add(jLabel93, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, -1, -1));

        jLabel97.setText("SUM QTY KGS");
        jPanel10.add(jLabel97, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));

        jTextField70.setEditable(false);
        jPanel10.add(jTextField70, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, 80, 30));

        jTextField71.setEditable(false);
        jPanel10.add(jTextField71, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 160, 80, 30));

        jTextField72.setEditable(false);
        jPanel10.add(jTextField72, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 220, 130, 30));

        jLabel98.setText("SUM QTY KGS GROUP");
        jPanel10.add(jLabel98, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, -1, -1));

        jLabel99.setText("SUM ELE VCR");
        jPanel10.add(jLabel99, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, -1, -1));

        jTextField69.setEditable(false);
        jPanel10.add(jTextField69, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 260, 80, 30));

        jTextField28.setEditable(false);
        jTextField28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField28ActionPerformed(evt);
            }
        });
        jPanel10.add(jTextField28, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 210, 80, 30));

        jLabel100.setText("SUM FUEL VCR");
        jPanel10.add(jLabel100, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, -1, -1));

        jLabel20.setText("count vcr");
        jPanel10.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 350, -1, -1));

        jTextField12.setEditable(false);
        jPanel10.add(jTextField12, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 340, 80, 30));

        jTextField74.setEditable(false);
        jTextField74.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField74ActionPerformed(evt);
            }
        });
        jPanel10.add(jTextField74, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 400, 80, 30));

        jLabel102.setText("Sum");
        jPanel10.add(jLabel102, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 410, -1, -1));

        jLabel55.setText("Qtykgs");
        jPanel10.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 80, -1, -1));

        jTextField75.setEditable(false);
        jPanel10.add(jTextField75, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 80, 90, -1));

        jTextField76.setEditable(false);
        jPanel10.add(jTextField76, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 130, 80, -1));

        jLabel108.setText("SumQtykgs");
        jPanel10.add(jLabel108, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 130, -1, -1));

        jLabel109.setText("Manpower");
        jPanel10.add(jLabel109, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 190, 60, -1));

        jTextField77.setEditable(false);
        jPanel10.add(jTextField77, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 190, 90, -1));

        jTextField84.setEditable(false);
        jTextField84.setText("0");
        jPanel10.add(jTextField84, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 250, 80, -1));

        jLabel110.setText("ProductionID");
        jPanel10.add(jLabel110, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 250, -1, -1));

        jTextField89.setEditable(false);
        jPanel10.add(jTextField89, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 350, 90, -1));

        jLabel118.setText("PId");
        jPanel10.add(jLabel118, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 350, -1, 20));

        jLabel153.setText("Product");
        jPanel10.add(jLabel153, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 390, -1, -1));

        jTextField110.setEditable(false);
        jPanel10.add(jTextField110, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 390, 90, -1));

        jTextField44.setEditable(false);

        jTextField45.setEditable(false);
        jTextField45.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField45ActionPerformed(evt);
            }
        });

        jTextField78.setEditable(false);

        jTextField79.setEditable(false);
        jTextField79.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField79ActionPerformed(evt);
            }
        });

        jTextField82.setEditable(false);

        jTextField80.setEditable(false);

        jTextField43.setEditable(false);
        jTextField43.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField43ActionPerformed(evt);
            }
        });

        jTextField81.setEditable(false);

        jTextField83.setEditable(false);

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel23Layout.createSequentialGroup()
                        .addComponent(jTextField78, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField83, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jTextField44, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addComponent(jTextField45, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addComponent(jTextField79, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField43, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jTextField81, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField80, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)))
                .addContainerGap())
            .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel23Layout.createSequentialGroup()
                    .addContainerGap(127, Short.MAX_VALUE)
                    .addComponent(jTextField82, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(128, Short.MAX_VALUE)))
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jTextField45, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField44, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField78, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField83, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField79, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel23Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField80, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField43, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField81, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel23Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jTextField82, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(107, Short.MAX_VALUE)))
        );

        jPanel10.add(jPanel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 320, 320, 150));

        jTextField123.setEditable(false);
        jTextField123.setText("0");
        jTextField123.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField123ActionPerformed(evt);
            }
        });
        jPanel10.add(jTextField123, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 470, 70, -1));

        jTextField128.setEditable(false);
        jTextField128.setText("0");
        jTextField128.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField128ActionPerformed(evt);
            }
        });
        jPanel10.add(jTextField128, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 450, 70, 20));

        jTextField122.setEditable(false);
        jTextField122.setText("0");
        jPanel10.add(jTextField122, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 430, 80, -1));

        jLabel158.setText("productprice");
        jPanel10.add(jLabel158, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 430, -1, -1));

        jLabel167.setText("packageprice");
        jPanel10.add(jLabel167, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 450, -1, -1));

        jLabel168.setText("labelprice");
        jPanel10.add(jLabel168, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 470, -1, -1));

        jPanel28.setBackground(new java.awt.Color(102, 102, 102));
        jPanel28.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel166.setText("product");
        jPanel28.add(jLabel166, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel169.setText("raw material");
        jPanel28.add(jLabel169, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, -1, -1));

        jLabel170.setText("diesel");
        jPanel28.add(jLabel170, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, -1, -1));

        jTextField129.setEditable(false);
        jTextField129.setText("0");
        jTextField129.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField129ActionPerformed(evt);
            }
        });
        jPanel28.add(jTextField129, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 240, 60, -1));

        jTextField130.setEditable(false);
        jTextField130.setText("0");
        jPanel28.add(jTextField130, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 0, 60, -1));

        jTextField131.setEditable(false);
        jTextField131.setText("0");
        jPanel28.add(jTextField131, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 30, 60, -1));

        jTextField132.setEditable(false);
        jTextField132.setText("0");
        jPanel28.add(jTextField132, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 50, 60, -1));

        jTextField133.setEditable(false);
        jTextField133.setText("0");
        jTextField133.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField133ActionPerformed(evt);
            }
        });
        jPanel28.add(jTextField133, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 60, -1));

        jTextField134.setEditable(false);
        jTextField134.setText("0");
        jTextField134.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField134ActionPerformed(evt);
            }
        });
        jPanel28.add(jTextField134, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 110, 60, -1));

        jTextField135.setEditable(false);
        jTextField135.setText("0");
        jPanel28.add(jTextField135, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 140, 60, -1));

        jTextField136.setEditable(false);
        jTextField136.setText("0");
        jTextField136.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField136ActionPerformed(evt);
            }
        });
        jPanel28.add(jTextField136, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 170, 60, -1));

        jTextField137.setEditable(false);
        jTextField137.setText("0");
        jTextField137.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField137ActionPerformed(evt);
            }
        });
        jPanel28.add(jTextField137, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 200, 60, -1));

        jLabel171.setText("ingredient");
        jPanel28.add(jLabel171, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, -1, -1));

        jLabel172.setText("package");
        jPanel28.add(jLabel172, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, -1, -1));

        jLabel173.setText("label");
        jPanel28.add(jLabel173, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, -1, -1));

        jLabel174.setText("electricity");
        jPanel28.add(jLabel174, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, -1, -1));

        jLabel175.setText("firewood");
        jPanel28.add(jLabel175, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 170, -1, -1));

        jLabel176.setText("briquettes");
        jPanel28.add(jLabel176, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 200, -1, -1));

        jLabel200.setText("Prodprice");
        jPanel28.add(jLabel200, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, -1, -1));

        jLabel201.setText("prodstck");
        jPanel28.add(jLabel201, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, -1, -1));

        jTextField148.setEditable(false);
        jTextField148.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField148ActionPerformed(evt);
            }
        });
        jPanel28.add(jTextField148, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 270, 70, -1));

        jTextField149.setEditable(false);
        jPanel28.add(jTextField149, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 300, 70, -1));

        jTextField160.setEditable(false);
        jTextField160.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField160ActionPerformed(evt);
            }
        });
        jPanel28.add(jTextField160, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 330, 70, -1));

        jLabel225.setText("Unit");
        jPanel28.add(jLabel225, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, -1, -1));

        jTextmainidtransferlist.setEditable(false);
        jPanel28.add(jTextmainidtransferlist, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 360, 70, -1));

        totsea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totseaActionPerformed(evt);
            }
        });
        jPanel28.add(totsea, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 390, 60, -1));
        jPanel28.add(totman, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 420, 60, -1));

        jPanel10.add(jPanel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 50, 190, 460));

        jLabel6.setText("PackID");
        jPanel10.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 210, -1, -1));

        jTextField139.setEditable(false);
        jPanel10.add(jTextField139, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 240, 80, -1));

        jTextField140.setEditable(false);
        jPanel10.add(jTextField140, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 290, 90, -1));

        jLabel177.setText("INStock");
        jPanel10.add(jLabel177, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 290, -1, -1));

        jLabel178.setText("Rwstock");
        jPanel10.add(jLabel178, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 320, -1, -1));

        jTextField141.setEditable(false);
        jTextField141.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField141ActionPerformed(evt);
            }
        });
        jPanel10.add(jTextField141, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 320, 70, -1));

        jTextField67.setEditable(false);
        jPanel10.add(jTextField67, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 160, 60, -1));

        jLabel95.setText("MANPOWER");
        jPanel10.add(jLabel95, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 160, -1, -1));

        jTextLogin.setEditable(false);
        jPanel10.add(jTextLogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 10, 170, -1));

        jTextUser.setEditable(false);
        jPanel10.add(jTextUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 40, 150, -1));

        jTextStatus.setEditable(false);
        jPanel10.add(jTextStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 10, 90, -1));

        jLabel122.setText("Subsidiary");
        jPanel10.add(jLabel122, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 450, -1, -1));

        jTextSubsidiary.setEditable(false);
        jPanel10.add(jTextSubsidiary, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 450, 100, -1));

        rawm.setEditable(false);
        jPanel10.add(rawm, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 290, 60, -1));

        consiered.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consieredActionPerformed(evt);
            }
        });
        jPanel10.add(consiered, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, 100, -1));

        subof.setEditable(false);
        jPanel10.add(subof, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 220, 110, -1));

        jLabel142.setText("jLabel142");
        jPanel10.add(jLabel142, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 70, -1, -1));

        rawCombox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rawComboxActionPerformed(evt);
            }
        });
        jPanel10.add(rawCombox, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 500, 80, -1));

        jPanel10.add(SupCombox, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 530, 80, -1));

        MainPanel.add(jPanel10, "card11");

        jPanelmodVouch.setBackground(new java.awt.Color(153, 204, 255));

        jLabel236.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel236.setText("MODIFY VOUCHER");

        jLabel237.setText("Enter Voucher No:");

        jButton90.setText("Load Date Productions");
        jButton90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton90ActionPerformed(evt);
            }
        });

        jButton91.setText("Modify");
        jButton91.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton91ActionPerformed(evt);
            }
        });

        jTextField163.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField163KeyPressed(evt);
            }
        });

        jButton107.setText("Delete");
        jButton107.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton107ActionPerformed(evt);
            }
        });

        jDateChooser4.setDateFormatString("yyyy,MM,dd");

        jDateChooser7.setDateFormatString("yyyy,MM,dd");

        javax.swing.GroupLayout jPanel49Layout = new javax.swing.GroupLayout(jPanel49);
        jPanel49.setLayout(jPanel49Layout);
        jPanel49Layout.setHorizontalGroup(
            jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel49Layout.createSequentialGroup()
                .addGroup(jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel49Layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(jLabel236, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(316, Short.MAX_VALUE))
            .addGroup(jPanel49Layout.createSequentialGroup()
                .addGroup(jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel49Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jButton107)
                        .addGap(93, 93, 93)
                        .addComponent(jButton91))
                    .addGroup(jPanel49Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel237)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField163, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(64, 64, 64)
                .addGroup(jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDateChooser4, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                    .addComponent(jButton90, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jDateChooser7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel49Layout.setVerticalGroup(
            jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel49Layout.createSequentialGroup()
                .addComponent(jLabel236)
                .addGap(25, 25, 25)
                .addGroup(jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel49Layout.createSequentialGroup()
                        .addGroup(jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel237)
                                .addComponent(jTextField163, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jDateChooser7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton90)
                            .addComponent(jButton91)
                            .addComponent(jButton107))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel49Layout.createSequentialGroup()
                        .addComponent(jDateChooser4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTable21.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Voucher no", "Factory", "Electricity", "Fuel", "Briquettes", "Water", "Diesel"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable21MouseClicked(evt);
            }
        });
        jScrollPane25.setViewportView(jTable21);

        jButton67.setText("Update");
        jButton67.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton67ActionPerformed(evt);
            }
        });

        jButton68.setText("Cancel and Refresh");
        jButton68.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton68ActionPerformed(evt);
            }
        });

        modTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product", "Qty"
            }
        ));
        jScrollPane30.setViewportView(modTable);

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane25, javax.swing.GroupLayout.PREFERRED_SIZE, 958, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane30, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGap(297, 297, 297)
                        .addComponent(jButton67)
                        .addGap(98, 98, 98)
                        .addComponent(jButton68)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane30)
                    .addComponent(jScrollPane25))
                .addGap(18, 18, 18)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton67)
                    .addComponent(jButton68))
                .addContainerGap(143, Short.MAX_VALUE))
        );

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane29.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel27Layout = new javax.swing.GroupLayout(jPanel27);
        jPanel27.setLayout(jPanel27Layout);
        jPanel27Layout.setHorizontalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel27Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane29, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel27Layout.setVerticalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel27Layout.createSequentialGroup()
                .addComponent(jScrollPane29)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanelmodVouchLayout = new javax.swing.GroupLayout(jPanelmodVouch);
        jPanelmodVouch.setLayout(jPanelmodVouchLayout);
        jPanelmodVouchLayout.setHorizontalGroup(
            jPanelmodVouchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelmodVouchLayout.createSequentialGroup()
                .addComponent(jPanel49, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jPanel27, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 105, Short.MAX_VALUE))
            .addGroup(jPanelmodVouchLayout.createSequentialGroup()
                .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelmodVouchLayout.setVerticalGroup(
            jPanelmodVouchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelmodVouchLayout.createSequentialGroup()
                .addGroup(jPanelmodVouchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel49, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        MainPanel.add(jPanelmodVouch, "card32");

        jPanelSorting.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanelSorting.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jDatesort.setDateFormatString("yyyy,MM,dd");
        jPanelSorting.add(jDatesort, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, 190, 28));

        jLabel209.setText("Date");
        jPanelSorting.add(jLabel209, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 60, -1, 28));

        jLabel210.setText("Raw Material");
        jPanelSorting.add(jLabel210, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, 70, 30));

        jCombosort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanelSorting.add(jCombosort, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 100, 190, 30));

        jLabel211.setText("Qty Before Sorting");
        jPanelSorting.add(jLabel211, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, -1, 30));
        jPanelSorting.add(jTextqtybefore, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 140, 190, 30));

        jLabel212.setText("Manpower Hrs");
        jPanelSorting.add(jLabel212, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, -1, 20));
        jPanelSorting.add(jTextsortwaste, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 180, 190, 25));

        jLabel213.setText("Waste");
        jPanelSorting.add(jLabel213, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 180, -1, 20));
        jPanelSorting.add(jTextsortmanpower, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 210, 190, 25));

        jLabel214.setText("Qty After Sorting");
        jPanelSorting.add(jLabel214, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 90, 30));
        jPanelSorting.add(jTextsortqtyafter, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 240, 190, 28));

        jButton79.setText("Discard");
        jPanelSorting.add(jButton79, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 320, -1, -1));

        jButton82.setText("Save");
        jButton82.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton82ActionPerformed(evt);
            }
        });
        jPanelSorting.add(jButton82, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 320, -1, -1));

        jTable35.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Raw Material", "Qty Before Sorting", "Qty After Sorting", "Waste"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane40.setViewportView(jTable35);

        jPanelSorting.add(jScrollPane40, new org.netbeans.lib.awtextra.AbsoluteConstraints(369, 58, -1, 161));

        jLabel215.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel215.setText("Sorting");
        jPanelSorting.add(jLabel215, new org.netbeans.lib.awtextra.AbsoluteConstraints(429, 12, -1, -1));

        jCombosorttype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dry Sorting", "Wet Sorting", "Frozen" }));
        jPanelSorting.add(jCombosorttype, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 180, -1));

        jLabel216.setText("Sort Type");
        jPanelSorting.add(jLabel216, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 30, -1, 20));

        jTextcomment.setColumns(20);
        jTextcomment.setRows(5);
        jScrollPane41.setViewportView(jTextcomment);

        jPanelSorting.add(jScrollPane41, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 240, 380, -1));

        jLabel217.setText("Comments");
        jPanelSorting.add(jLabel217, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 260, -1, -1));

        jComboBox46.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Product", "Raw Material", "Ingredient" }));
        jComboBox46.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox46ActionPerformed(evt);
            }
        });
        jPanelSorting.add(jComboBox46, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 10, 180, -1));

        MainPanel.add(jPanelSorting, "card25");

        jPanel46.setBackground(new java.awt.Color(153, 204, 255));
        jPanel46.setBorder(javax.swing.BorderFactory.createTitledBorder("Product Transfer"));

        jLabel238.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel238.setText("PRODUCT TRANSFER");

        jLabel239.setText("Transfer ID:");

        jLabel240.setText("Date:");

        jtransDate.setDateFormatString("yyyy,MM,dd");

        jTable42.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tranfer ID", "Date", "Production ID", "Product", "Quantity", "Transfered To"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable42.setEnabled(false);
        jScrollPane49.setViewportView(jTable42);

        jLabel241.setText("Transfer To:");

        jCombotoe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton92.setText("Add Products");
        jButton92.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton92ActionPerformed(evt);
            }
        });

        jLabel242.setText("Product");
        jLabel242.setEnabled(false);

        jLabel243.setText("Quantity");
        jLabel243.setEnabled(false);

        jButton93.setText("Discard");
        jButton93.setEnabled(false);
        jButton93.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton93ActionPerformed(evt);
            }
        });

        jButton95.setText("Save");
        jButton95.setEnabled(false);
        jButton95.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton95ActionPerformed(evt);
            }
        });

        jTexty.setEnabled(false);

        jLabel244.setText("Production ID");
        jLabel244.setEnabled(false);

        jTextid.setEnabled(false);
        jTextid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextidKeyPressed(evt);
            }
        });

        jTextprod.setEditable(false);

        jTextcomm.setColumns(20);
        jTextcomm.setRows(5);
        jScrollPane48.setViewportView(jTextcomm);

        jLabel245.setText("Remarks");

        jComboBox27.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Production", "Packing" }));

        javax.swing.GroupLayout jPanel46Layout = new javax.swing.GroupLayout(jPanel46);
        jPanel46.setLayout(jPanel46Layout);
        jPanel46Layout.setHorizontalGroup(
            jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel46Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel46Layout.createSequentialGroup()
                        .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel46Layout.createSequentialGroup()
                                .addComponent(jButton93)
                                .addGap(18, 18, 18)
                                .addComponent(jButton95))
                            .addGroup(jPanel46Layout.createSequentialGroup()
                                .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel244)
                                    .addGroup(jPanel46Layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel243, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel242, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBox27, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTexty)
                                    .addComponent(jTextid)
                                    .addComponent(jTextprod, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addComponent(jScrollPane49, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel46Layout.createSequentialGroup()
                        .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel46Layout.createSequentialGroup()
                                .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel241)
                                        .addGroup(jPanel46Layout.createSequentialGroup()
                                            .addComponent(jLabel240)
                                            .addGap(17, 17, 17)))
                                    .addComponent(jLabel239))
                                .addGap(24, 24, 24)
                                .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jCombotoe, 0, 151, Short.MAX_VALUE)
                                    .addComponent(jTextFieldid)
                                    .addComponent(jtransDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(60, 60, 60)
                                .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane48, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel245)))
                            .addComponent(jButton92, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel46Layout.createSequentialGroup()
                .addGap(353, 353, 353)
                .addComponent(jLabel238, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel46Layout.setVerticalGroup(
            jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel46Layout.createSequentialGroup()
                .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel46Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel240)
                            .addComponent(jtransDate, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel241)
                            .addComponent(jCombotoe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel46Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel238, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel46Layout.createSequentialGroup()
                                .addComponent(jLabel245)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane48, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextFieldid, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel239)))))
                .addGap(18, 18, 18)
                .addComponent(jButton92)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel46Layout.createSequentialGroup()
                        .addComponent(jScrollPane49, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel46Layout.createSequentialGroup()
                        .addComponent(jComboBox27, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextid, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                            .addComponent(jLabel244, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextprod, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                            .addComponent(jLabel242, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTexty, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel243, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton93)
                            .addComponent(jButton95))
                        .addGap(21, 21, 21))))
        );

        javax.swing.GroupLayout jPanelTransferLayout = new javax.swing.GroupLayout(jPanelTransfer);
        jPanelTransfer.setLayout(jPanelTransferLayout);
        jPanelTransferLayout.setHorizontalGroup(
            jPanelTransferLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel46, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanelTransferLayout.setVerticalGroup(
            jPanelTransferLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTransferLayout.createSequentialGroup()
                .addComponent(jPanel46, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        MainPanel.add(jPanelTransfer, "card33");

        jLabel246.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel246.setText("TRANSFER TABLE");

        jTable43.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Transfer ID", "Date", "Production ID", "Product", "In", "Out", "Factory"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable43.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable43MouseClicked(evt);
            }
        });
        jTable43.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable43KeyPressed(evt);
            }
        });
        jScrollPane51.setViewportView(jTable43);

        jButton41.setText("Generate Report");
        jButton41.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton41ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelTransferListLayout = new javax.swing.GroupLayout(jPanelTransferList);
        jPanelTransferList.setLayout(jPanelTransferListLayout);
        jPanelTransferListLayout.setHorizontalGroup(
            jPanelTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTransferListLayout.createSequentialGroup()
                .addGroup(jPanelTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelTransferListLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane51, javax.swing.GroupLayout.DEFAULT_SIZE, 1239, Short.MAX_VALUE))
                    .addGroup(jPanelTransferListLayout.createSequentialGroup()
                        .addGroup(jPanelTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelTransferListLayout.createSequentialGroup()
                                .addGap(228, 228, 228)
                                .addComponent(jLabel246))
                            .addGroup(jPanelTransferListLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButton41)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelTransferListLayout.setVerticalGroup(
            jPanelTransferListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelTransferListLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel246)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane51, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jButton41)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MainPanel.add(jPanelTransferList, "card34");

        jLabel247.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel247.setText("WAREHOUSE STOCKS");

        jTable41.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Unit", "Unit Price", "Qty in Stock", "Reorder Level", "Qty in Reorder"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane50.setViewportView(jTable41);

        javax.swing.GroupLayout WarehouseStockLayout = new javax.swing.GroupLayout(WarehouseStock);
        WarehouseStock.setLayout(WarehouseStockLayout);
        WarehouseStockLayout.setHorizontalGroup(
            WarehouseStockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WarehouseStockLayout.createSequentialGroup()
                .addGap(225, 225, 225)
                .addComponent(jLabel247)
                .addContainerGap(908, Short.MAX_VALUE))
            .addGroup(WarehouseStockLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane50)
                .addContainerGap())
        );
        WarehouseStockLayout.setVerticalGroup(
            WarehouseStockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WarehouseStockLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel247)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane50, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MainPanel.add(WarehouseStock, "card35");

        jPanelsalesstockupdate.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanelsalesstockupdate.setPreferredSize(new java.awt.Dimension(1010, 840));
        jPanelsalesstockupdate.setLayout(new java.awt.BorderLayout());

        jLabel121.setText("                                                                                                                                                                 Sales Stock Update");
        jPanelsalesstockupdate.add(jLabel121, java.awt.BorderLayout.PAGE_START);

        jButton13.setText("Sales Stock Update");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton28.setText("Sales Movement");
        jButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton28ActionPerformed(evt);
            }
        });

        jButton46.setText("Update Stocks");
        jButton46.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton46ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel50Layout = new javax.swing.GroupLayout(jPanel50);
        jPanel50.setLayout(jPanel50Layout);
        jPanel50Layout.setHorizontalGroup(
            jPanel50Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton46, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel50Layout.setVerticalGroup(
            jPanel50Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel50Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton13)
                .addGap(18, 18, 18)
                .addComponent(jButton28)
                .addGap(18, 18, 18)
                .addComponent(jButton46)
                .addContainerGap(563, Short.MAX_VALUE))
        );

        jPanelsalesstockupdate.add(jPanel50, java.awt.BorderLayout.LINE_START);

        javax.swing.GroupLayout jPanel51Layout = new javax.swing.GroupLayout(jPanel51);
        jPanel51.setLayout(jPanel51Layout);
        jPanel51Layout.setHorizontalGroup(
            jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel51Layout.setVerticalGroup(
            jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 679, Short.MAX_VALUE)
        );

        jPanelsalesstockupdate.add(jPanel51, java.awt.BorderLayout.LINE_END);

        jButton3.setText("Save");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Discard");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel52Layout = new javax.swing.GroupLayout(jPanel52);
        jPanel52.setLayout(jPanel52Layout);
        jPanel52Layout.setHorizontalGroup(
            jPanel52Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel52Layout.createSequentialGroup()
                .addGap(462, 462, 462)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(639, Short.MAX_VALUE))
        );
        jPanel52Layout.setVerticalGroup(
            jPanel52Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel52Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel52Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton3))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jPanelsalesstockupdate.add(jPanel52, java.awt.BorderLayout.PAGE_END);

        jPanel15.setLayout(new java.awt.CardLayout());

        jPanel53.setBackground(new java.awt.Color(153, 204, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "", "", ""}
            },
            new String [] {
                "S/No", "Product Name", "Quantity", "ProductionID"
            }
        ));
        jTable1.setColumnSelectionAllowed(true);
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(30);
        }

        jTextField86.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField86ActionPerformed(evt);
            }
        });

        jLabel111.setText("Date");

        jLabel112.setText("Invoice Number");

        jDatesct.setDateFormatString("yyyy,MM,dd");

        jLabel123.setText("Buyer");

        jLabel124.setText("Vehicle No:");

        javax.swing.GroupLayout jPanel53Layout = new javax.swing.GroupLayout(jPanel53);
        jPanel53.setLayout(jPanel53Layout);
        jPanel53Layout.setHorizontalGroup(
            jPanel53Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel53Layout.createSequentialGroup()
                .addGroup(jPanel53Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel53Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1014, Short.MAX_VALUE))
                    .addGroup(jPanel53Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jPanel53Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel112)
                            .addComponent(jLabel111, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel53Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDatesct, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                            .addComponent(jTextField86))
                        .addGap(91, 91, 91)
                        .addGroup(jPanel53Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel123)
                            .addComponent(jLabel124))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel53Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField85, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                            .addComponent(jTextField90))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel53Layout.setVerticalGroup(
            jPanel53Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel53Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel53Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel53Layout.createSequentialGroup()
                        .addGroup(jPanel53Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel53Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jDatesct, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                                .addComponent(jLabel111, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jTextField85, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel53Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel53Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextField86)
                                .addComponent(jTextField90, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel124))
                            .addComponent(jLabel112, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel123))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel15.add(jPanel53, "card2");

        jPanelsalesstockupdate.add(jPanel15, java.awt.BorderLayout.CENTER);

        MainPanel.add(jPanelsalesstockupdate, "card15");

        jMenuBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jMenu4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jMenu4.setText("ITEM");
        jMenu4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        jMenuItem4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMenuItem4.setText("PRODUCT");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem4);

        jMenuItem6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMenuItem6.setText("PACKAGING");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem6);

        jMenuItem7.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        jMenuItem7.setText("INGREDIENTS");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem7);

        jMenuItem9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMenuItem9.setText("RAW MATERIALS");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem9);

        jMenu8.setText("BILL OF MATERIALS");
        jMenu8.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        jMenuItem26.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem26.setText("CREATE");
        jMenuItem26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem26ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem26);

        jMenuItem33.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem33.setText("UPDATE");
        jMenuItem33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem33ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem33);

        jMenu4.add(jMenu8);

        jMenuBar1.add(jMenu4);

        jMenu7.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jMenu7.setText("STOCKS");
        jMenu7.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        jMenuItem38.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMenuItem38.setIcon(new javax.swing.ImageIcon(getClass().getResource("/newpackage1/Misc-Delete-Database-icon.png"))); // NOI18N
        jMenuItem38.setText("RECEPTION");
        jMenuItem38.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem38ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem38);

        jMenuItem21.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem21.setText("PRODUCT");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem21ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem21);

        jMenuItem18.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem18.setText("RAW MATERIAL");
        jMenuItem18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem18ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem18);

        jMenuItem19.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem19.setText("INGREDIENT");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem19ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem19);

        jMenuItem20.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem20.setText("PACKAGE");
        jMenu7.add(jMenuItem20);

        jMenu14.setText("STOCK UPDATE");
        jMenu14.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        jMenuItem27.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem27.setText("UPDATE STOCKS");
        jMenuItem27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem27ActionPerformed(evt);
            }
        });
        jMenu14.add(jMenuItem27);

        jMenuItem31.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem31.setText("WAREHOUSE SALES");
        jMenuItem31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem31ActionPerformed(evt);
            }
        });
        jMenu14.add(jMenuItem31);

        jMenu7.add(jMenu14);

        jMenuBar1.add(jMenu7);

        jMenu2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jMenu2.setText("PRODUCTION");
        jMenu2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMenuItem3.setText("ADD PRODUCTION VOUCHER");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMenuItem5.setText("PRODUCTION REPORT");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem16.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem16.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem16.setText("PACKING");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem16);

        jMenuItem15.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem15.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem15.setText("WAREHOUSE");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem15);

        jMenu3.setText("ACTIVITIES");
        jMenu3.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        jMenuItem13.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem13.setText("PASTEURIZATION");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem13);

        jMenuItem24.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem24.setText("BAZOOKA");
        jMenu3.add(jMenuItem24);

        jMenuItem25.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem25.setText("SOAKING");
        jMenuItem25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem25ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem25);

        jMenuItem14.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem14.setText("SORTING");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem14);

        jMenu2.add(jMenu3);

        jMenuBar1.add(jMenu2);

        jMenu17.setText("ENGINEERING");

        jMenuItem47.setText("Daily Consumptions");
        jMenuItem47.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem47ActionPerformed(evt);
            }
        });
        jMenu17.add(jMenuItem47);

        jMenuItem43.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMenuItem43.setText("JOB REQUESTS");
        jMenuItem43.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem43ActionPerformed(evt);
            }
        });
        jMenu17.add(jMenuItem43);

        jMenuBar1.add(jMenu17);

        jMenu13.setText("TRANSFERS");
        jMenu13.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        jMenuItem29.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem29.setText("TRANSFER");
        jMenuItem29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem29ActionPerformed(evt);
            }
        });
        jMenu13.add(jMenuItem29);

        jMenuItem30.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem30.setText("LIST TRANSFERS");
        jMenuItem30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem30ActionPerformed(evt);
            }
        });
        jMenu13.add(jMenuItem30);

        jMenuBar1.add(jMenu13);

        jMenu6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jMenu6.setText("SALES");
        jMenu6.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        jMenuItem17.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem17.setText("PRODUCT");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem17);

        jMenuBar1.add(jMenu6);

        jMenu15.setText("REPORTS");
        jMenu15.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        jMenu16.setText("MONTHLY REPORTS");

        jMenu19.setText("Above Standard Costing");

        jMenuItem45.setText("Reports");
        jMenuItem45.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem45ActionPerformed(evt);
            }
        });
        jMenu19.add(jMenuItem45);

        jMenu16.add(jMenu19);

        jMenuItem48.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem48.setText("Production Cost");
        jMenuItem48.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem48ActionPerformed(evt);
            }
        });
        jMenu16.add(jMenuItem48);

        jMenuItem49.setText("Packing Cost");
        jMenuItem49.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem49ActionPerformed(evt);
            }
        });
        jMenu16.add(jMenuItem49);

        jMenuItem46.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem46.setText("Summary Report");
        jMenuItem46.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem46ActionPerformed(evt);
            }
        });
        jMenu16.add(jMenuItem46);

        jMenu15.add(jMenu16);

        jMenuItem44.setText("Production Cost Reports");
        jMenuItem44.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem44ActionPerformed(evt);
            }
        });
        jMenu15.add(jMenuItem44);

        jMenu20.setText("TRACEABILITY REPORTS");

        jMenu21.setText("PRODUCT");

        jMenuItem39.setText("PER PRODUCTION");
        jMenuItem39.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem39ActionPerformed(evt);
            }
        });
        jMenu21.add(jMenuItem39);

        jMenuItem42.setText("GROUPED PER CONS");
        jMenuItem42.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem42ActionPerformed(evt);
            }
        });
        jMenu21.add(jMenuItem42);

        jMenu20.add(jMenu21);

        jMenu22.setText("RAW MATERIAL");

        jMenuItem40.setText("PER PRODUCTION DATE");
        jMenuItem40.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem40ActionPerformed(evt);
            }
        });
        jMenu22.add(jMenuItem40);

        jMenuItem41.setText("GROUPED PER CONS");
        jMenuItem41.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem41ActionPerformed(evt);
            }
        });
        jMenu22.add(jMenuItem41);

        jMenu20.add(jMenu22);

        jMenu15.add(jMenu20);

        jMenuItem35.setText("MOVEMENT ANALYSIS");
        jMenuItem35.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem35ActionPerformed(evt);
            }
        });
        jMenu15.add(jMenuItem35);

        jMenuItem34.setText("PACKAGE USAGE");
        jMenuItem34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem34ActionPerformed(evt);
            }
        });
        jMenu15.add(jMenuItem34);

        jMenuItem36.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem36.setText("AVERAGE COSTS");
        jMenuItem36.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem36ActionPerformed(evt);
            }
        });
        jMenu15.add(jMenuItem36);

        jMenuItem37.setText("PRODUCTION  COSTS");
        jMenuItem37.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem37ActionPerformed(evt);
            }
        });
        jMenu15.add(jMenuItem37);

        jMenuBar1.add(jMenu15);

        jMenu23.setText("TASKIT");
        jMenu23.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMenuBar1.add(jMenu23);

        jMenu5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jMenu5.setText("ANALYSIS");
        jMenu5.setEnabled(false);
        jMenu5.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenu5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu5ActionPerformed(evt);
            }
        });

        jMenuItem10.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem10.setText("COST ANALYSIS");
        jMenuItem10.setEnabled(false);
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem10);

        jMenuItem11.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem11.setText("COST REPORT");
        jMenuItem11.setActionCommand("Cost Report");
        jMenuItem11.setEnabled(false);
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem11);

        jMenu9.setText("DETAILED COST REPORT");
        jMenu9.setEnabled(false);
        jMenu9.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        jMenuItem23.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem23.setText("TRIMMED REPORT");
        jMenuItem23.setEnabled(false);
        jMenuItem23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem23ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem23);

        jMenuItem22.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem22.setText("DETAILED COST REPORT");
        jMenuItem22.setEnabled(false);
        jMenuItem22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem22ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem22);

        jMenu5.add(jMenu9);

        jMenuItem12.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem12.setText("PRODUCTION ANALYSIS");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem12);

        jMenuItem32.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jMenuItem32.setText("EXPORTS AND IMPORTS");
        jMenuItem32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem32ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem32);

        jMenu12.setText("SYSTEM TOOLS");
        jMenu12.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        jMenuItem28.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem28.setText("MODIFY VOUCHER");
        jMenuItem28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem28ActionPerformed(evt);
            }
        });
        jMenu12.add(jMenuItem28);

        jMenu5.add(jMenu12);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1259, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 791, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed

        // TODO add your handling code here:
        //menu
        MainPanel.removeAll();
        MainPanel.add(jPanelMenu2);
        MainPanel.repaint();
        MainPanel.revalidate();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        String kec = (String) jComboBox1.getSelectedItem();
        jComboBox23.removeAllItems();
        try {

            Connection con1h0 = (Connection) db_Connection.getInstance();
            String s = "select * from fc_grp where factory = '" + kec + "'";
            try (PreparedStatement ipis = con1h0.prepareStatement(s)) {
                rs = ipis.executeQuery(s);

                while (rs.next()) {
                    jComboBox23.addItem(rs.getString("group"));

                }

                rs.close();
                ipis.close();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Database Error");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error connection");
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        String cassie = jTextStatus.getText();

        switch (cassie) {
            case "ADMINISTRATOR":
                
                try {
                jComboBox3.setModel(new DefaultComboBoxModel(factoryReturns.getFactories().toArray()));
                jLabel145.setVisible(false);
                Factorycombo();
            } catch (SQLException ex) {
                Logger.getLogger(NewJFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

            MainPanel.removeAll();
            MainPanel.add(jPanel3);
//                jPanelFactory.add(jToolBar2, BorderLayout.NORTH);
            MainPanel.repaint();
            MainPanel.revalidate();

            break;
            case "USER":
                Factorycombo();
                try {
                    jComboBox3.setModel(new DefaultComboBoxModel(factoryReturns.getFactories().toArray()));
                    jLabel145.setVisible(false);
                } catch (SQLException ex) {
                    Logger.getLogger(NewJFrame.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
                MainPanel.removeAll();
                MainPanel.add(jPanel3);
//                jPanel3.add(jToolBar2, BorderLayout.NORTH);
                MainPanel.repaint();
                MainPanel.revalidate();
                break;
            default:
                break;

        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed


    private void jButtonReset_ProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReset_ProductActionPerformed
        jTextField1.setText(null);
        jTextField2.setText(null);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonReset_ProductActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        MainPanel.removeAll();
        MainPanel.add(jPanel8);
        MainPanel.repaint();
        MainPanel.revalidate();
        // TODO add your handling code here:

    }//GEN-LAST:event_jMenuItem5ActionPerformed


    private void jButtonSave_ProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSave_ProductActionPerformed
        String mk = jTextField1.getText();
        String mn = jTextField2.getText();
        Double mp = Double.valueOf(mn);
        String ab = (String) jComboBox1.getSelectedItem();
        String bc = (String) jComboBox2.getSelectedItem();
        String cd = (String) jComboBox23.getSelectedItem();
        if (jRadioButton7.isSelected() == true) {
            String vq = jTextField46.getText();
            Double qv = Double.valueOf(vq);
            try {
                Connection con6 = (Connection) db_Connection.getInstance();
                String query = "INSERT INTO product (`product_name`,`factory`,`unit`,`stock_in_hand`,`kgsperpc`,`groupe`)"
                        + "VALUES (?,?,?,?,?,?)";//                        
                PreparedStatement update = con6.prepareStatement(query);
                update.setString(1, mk);
                update.setString(2, ab);
                update.setString(3, bc);
                update.setDouble(4, mp);
                update.setDouble(5, qv);
                update.setString(6, cd);
                try {
                    update.executeUpdate();//                        ResultSet rs=stmt.executeUpdate(update);
                    jTextField1.setText(null);
                    jTextField2.setText(null);
                    jTextField46.setText(null);
                    MainPanel.removeAll();
                    MainPanel.add(jPanelMenu2);
                    MainPanel.repaint();
                    MainPanel.revalidate();//                                        
                    JOptionPane.showMessageDialog(this, "Record has been inserted");
                } catch (Exception e) {
//                                 e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error in Update");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error in Connectivity");
            }
        } else {
            try {
                Connection con60 = (Connection) db_Connection.getInstance();
                String query = "INSERT INTO product (`product_name`,`factory`,`unit`,`stock_in_hand`)"
                        + "VALUES (?,?,?,?)";//                        
                PreparedStatement updat = con60.prepareStatement(query);
                updat.setString(1, mk);
                updat.setString(2, ab);
                updat.setString(3, bc);
                updat.setDouble(4, mp);
                try {
                    updat.executeUpdate();//                      
                    jTextField1.setText(null);
                    jTextField2.setText(null);
                    jTextField46.setText(null);
                    MainPanel.removeAll();
                    MainPanel.add(jPanelMenu2);
                    MainPanel.repaint();
                    MainPanel.revalidate();//                                       
                    JOptionPane.showMessageDialog(this, "Record has been inserted");
                    updat.close();
                } catch (Exception e) {
//                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error in Update");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error in Connectivity");
            }
        }
// TODO add your handling code here:
    }//GEN-LAST:event_jButtonSave_ProductActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        MainPanel.removeAll();
        MainPanel.add(jPanel5);
        MainPanel.repaint();
        MainPanel.revalidate();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jTextField14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField14ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField14ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        jTextField13.setText(null);
        jTextField14.setText(null);
        jTextField15.setText(null);
        jTextField17.setText(null);
        jTextField19.setText(null);
        jTextField18.setText(null);
        jComboBox6.setSelectedIndex(0);
        MainPanel.removeAll();
        MainPanel.add(jPanel5);
        MainPanel.repaint();
        MainPanel.revalidate();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String na = jTextField14.getText();
        String ng = (String) jComboBox6.getSelectedItem();
        String ngie = (String) jComboBox25.getSelectedItem();
        String nb = jTextField13.getText();
        String nc = jTextField18.getText();
        Double ni = Double.valueOf(nc);
        String nd = jTextField15.getText();
        String ne = jTextField17.getText();
        String nf = jTextField19.getText();
        Double nh = Double.valueOf(nf);
        try {
            Connection con7 = (Connection) db_Connection.getInstance();
            String query = "INSERT INTO package (`product_name`, `can_name`, `price_per_can`, `label_name`, `price_per_label`, `label_balance`, `can_balance`, `factory`)"
                    + "VALUES (?,?,?,?,?,?,?,?)";
            PreparedStatement Statementoe = con7.prepareStatement(query);
            Statementoe.setString(1, ng);
            Statementoe.setString(2, na);
            Statementoe.setString(3, nb);
            Statementoe.setString(4, nd);
            Statementoe.setString(5, ne);
            Statementoe.setDouble(6, nh);
            Statementoe.setDouble(7, ni);
            Statementoe.setString(8, ngie);
            try {
                Statementoe.executeUpdate();
                jTextField13.setText(null);
                jTextField14.setText(null);
                jTextField15.setText(null);
                MainPanel.removeAll();
                MainPanel.add(jPanel5);
                MainPanel.repaint();
                MainPanel.revalidate();
                JOptionPane.showMessageDialog(this, "Record has been inserted");
                Statementoe.close();
            } catch (Exception e) {
//                e.printStackTrace();
//                JOptionPane.showMessageDialog(this, "Invalid Entry");
            }
        } catch (Exception e) {
//                e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error in Connectivity");
        }//                        
////// TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField17ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField17ActionPerformed

    private void jTextField18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField18ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField18ActionPerformed

    private void jTextField19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField19ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField19ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        MainPanel.removeAll();
        MainPanel.add(jPanel6);
        MainPanel.repaint();
        MainPanel.revalidate();

        jComboBox36.removeAllItems();

//        ingredient_displayer.removeAll();
//        ingredient_displayer.add(jPanel47);
//        ingredient_displayer.repaint();
//        ingredient_displayer.revalidate();
        ingstock();
        try {
            jComboBox7.setModel(new DefaultComboBoxModel(factoryReturns.getFactories().toArray()));
            jComboBox36.setModel(new DefaultComboBoxModel(productReturns.getProduct().toArray()));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Loading Error!");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        String wa = (String) jComboBox9.getSelectedItem();
        String wb = jTextField21.getText();

        String wc = (String) jComboBox10.getSelectedItem();
        String wd = jTextField22.getText();
        Double we = Double.valueOf(wd);
        String wf = (String) jComboBox12.getSelectedItem();
        String wi = jTextField36.getText();
        Double wj = Double.valueOf(wi);
        String rmname = jTextField93.getText();

        try {

//            Connection con8 = (Connection) db_Connection.getInstance();
            String query = "INSERT INTO raw_material (`raw_material_name`, `factory`, `unit`, `stock_in_hand`,`product_name`,`rm_name_reversed`,`unit_price`)"
                    + "VALUES (?,?,?,?,?,?,?)";

            PreparedStatement Statemente = db_Connection.getInstance().prepareStatement(query);

            Statemente.setString(1, wb);
            Statemente.setString(2, wa);
            Statemente.setString(3, wc);
            Statemente.setDouble(4, we);
            Statemente.setString(5, wf);
            Statemente.setString(6, rmname);
            Statemente.setDouble(7, wj);
            Statemente.executeUpdate();

            try {

                jTextField21.setText(null);
                jTextField22.setText(null);

                MainPanel.removeAll();
                MainPanel.add(jPanel7);
                MainPanel.repaint();
                MainPanel.revalidate();

                JOptionPane.showMessageDialog(this, "Record has been inserted");

                try (PreparedStatement ps1ez = db_Connection.getInstance().prepareStatement("SELECT * FROM all_ingredients where factory=? order by ingredient;")) {
                    ps1ez.setString(1, wa);
                    ResultSet rsPadd = ps1ez.executeQuery();
                    jTable20.setModel(rsToTableModels.aboveMarginModel.buildTableModel(rsPadd));
//                    while (rsPadd.next()) {
//                        model.addRow(new Object[]{rsPadd.getString("product"), rsPadd.getDouble("rawcost"), rsPadd.getDouble("cancost"), rsPadd.getDouble("mancost"), rsPadd.getDouble("averageprice"), rsPadd.getString("frome")});
////                        model.addRow(new Object[]{rsPadd.getString("product"), rsPadd.getString("factory"), rsPadd.getDouble("rawcost"), rsPadd.getDouble("cancost"), rsPadd.getDouble("fuelcost"), rsPadd.getDouble("elecost"), rsPadd.getDouble("dieselcost"), rsPadd.getDouble("mancost"), rsPadd.getDouble("wastecost"), rsPadd.getDouble("averageprice"), rsPadd.getString("month"), rsPadd.getDouble("quantity")});
//                    }
                    Statemente.close();
                } catch (Exception e) {
                    Logger.getLogger(NewJFrame.class
                            .getName()).log(Level.SEVERE, null, e);
                    e.printStackTrace();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Invalid Entry");
                e.printStackTrace();
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error in Connectivity");
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        MainPanel.removeAll();
        MainPanel.add(jPanel7);
        MainPanel.repaint();
        MainPanel.revalidate();
        try {
            jComboBox9.setModel(new DefaultComboBoxModel(factoryReturns.getFactories().toArray()));
            // TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jComboBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox7ActionPerformed
        String kecIA1 = (String) jComboBox7.getSelectedItem();
        jComboBox36.removeAllItems();
        try {

            Connection con1hI04 = (Connection) db_Connection.getInstance();
            String sIA1 = "select * from product where factory = '" + kecIA1 + "'";
            try (PreparedStatement psIA1 = con1hI04.prepareStatement(sIA1)) {
                rs = psIA1.executeQuery(sIA1);

                while (rs.next()) {
                    jComboBox36.addItem(rs.getString("product_name"));
                }
                rs.close();
                psIA1.close();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());

//                e.printStackTrace();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());

//            e.printStackTrace();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox7ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        String facto = (String) jComboBox7.getSelectedItem();
//        String ing = (String) jComboBox11.getSelectedItem();
        String ing = jTextField6.getText();
        String unit = (String) jComboBox8.getSelectedItem();
        String price = jTextField37.getText();
        Double pry = Double.valueOf(price);
        String stock = jTextField38.getText();
        Double stc = Double.valueOf(stock);
        String comb = facto + ing;
//        jTextField38.setText(comb);
        try {

//            Connection con9 = (Connection) db_Connection.getInstance();
            String query = "INSERT INTO ingredients (`ingredient_name`,`ingredient_price`,`factory`,`stock_in_hand`,`unit`,main_material)"
                    + "VALUES (?,?,?,?,?,?)";
//             String query = "INSERT INTO ing_code (`ing_name`,`price`,`factory`,`stock_in_hand`,`unit`,sub_ing)"
//                    + "VALUES (?,?,?,?,?,?)";
////            raw__id, factory, ing_name, price, stock_in_hand, sub_ing

            try (PreparedStatement Statementer = db_Connection.getInstance().prepareStatement(query)) {
                Statementer.setString(1, comb);
                Statementer.setDouble(2, pry);
                Statementer.setString(3, facto);
                Statementer.setDouble(4, stc);
                Statementer.setString(5, unit);
                Statementer.setString(6, ing);
                Statementer.executeUpdate();

//                        ResultSet rs=stmt.executeUpdate(update);
                jTextField38.setText(null);
//                jTextField2.setText(null);
                try {
                    DefaultTableModel model = (DefaultTableModel) jTable19.getModel();

                    try {
                        int z3 = model.getRowCount();
                        for (int lu3 = 0; lu3 <= z3; ++lu3) {
                            model.removeRow(0);
                        }
                    } catch (Exception e) {
                    }

                    try (PreparedStatement ps5 = db_Connection.getInstance().prepareStatement("SELECT * FROM all_ingredients")) {
                        rs = ps5.executeQuery();
                        while (rs.next()) {
                            model.addRow(new Object[]{rs.getString("ingredient"), rs.getString("factory"), rs.getString("unit"), rs.getDouble("ingredient_price"), rs.getDouble("stock_in_hand"), rs.getString("main_material")});
                        }

                        rs.close();
                        ps5.close();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e.getMessage());
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }

//                                        
                JOptionPane.showMessageDialog(this, "Record has been inserted");
                Statementer.close();
            } catch (Exception e) {
//                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Invalid Entry");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error in Connectivity");
        }

        //        String ga = (String) jComboBox7.getSelectedItem();
//        String gb = (String) jComboBox11.getSelectedItem();
//        String gc = jTextField16.getText();
//        String gd = (String) jComboBox8.getSelectedItem();
//        String ge = jTextField20.getText();
//        Double gf = Double.valueOf(ge);
//
//        try {
//
//            Connection con9 = (Connection) db_Connection.getInstance();
//
//            String query = "INSERT INTO ingredients (`ingredient_name`,`unit`,`factory`,`stock_in_hand`,`product`)"
//                    + "VALUES (?,?,?,?,?)";
//
//            try (PreparedStatement Statementer = con9.prepareStatement(query)) {
//                Statementer.setString(1, gc);
//                Statementer.setString(2, gd);
//                Statementer.setString(3, ga);
//                Statementer.setDouble(4, gf);
//                Statementer.setString(5, gb);
//                
//
//                Statementer.executeUpdate();
//
////                        ResultSet rs=stmt.executeUpdate(update);
//                jTextField1.setText(null);
//                jTextField2.setText(null);
//                MainPanel.removeAll();
//                MainPanel.add(jPanel6);
//                MainPanel.repaint();
//                MainPanel.revalidate();
////                                        
//                JOptionPane.showMessageDialog(this, "Record has been inserted");
//                Statementer.close();
//            } catch (Exception e) {
////                e.printStackTrace();
//                JOptionPane.showMessageDialog(this, "Invalid Entry");
//            }
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(this, "Error in Connectivity");
//        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
//        jTextField16.setText(null);
//        jTextField20.setText(null);
        jComboBox7.setSelectedIndex(0);
        jComboBox8.setSelectedIndex(0);
//        jComboBox11.setSelectedIndex(0);

        MainPanel.removeAll();
        MainPanel.add(jPanel6);
        MainPanel.repaint();
        MainPanel.revalidate();

// TODO add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        jTextField21.setText(null);
        jTextField22.setText(null);
        jComboBox9.setSelectedIndex(0);
        jComboBox10.setSelectedIndex(0);
        jComboBox12.setSelectedIndex(0);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed


    private void jComboBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox6ActionPerformed

//        try {
//            Class.forName("com.mysql.jdbc.Driver").newInstance();
//            Connection con10 = (Connection) DriverManager.getConnection("jdbc:mysql://192.168.1.190:3306/canning?zeroDateTimeBehavior=convertToNull", "weru", "steve23741997");
//            String s = "select * from product";
//            try (PreparedStatement ps = con10.prepareStatement(s)) {
//                rs = ps.executeQuery(s);
//
//                while (rs.next()) {
//                    jComboBox6.addItem(rs.getString("product_name"));
//
//                }
//
//                rs.close();
//                ps.close();
//                con10.close();
//            } catch (Exception e) {
//                JOptionPane.showMessageDialog(null, "Database Error");
//            }
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Error connection");
//        }

    }//GEN-LAST:event_jComboBox6ActionPerformed

    private void jComboBox12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox12ActionPerformed
        String vwae = (String) jComboBox9.getSelectedItem();
        try {
            String s = "select * from product where factory='" + vwae + "'";
            try (PreparedStatement pies = db_Connection.getInstance().prepareStatement(s)) {
                rs = pies.executeQuery(s);
                while (rs.next()) {
                    jComboBox12.addItem(rs.getString("product_name"));
                }
                rs.close();
                pies.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Database Error");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error connection");
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox12ActionPerformed

    private void jTextField9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField9ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
//String pck =jTextLogin.getText();
        com.canning.proreport.prorptShow.panel8Show();
    }//GEN-LAST:event_jButton9ActionPerformed


    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed

        String pck = jTextLogin.getText();
        jComboBox24.removeAllItems();
        if (jTextLogin.getText().equals("ADMINISTRATOR")) {
            try {
                jComboBox43.setModel(new DefaultComboBoxModel(factoryReturns.getFactories().toArray()));
                jComboBox24.setModel(new DefaultComboBoxModel(productReturns.getProduct().toArray()));
                MainPanel.removeAll();
                MainPanel.add(jPanel9);
                MainPanel.repaint();
                MainPanel.revalidate();
            } catch (Exception e) {
                Logger.getLogger(NewJFrame.class
                        .getName()).log(Level.SEVERE, null, e);
//                e.printStackTrace();
            }
        } else {
            jMenuItem10.setEnabled(false);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem10ActionPerformed


    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed

        MainPanel.removeAll();
        MainPanel.add(jPanel3);
        MainPanel.repaint();
        MainPanel.revalidate();

// TODO add your handling code here:
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton20ActionPerformed


    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        com.canning.reports.Panel8Proreport.PanelproReport();
    }//GEN-LAST:event_jButton19ActionPerformed


    private void jTextField45ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField45ActionPerformed

// TODO add your handling code here:
    }//GEN-LAST:event_jTextField45ActionPerformed

    private void jTextField43ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField43ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField43ActionPerformed


    private void jRadioButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton8ActionPerformed

    private void jButton24FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButton24FocusGained

        jComboBox6.removeAllItems();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton24FocusGained

    private void jTextField28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField28ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField28ActionPerformed

    private void jTextField74ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField74ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField74ActionPerformed


    private void jComboBox9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox9ActionPerformed
        String kecIA2 = (String) jComboBox9.getSelectedItem();
        jComboBox12.removeAllItems();
        try {

            Connection con1hI01 = (Connection) db_Connection.getInstance();
            String sIA2 = "select * from product where factory = '" + kecIA2 + "'";
            try (PreparedStatement psIA2 = con1hI01.prepareStatement(sIA2)) {
                rs = psIA2.executeQuery(sIA2);

                while (rs.next()) {
                    jComboBox12.addItem(rs.getString("product_name"));
                }
                rs.close();
                psIA2.close();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
//                e.printStackTrace();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
//            e.printStackTrace();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox9ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        String pck = jTextLogin.getText();
        if (jTextLogin.getText().equals("ADMINISTRATOR")) {        //DISPLAY Jasper Report IN JPANEL
            try {
                Connection connn = (Connection) db_Connection.getInstance();

//            JasperDesign jd = JRXmlLoader.load("C:\\Users\\Stevoski\\Documents\\Scanned Documents\\Canning\\src\\CostReport.jrxml");
//64 BIT           
//                JasperDesign jd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\CostReport.jrxml");
//32 BIT
                JasperDesign jd = JRXmlLoader.load("C:\\Program Files\\Cost\\CostReport.jrxml");
                String sql = "select Production_ID,date,product,quantity,Cperunit from canning.new_view order by date desc";
                JRDesignQuery NewQuery = new JRDesignQuery();
                NewQuery.setText(sql);
                jd.setQuery(NewQuery);
                JasperReport jr = JasperCompileManager.compileReport(jd);
                JasperPrint jp = JasperFillManager.fillReport(jr, null, connn);
//JasperViewer.viewReport(jp, false);
//DISPLAY IN JPANEL
//BorderLayout layoutPanel = new BorderLayout();
                BorderLayout layoutPanel = new BorderLayout();
                JPanel panelRPTt = new JPanel(layoutPanel);
                JRViewer vw = new JRViewer(jp);
                panelRPTt.setLayout(new BorderLayout());
                panelRPTt.repaint();
                panelRPTt.add(vw);
                panelRPTt.revalidate();

                MainPanel.removeAll();
                MainPanel.add(panelRPTt);
                MainPanel.repaint();
                MainPanel.revalidate();
//Session sss=new Session():
//             
//                jPanel13.setLayout(new BorderLayout());
//                jPanel13.repaint();
//                jPanel13.add(vw);
//                jPanel13.revalidate();
//
//                MainPanel.removeAll();
//                MainPanel.add(jPanel13);
//                MainPanel.repaint();
//                MainPanel.revalidate();
////JFrame frame = new JFrame("jPanel13");
//jPanel13.getContentPane().add(new JRViewer(jp));
//jPanel13.pack();
                //jPanel13.setVisible(true);
//JasperViewer.setDefaultCloseOperation(NewJFrame.DISPOSE_ON_CLOSE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
//                e.printStackTrace();
            }
        } else {
            jMenuItem11.setEnabled(false);
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jComboBox25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox25ActionPerformed
        String kecIA = (String) jComboBox25.getSelectedItem();
        jComboBox6.removeAllItems();
        try {

            Connection con1hI0 = (Connection) db_Connection.getInstance();
            String sIA = "select * from product where factory = '" + kecIA + "'";
            try (PreparedStatement psIA = con1hI0.prepareStatement(sIA)) {
                rs = psIA.executeQuery(sIA);

                while (rs.next()) {
                    jComboBox6.addItem(rs.getString("product_name"));
                }
                rs.close();
                psIA.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
//                e.printStackTrace();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
//            e.printStackTrace();
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jComboBox25ActionPerformed

    private void jTable8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable8MouseClicked

        String dated1 = ((JTextField) jDate2.getDateEditor().getUiComponent()).getText();
        String no21;
        String remarks1;
        try {

            int row = jTable8.getSelectedRow();
            String tableclick = (jTable8.getModel().getValueAt(row, 1).toString());

            Connection conclikk = (Connection) db_Connection.getInstance();

            String clik = "select * from prodpriceinclusive where ProductionID='" + tableclick + "' ";
            try (PreparedStatement psclikk = conclikk.prepareStatement(clik)) {
                rs = psclikk.executeQuery();

                if (rs.next()) {

                    String vouchered1 = (String) jTextField9.getText();
                    Integer vouchers1 = Integer.valueOf(vouchered1);
                    try {

                        Connection con1v41 = (Connection) db_Connection.getInstance();

                        try {
                            String t = "SELECT * FROM production where voucher_no = '" + vouchers1 + "';";
                            try (PreparedStatement ps3 = con1v41.prepareStatement(t)) {
                                rs = ps3.executeQuery(t);

                                if (rs.next()) {

                                    remarks1 = rs.getString("remarks");
                                    no21 = remarks1;
                                    jTextArea2.setText(String.valueOf(no21));
                                }
                            }
                            //PRODUCTS TEXTFIELD,AMOUNT
                            try {
                                String tia1 = "SELECT sum(quantity) FROM prodpriceinclusive WHERE voucher_no= '" + vouchers1 + "' and  ProductionID='" + tableclick + "' ;";

                                try (PreparedStatement ps1231 = con1v41.prepareStatement(t)) {
                                    rs = ps1231.executeQuery(tia1);

                                    if (rs.next()) {
                                        Double xansal1 = rs.getDouble(1);

                                        jTextField40.setText(String.valueOf(xansal1));
                                    }
                                }
                                //DISPLAY RAW TEXTFIELD
                                try {

                                    Connection con1802 = (Connection) db_Connection.getInstance();

                                    try {
                                        String ti23 = "SELECT sum(qty) FROM rawmatpriceinc WHERE voucher_no= '" + vouchers1 + "' and  ProductionID='" + tableclick + "' ;";

                                        try (PreparedStatement psc = con1802.prepareStatement(t)) {
                                            rs = psc.executeQuery(ti23);

                                            if (rs.next()) {
                                                Double kansal2 = rs.getDouble(1);

                                                jTextField41.setText(String.valueOf(kansal2));
                                            }
                                        }
                                    } catch (Exception e) {
//                                e.printStackTrace();
                                        JOptionPane.showMessageDialog(null, "Cannot save." + e);
                                    }

                                } catch (Exception e) {
                                    Logger.getLogger(NewJFrame.class
                                            .getName()).log(Level.SEVERE, null, e);
                                }

                                //DISPLAY INGRED TEXTFIELD
                                try {
                                    Connection con2702 = (Connection) db_Connection.getInstance();
                                    try {
                                        String tou2 = "SELECT sum(ingredient_qty) FROM ingredpriceinc WHERE voucher_no= '" + vouchers1 + "' and  ProductionID='" + tableclick + "' ;";
                                        try (PreparedStatement psc2 = con2702.prepareStatement(tou2)) {
                                            rs = psc2.executeQuery(tou2);

                                            if (rs.next()) {
                                                Double kansal3 = rs.getDouble(1);
                                                jTextField42.setText(String.valueOf(kansal3));
                                            }
                                            psc2.close();
                                        }
                                    } catch (Exception e) {
//                                e.printStackTrace();
                                        JOptionPane.showMessageDialog(null, "Cannot save." + e);
                                    }
                                } catch (Exception e) {
//                                e.printStackTrace();
                                    JOptionPane.showMessageDialog(null, "Cannot save." + e);
                                }

                            } catch (Exception e) {
//                        e.printStackTrace();
                                JOptionPane.showMessageDialog(null, "Cannot save." + e);
                            }
                        } catch (Exception e) {
//                    e.printStackTrace();
                            JOptionPane.showMessageDialog(null, "Cannot save." + e);
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Invalid Entry or field must be completely filled", "message", 2);
                    }
                    try {
                        DefaultTableModel model5 = (DefaultTableModel) jTable7.getModel();
                        int mg3 = Integer.parseInt(jTextField9.getText());
                        try {
                            int z3 = model5.getRowCount();
                            for (int lu3 = 0; lu3 <= z3; ++lu3) {
                                model5.removeRow(0);
                            }
                        } catch (Exception e) {
                        }
                        try {
                            Connection con1445 = (Connection) db_Connection.getInstance();
                            try (Statement stmt45 = con1445.createStatement()) {
                                String query45 = "SELECT * FROM ingredpriceinc where voucher_no = '" + mg3 + "' and  ProductionID='" + tableclick + "' ;";
                                rs = stmt45.executeQuery(query45);

                                while (rs.next()) {
                                    model5.addRow(new Object[]{rs.getString("ingredient_name"), rs.getString("ingredient_qty")});
                                }
                                rs.close();
                            }

                        } catch (Exception e) {
//                            e.printStackTrace();
                            JOptionPane.showMessageDialog(this, "Error in connectivity");
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Invalid Entry or field must be completely filled", "message", 2);
                    }

                    try {
                        DefaultTableModel model6 = (DefaultTableModel) jTable6.getModel();
                        int mg2 = Integer.parseInt(jTextField9.getText());

                        try {
                            int z2 = model6.getRowCount();
                            for (int lu2 = 0; lu2 <= z2; ++lu2) {
                                model6.removeRow(0);
                            }
                        } catch (Exception e) {
                        }
                        try {

                            Connection con1456 = (Connection) db_Connection.getInstance();
                            try (Statement stmt46 = con1456.createStatement()) {
                                String query46 = "SELECT * FROM raw_materialproduction where voucher_no = '" + mg2 + "' and  ProductionID='" + tableclick + "' ;";
                                rs = stmt46.executeQuery(query46);

                                while (rs.next()) {
                                    model6.addRow(new Object[]{rs.getString("raw_material"), rs.getString("qty")});
                                }

                                rs.close();
                            }

                        } catch (Exception e) {
//                            e.printStackTrace();
                            JOptionPane.showMessageDialog(this, "Error in connectivity");
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Invalid Entry or field must be completely filled", "message", 2);
                    }

                    try {
                        DefaultTableModel model7 = (DefaultTableModel) jTable5.getModel();
                        int mg1 = Integer.parseInt(jTextField9.getText());

                        try {
                            int z1 = model7.getRowCount();
                            for (int lu1 = 0; lu1 <= z1; ++lu1) {
                                model7.removeRow(0);
                            }
                        } catch (Exception e) {
                        }
                        try {

                            Connection con1467 = (Connection) db_Connection.getInstance();
                            try (Statement stmt47 = con1467.createStatement()) {
                                String query47 = "SELECT * FROM productproduction where voucher_no = '" + mg1 + "' and  ProductionID='" + tableclick + "' ;";
                                rs = stmt47.executeQuery(query47);

                                while (rs.next()) {
                                    model7.addRow(new Object[]{rs.getString("ProductionID"), rs.getString("product_name"), rs.getString("quantity"), rs.getString("waste")});
                                }

                                rs.close();
                            }

                        } catch (Exception e) {
//                            e.printStackTrace();
                            JOptionPane.showMessageDialog(this, "Error in connectivity");
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Invalid Entry or field must be completely filled", "message", 2);
                    }

                    try {
                        DefaultTableModel model8 = (DefaultTableModel) jTable8.getModel();
                        int mg = Integer.parseInt(jTextField9.getText());

                        try {
                            int zz = model8.getRowCount();
                            for (int lu = 0; lu <= zz; ++lu) {
                                model8.removeRow(0);
                            }
                        } catch (Exception e) {
                        }
                        try {

                            Connection con1478 = (Connection) db_Connection.getInstance();
                            try (Statement stmt48 = con1478.createStatement()) {
                                String query48 = "SELECT * FROM costingprodn where voucher_no = '" + mg + "' and  production_id='" + tableclick + "' ;";
                                rs = stmt48.executeQuery(query48);

                                while (rs.next()) {
                                    model8.addRow(new Object[]{rs.getString("voucher_no"), rs.getInt("production_id"), rs.getString("date"), rs.getString("factory"), rs.getString("fuel"), rs.getString("manpower"), rs.getString("electricity"), rs.getString("can_name"), rs.getString("no_of_cans"), rs.getString("label_name"), rs.getString("no_of_labels")});
                                }

                                rs.close();
                            }

                        } catch (Exception e) {
//                            e.printStackTrace();
                            JOptionPane.showMessageDialog(this, "Error in connectivity");
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Invalid Entry or field must be completely filled", "message", 2);
                    }

                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error connection");
//            e.printStackTrace();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jTable8MouseClicked

    private void jTable5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable5MouseClicked
        com.canning.events.table.table5Clickevent.table5Click();
    }//GEN-LAST:event_jTable5MouseClicked


    private void jRadioButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton13ActionPerformed

    private void jButton39ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton39ActionPerformed
        String scod = jTextField9.getText();
        String scod1 = ((JTextField) jDate2.getDateEditor().getUiComponent()).getText();
        String scod2 = ((JTextField) jDateChooser2.getDateEditor().getUiComponent()).getText();
        String scod3 = ((JTextField) jDateChooser3.getDateEditor().getUiComponent()).getText();

        if (jRadioButton8.isSelected() == true) {

            try {

                Connection connnr = (Connection) db_Connection.getInstance();
//                JasperDesign jdfy = JRXmlLoader.load("C:\\Users\\Stevoski\\Documents\\Scanned Documents\\Canning\\src\\newpackage1\\trendprodReport.jrxml");
//                  64BIT OS
//                JasperDesign jdfy = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\trendprodReport.jrxml");
//                  32BIT OS
                JasperDesign jdfy = JRXmlLoader.load("C:\\Program Files\\Cost\\trendprodReport.jrxml");

//                InputStream jrM1 = getClass().getResourceAsStream("DatetwnReport.jasper");
//                InputStream jSr1 = getClass().getResourceAsStream("DatebtwnReport_rawsubreport.jasper");
//                JasperDesign jd = JRXmlLoader.load(jrM1);
                String sqlief = "select Production_ID,date,product,quantityKGS,Cperunit,waste from canning.kgsum  where  kgsum.voucher_no ='" + scod + "' order BY kgsum.voucher_no ";
                JRDesignQuery NewQueryy = new JRDesignQuery();
                NewQueryy.setText(sqlief);
                jdfy.setQuery(NewQueryy);

                JasperReport jasperMasterReporth = JasperCompileManager.compileReport(jdfy);

                Map<String, Object> paramsh = new HashMap<>();

                paramsh.put("voucher_no", jasperMasterReporth);

                JasperPrint jph = JasperFillManager.fillReport(jasperMasterReporth, paramsh, connnr);

                //DISPLAY IN JPANEL
                BorderLayout layoutPanelh = new BorderLayout();
                JPanel panelRPTt1 = new JPanel(layoutPanelh);
                JRViewer vw = new JRViewer(jph);
                panelRPTt1.setLayout(new BorderLayout());
                panelRPTt1.repaint();
                panelRPTt1.add(vw);
                panelRPTt1.revalidate();

                MainPanel.removeAll();
                MainPanel.add(panelRPTt1);
                MainPanel.repaint();
                MainPanel.revalidate();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
//                e.printStackTrace();
            }
        } else if (jRadioButton9.isSelected() == true) {
            try {
                try (Connection connnt = db_Connection.getInstance()) {
                    //                JasperDesign jdu = JRXmlLoader.load("C:\\Users\\Stevoski\\Documents\\Scanned Documents\\Canning\\src\\newpackage1\\trendprodReport.jrxml");
//                64BIT OS
//                JasperDesign jdu = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\trendprodReport.jrxml");
//                  32BIT OS
                    JasperDesign jdu = JRXmlLoader.load("C:\\Program Files\\Cost\\trendprodReport.jrxml");

                    String sql = "select Production_ID,date,product,quantityKGS,Cperunit,waste from canning.kgsum  where  kgsum.date ='" + scod1 + "' order BY kgsum.voucher_no ";
                    JRDesignQuery NewQuery = new JRDesignQuery();
                    NewQuery.setText(sql);
                    jdu.setQuery(NewQuery);
                    JasperReport jr = JasperCompileManager.compileReport(jdu);
                    JasperPrint jp = JasperFillManager.fillReport(jr, null, connnt);
//JasperViewer.viewReport(jp, false);
//DISPLAY IN JPANEL
                    BorderLayout layoutPanel1u = new BorderLayout();
                    JPanel panelRPTt1u = new JPanel(layoutPanel1u);
                    JRViewer vwu = new JRViewer(jp);
                    panelRPTt1u.setLayout(new BorderLayout());
                    panelRPTt1u.repaint();
                    panelRPTt1u.add(vwu);
                    panelRPTt1u.revalidate();

                    MainPanel.removeAll();
                    MainPanel.add(panelRPTt1u);
                    MainPanel.repaint();
                    MainPanel.revalidate();
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
//                e.printStackTrace();
            }
        } else if (jRadioButton13.isSelected() == true) {
            try {
                Connection connnx = (Connection) db_Connection.getInstance();
//                JasperDesign jdx = JRXmlLoader.load("C:\\Users\\Stevoski\\Documents\\Scanned Documents\\Canning\\src\\newpackage1\\trendprodReport.jrxml");
//                  64BIT OS
//                JasperDesign jdx = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport.jrxml");
//                  32BIT OS
                JasperDesign jdx = JRXmlLoader.load("C:\\Program Files\\Cost\\DatebtwnReport.jrxml");

//                InputStream jrM1 = getClass().getResourceAsStream("DatetwnReport.jasper");
//                InputStream jSr1 = getClass().getResourceAsStream("DatebtwnReport_rawsubreport.jasper");
//                JasperDesign jd = JRXmlLoader.load(jrM1);
                String sqliex = "select Production_ID,date,product,quantityKGS,Cperunit,waste from canning.new_view  where  new_view.date >='" + scod2 + "' and new_view.date<='" + scod3 + "' order BY new_view.voucher_no ";

                //where  prodpriceinclusive.date >='" + scod2 + "' and prodpriceinclusive.date<='" + scod3 + "'
                JRDesignQuery NewQueryx = new JRDesignQuery();
                NewQueryx.setText(sqliex);
                jdx.setQuery(NewQueryx);
                JasperReport jasperMasterReportx = JasperCompileManager.compileReport(jdx);
//                Map<String, Object> paramsx = new HashMap<String, Object>();
//                paramsx.put("voucher_no", jasperMasterReportx);
                JasperPrint jp = JasperFillManager.fillReport(jasperMasterReportx, null, connnx);
                //DISPLAY IN JPANEL
                BorderLayout layoutPanelx = new BorderLayout();
                JPanel panelRPTtx = new JPanel(layoutPanelx);
                JRViewer vwx = new JRViewer(jp);
                panelRPTtx.setLayout(new BorderLayout());
                panelRPTtx.repaint();
                panelRPTtx.add(vwx);
                panelRPTtx.revalidate();
                MainPanel.removeAll();
                MainPanel.add(panelRPTtx);
                MainPanel.repaint();
                MainPanel.revalidate();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
//                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please Select an Option");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton39ActionPerformed

    private void jButton40ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton40ActionPerformed
        String Disppl = jTextField9.getText();
        String Disid = jTextField138.getText();
        String Dispdt = ((JTextField) jDate2.getDateEditor().getUiComponent()).getText();
        String prt1 = ((JTextField) jDateChooser2.getDateEditor().getUiComponent()).getText();
        String prt2 = ((JTextField) jDateChooser3.getDateEditor().getUiComponent()).getText();
        String access = jTextLogin.getText();
        if ("ADMINISTRATOR".equals(jTextLogin.getText())) {
            try {
                if (jRadioButton8.isSelected() == true) {
                    try {
                        Connection connn = (Connection) db_Connection.getInstance();
// JasperDesign jd = JRXmlLoader.load("C:\\Users\\Stevoski\\Documents\\Scanned Documents\\Canning\\src\\newpackage1\\DatebtwnReport.jrxml");
//                  64BIT OS
//                        JasperDesign jd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport.jrxml");
//                        JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport_subreport2.jrxml");
//JasperFillManager.fillReportToFile(jasperMasterReport, parameters, connn);
//  JasperPrint jp = JasperFillManager.fillReport(jasperMasterReport, paramsi, connn);
////                  32BIT OS
                        JasperDesign jd = JRXmlLoader.load("C:\\Program Files\\Cost\\packingReport.jrxml");
                        JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files\\Cost\\packingsubReport.jrxml");
//                InputStream jrM1 = getClass().getResourceAsStream("DatetwnReport.jasper");
//                InputStream jSr1 = getClass().getResourceAsStream("DatebtwnReport_rawsubreport.jasper");
//                JasperDesign jd = JRXmlLoader.load(jrM1);
                        String sqlie = "SELECT \n"
                                + "        `packed_product`.`packed_productid` AS `PackID`,\n"
                                + "        `packed_product`.`date` AS `date`,\n"
                                + "        `packed_product`.`factory` AS `factory`,\n"
                                + "        `packed_product`.`packed_product` AS `packedproduct`,\n"
                                + "        `packed_product`.`packed_qty` AS `packedqty`,\n"
                                + "        `packed_product`.`manpower_hrs` AS `manpower_hrs`,\n"
                                + "        `packing_consumed`.`item_name` AS `consumedproduct`,\n"
                                + "        `new_view`.`Cperunit` AS `consumedprice`,\n"
                                + "        (`packing_consumed`.`item_qty` * `new_view`.`Cperunit`) AS `consumedamount`,\n"
                                + "        `packing_consumed`.`item_qty` AS `consumedqty`,\n"
                                + "        `packing_consumed`.`consumed_id` AS `ProductionID`, \n"
                                + "        `packing_package`.`package` AS `package`,\n"
                                + "        `packing_package`.`label` AS `label`,\n"
                                + "        `packing_package`.`package_qty` AS `packageqty`,\n"
                                + "        `packing_package`.`label_qty` AS `labelqty`,\n"
                                + "        (`product`.`kgsperpc` * `packing_consumed`.`item_qty`) AS `quantityKGS`\n"
                                + "    FROM\n"
                                + "        ((((`packed_product`\n"
                                + "        LEFT JOIN `product` ON ((`packed_product`.`packed_product` = CONVERT( `product`.`product_name` USING UTF8MB4))))\n"
                                + "        LEFT JOIN `packing_consumed` ON ((`packed_product`.`packed_productid` = `packing_consumed`.`pprodid`)))\n"
                                + "        LEFT JOIN `new_view` ON ((`new_view`.`Production_ID` = `packing_consumed`.`consumed_id`)))\n"
                                + "        LEFT JOIN `packing_package` ON ((`packed_product`.`packed_productid` = `packing_package`.`ref_packid`)))\n"
                                + "    GROUP BY `packed_product`.`packed_productid`";
                        JRDesignQuery NewQuery = new JRDesignQuery();
                        NewQuery.setText(sqlie);
                        jd.setQuery(NewQuery);
                        JasperReport jasperMasterReport = JasperCompileManager.compileReport(jd);
                        JasperReport jsr = JasperCompileManager.compileReport(SUBjd);
//         JasperReport jasperMasterReport = JasperCompileManager.compileReport(masterReportSource);
//JasperReport jasperSubReport = JasperCompileManager.compileReport(SUBjd);
//
//Map<String, Object> parameters = new HashMap()<String, Object>;
//parameters.put("subreportParameter", jasperSubReport);
//
//JasperFillManager.fillReportToFile(jasperMasterReport, parameters, connection);
                        Map<String, Object> paramsi = new HashMap<>();
//                Map<String, Object> params = new HashMap<>()<String, Object()>;
                        paramsi.put("spar", jsr);
//JasperFillManager.fillReportToFile(jasperMasterReport, parameters, connn);
                        JasperPrint jp = JasperFillManager.fillReport(jasperMasterReport, paramsi, connn);
//DISPLAY IN JPANEL
                        BorderLayout layoutPanel = new BorderLayout();
                        JPanel panelRPTt = new JPanel(layoutPanel);
                        JRViewer vw = new JRViewer(jp);
                        panelRPTt.setLayout(new BorderLayout());
                        panelRPTt.repaint();
                        panelRPTt.add(vw);
                        panelRPTt.revalidate();
                        MainPanel.removeAll();
                        MainPanel.add(panelRPTt);
                        MainPanel.repaint();
                        MainPanel.revalidate();

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e.getMessage());
//                        e.printStackTrace();
                    }
                } else if (jRadioButton9.isSelected() == true) {
                    try {

                        Connection connn7 = (Connection) db_Connection.getInstance();
//                        JasperDesign jd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport.jrxml");
//                        JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport_subreport2.jrxml");
//                  64BIT OS
//                        JasperDesign jd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport.jrxml");
//                        JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport_subreport2.jrxml");
//32 BIT OS

                        JasperDesign jd = JRXmlLoader.load("C:\\Program Files\\Cost\\packingReport.jrxml");
                        JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files\\Cost\\packingsubReport.jrxml");
                        String sqlie = "  SELECT \n"
                                + "        `packingreport`.`ProductionID` AS `ProductionID`,\n"
                                + "        `packingreport`.`packrptid` AS `PackID`,\n"
                                + "        `packingreport`.`date` AS `date`,\n"
                                + "        `packingreport`.`packedproduct` AS `packedproduct`,\n"
                                + "        `packingreport`.`packedqty` AS `packedqty`,\n"
                                + "        `packingreport`.`consumedproduct` AS `consumedproduct`,\n"
                                + "        `new_view`.`Cperunit` AS `consumedprice`,\n"
                                + "        (`packingreport`.`consumedqty` * `new_view`.`Cperunit`) AS `consumedamount`,\n"
                                + "        `packingreport`.`consumedqty` AS `consumedqty`,\n"
                                + "   `packingreport`.`package` AS `package`,\n"
                                + "        `packingreport`.`label` AS `label`,\n"
                                + "       `packingreport`.`packageqty` AS `packamount`,\n"
                                + "        (`packingreport`.`labelprice` * `packingreport`.`labelqty`) AS `labamount`,\n"
                                + "        (`product`.`kgsperpc` * `packingreport`.`packedqty`) AS `quantityKGS`,\n"
                                + "        TRUNCATE((`packingreport`.`manpower` * '35'),\n"
                                + "            2) AS `manamount`,\n"
                                + "         `packingreport`.`labelqty` AS `labelqty`,\n"
                                + "        TRUNCATE(((`packingreport`.`consumedqty` * `new_view`.`Cperunit`) / `packingreport`.`packedqty`),\n"
                                + "            2) AS `procost`,\n"
                                + "        TRUNCATE(((`packingreport`.`packageprice` * `packingreport`.`packageqty`) / `packingreport`.`packedqty`),\n"
                                + "            2) AS `packagecost`,\n"
                                + "        TRUNCATE(((`packingreport`.`manpower` * '35') / `packingreport`.`packedqty`),\n"
                                + "            2) AS `mancost`,\n"
                                + "        TRUNCATE((((((`packingreport`.`labelprice` * `packingreport`.`labelqty`) / `packingreport`.`packedqty`) + ((`packingreport`.`consumedqty` * `new_view`.`Cperunit`) / `packingreport`.`packedqty`)) + ((`packingreport`.`packageprice` * `packingreport`.`packageqty`) / `packingreport`.`packedqty`)) + ((`packingreport`.`manpower` * '35') / `packingreport`.`packedqty`)),\n"
                                + "            2) AS `PackingCost`\n"
                                + "    FROM\n"
                                + "        ((`packingreport`\n"
                                + "        LEFT JOIN `product` ON ((`packingreport`.`packedproduct` = `product`.`product_name`)))\n"
                                + "        LEFT JOIN `new_view` ON ((`new_view`.`Production_ID` = `packingreport`.`ProductionID`)))\n"
                                + " where  packingreport.date ='" + Dispdt + "'\n"
                                + "    ORDER BY `packingreport`.`ProductionID` ";
                        JRDesignQuery NewQuery = new JRDesignQuery();
                        NewQuery.setText(sqlie);
                        jd.setQuery(NewQuery);
                        JasperReport jr = JasperCompileManager.compileReport(jd);
                        JasperReport jsr = JasperCompileManager.compileReport(SUBjd);
                        Map<String, Object> paramsi = new HashMap<>();
//                Map<String, Object> params = new HashMap<>()<String, Object()>;
                        paramsi.put("spar", jsr);

                        JasperPrint jp = JasperFillManager.fillReport(jr, paramsi, connn7);
// paramsi.put("par1", jsr);
//JasperViewer.viewReport(jp, false);
//DISPLAY IN JPANEL
                        BorderLayout layoutPanel1 = new BorderLayout();
                        JPanel panelRPTt1 = new JPanel(layoutPanel1);
                        JRViewer vw = new JRViewer(jp);
                        panelRPTt1.setLayout(new BorderLayout());
                        panelRPTt1.repaint();
                        panelRPTt1.add(vw);
                        panelRPTt1.revalidate();

                        MainPanel.removeAll();
                        MainPanel.add(panelRPTt1);
                        MainPanel.repaint();
                        MainPanel.revalidate();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e.getMessage());
//                        e.printStackTrace();                        
                    }
                } else if (jRadioButton13.isSelected() == true) {
                    try {
                        Connection connn8 = (Connection) (Connection) db_Connection.getInstance();

//                        JasperDesign jd = JRXmlLoader.load("C:\\Users\\Stevoski\\Documents\\Scanned Documents\\Canning\\src\\CostReport.jrxml");
//                        JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport_subreport2.jrxml");
//                  64BIT OS
//                        JasperDesign jd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport.jrxml");
//                        JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport_subreport2.jrxml");
//                  32BIT OS
                        JasperDesign jd = JRXmlLoader.load("C:\\Program Files\\Cost\\packingReport.jrxml");
                        JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files\\Cost\\packingsubReport.jrxml");
//                InputStream jrM1 = getClass().getResourceAsStream("DatetwnReport.jasper");
//                InputStream jSr1 = getClass().getResourceAsStream("DatebtwnReport_rawsubreport.jasper");
//                JasperDesign jd = JRXmlLoader.load(jrM1);
                        String sqlie = "  SELECT \n"
                                + "        `packingreport`.`ProductionID` AS `ProductionID`,\n"
                                + "        `packingreport`.`packrptid` AS `PackID`,\n"
                                + "        `packingreport`.`date` AS `date`,\n"
                                + "        `packingreport`.`packedproduct` AS `packedproduct`,\n"
                                + "        `packingreport`.`packedqty` AS `packedqty`,\n"
                                + "        `packingreport`.`consumedproduct` AS `consumedproduct`,\n"
                                + "        `new_view`.`Cperunit` AS `consumedprice`,\n"
                                + "        (`packingreport`.`consumedqty` * `new_view`.`Cperunit`) AS `consumedamount`,\n"
                                + "        `packingreport`.`consumedqty` AS `consumedqty`,\n"
                                + "   `packingreport`.`package` AS `package`,\n"
                                + "        `packingreport`.`label` AS `label`,\n"
                                + "       `packingreport`.`packageqty` AS `packamount`,\n"
                                + "        (`packingreport`.`labelprice` * `packingreport`.`labelqty`) AS `labamount`,\n"
                                + "        (`product`.`kgsperpc` * `packingreport`.`packedqty`) AS `quantityKGS`,\n"
                                + "        TRUNCATE((`packingreport`.`manpower` * '35'),\n"
                                + "            2) AS `manamount`,\n"
                                + "         `packingreport`.`labelqty` AS `labelqty`,\n"
                                + "        TRUNCATE(((`packingreport`.`consumedqty` * `new_view`.`Cperunit`) / `packingreport`.`packedqty`),\n"
                                + "            2) AS `procost`,\n"
                                + "        TRUNCATE(((`packingreport`.`packageprice` * `packingreport`.`packageqty`) / `packingreport`.`packedqty`),\n"
                                + "            2) AS `packagecost`,\n"
                                + "        TRUNCATE(((`packingreport`.`manpower` * '35') / `packingreport`.`packedqty`),\n"
                                + "            2) AS `mancost`,\n"
                                + "        TRUNCATE((((((`packingreport`.`labelprice` * `packingreport`.`labelqty`) / `packingreport`.`packedqty`) + ((`packingreport`.`consumedqty` * `new_view`.`Cperunit`) / `packingreport`.`packedqty`)) + ((`packingreport`.`packageprice` * `packingreport`.`packageqty`) / `packingreport`.`packedqty`)) + ((`packingreport`.`manpower` * '35') / `packingreport`.`packedqty`)),\n"
                                + "            2) AS `PackingCost`\n"
                                + "    FROM\n"
                                + "        ((`packingreport`\n"
                                + "        LEFT JOIN `product` ON ((`packingreport`.`packedproduct` = `product`.`product_name`)))\n"
                                + "        LEFT JOIN `new_view` ON ((`new_view`.`Production_ID` = `packingreport`.`ProductionID`)))\n"
                                + " where  packingreport.date >='" + prt1 + "' and packingreport.date<='" + prt2 + "'\n"
                                + "    ORDER BY `packingreport`.`ProductionID`";
                        JRDesignQuery NewQuery = new JRDesignQuery();
                        NewQuery.setText(sqlie);
                        jd.setQuery(NewQuery);

                        JasperReport jasperMasterReport = JasperCompileManager.compileReport(jd);

                        JasperReport jsr = JasperCompileManager.compileReport(SUBjd);
                        Map<String, Object> paramsi = new HashMap<>();
//                Map<String, Object> params = new HashMap<>()<String, Object()>;
                        paramsi.put("spar", jsr);

//JasperFillManager.fillReportToFile(jasperMasterReport, parameters, connn);
                        JasperPrint jp = JasperFillManager.fillReport(jasperMasterReport, paramsi, connn8);

//DISPLAY IN JPANEL
                        BorderLayout layoutPanel = new BorderLayout();
                        JPanel panelRPTt = new JPanel(layoutPanel);
                        JRViewer vw = new JRViewer(jp);
                        panelRPTt.setLayout(new BorderLayout());
                        panelRPTt.repaint();
                        panelRPTt.add(vw);
                        panelRPTt.revalidate();

                        MainPanel.removeAll();
                        MainPanel.add(panelRPTt);
                        MainPanel.repaint();
                        MainPanel.revalidate();

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e.getMessage());
//                        e.printStackTrace();
                    }
                } else if (jRadioButton20.isSelected() == true) {
                    try {

                        Connection connn9 = (Connection) (Connection) db_Connection.getInstance();

// JasperDesign jd = JRXmlLoader.load("C:\\Users\\Stevoski\\Documents\\Scanned Documents\\Canning\\src\\newpackage1\\DatebtwnReport.jrxml");
//                  64BIT OS
//                        JasperDesign jd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport.jrxml");
//                        JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport_subreport2.jrxml");
//JasperFillManager.fillReportToFile(jasperMasterReport, parameters, connn);
//  JasperPrint jp = JasperFillManager.fillReport(jasperMasterReport, paramsi, connn);
////                  32BIT OS
                        JasperDesign jd = JRXmlLoader.load("C:\\Program Files\\Cost\\packingReport.jrxml");
                        JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files\\Cost\\packingsubReport.jrxml");
//                InputStream jrM1 = getClass().getResourceAsStream("DatetwnReport.jasper");
//                InputStream jSr1 = getClass().getResourceAsStream("DatebtwnReport_rawsubreport.jasper");
//                JasperDesign jd = JRXmlLoader.load(jrM1);
                        String sqlie = " SELECT \n"
                                + "        `packingreport`.`ProductionID` AS `ProductionID`,\n"
                                + "        `packingreport`.`packrptid` AS `PackID`,\n"
                                + " `new_view`.`voucher_no` AS `voucher_no`,\n"
                                + "        `packingreport`.`date` AS `date`,\n"
                                + "        `packingreport`.`packedproduct` AS `packedproduct`,\n"
                                + "        `packingreport`.`packedqty` AS `packedqty`,\n"
                                + "        `packingreport`.`consumedproduct` AS `consumedproduct`,\n"
                                + "        `new_view`.`Cperunit` AS `consumedprice`,\n"
                                + "        (`packingreport`.`consumedqty` * `new_view`.`Cperunit`) AS `consumedamount`,\n"
                                + "        `packingreport`.`consumedqty` AS `consumedqty`,\n"
                                + "   `packingreport`.`package` AS `package`,\n"
                                + "        `packingreport`.`label` AS `label`,\n"
                                + "       `packingreport`.`packageqty` AS `packamount`,\n"
                                + "        (`packingreport`.`labelprice` * `packingreport`.`labelqty`) AS `labamount`,\n"
                                + "        (`product`.`kgsperpc` * `packingreport`.`packedqty`) AS `quantityKGS`,\n"
                                + "        TRUNCATE((`packingreport`.`manpower` * '35'),\n"
                                + "            2) AS `manamount`,\n"
                                + "         `packingreport`.`labelqty` AS `labelqty`,\n"
                                + "        TRUNCATE(((`packingreport`.`consumedqty` * `new_view`.`Cperunit`) / `packingreport`.`packedqty`),\n"
                                + "            2) AS `procost`,\n"
                                + "        TRUNCATE(((`packingreport`.`packageprice` * `packingreport`.`packageqty`) / `packingreport`.`packedqty`),\n"
                                + "            2) AS `packagecost`,\n"
                                + "        TRUNCATE(((`packingreport`.`manpower` * '35') / `packingreport`.`packedqty`),\n"
                                + "            2) AS `mancost`,\n"
                                + "        TRUNCATE((((((`packingreport`.`labelprice` * `packingreport`.`labelqty`) / `packingreport`.`packedqty`) + ((`packingreport`.`consumedqty` * `new_view`.`Cperunit`) / `packingreport`.`packedqty`)) + ((`packingreport`.`packageprice` * `packingreport`.`packageqty`) / `packingreport`.`packedqty`)) + ((`packingreport`.`manpower` * '35') / `packingreport`.`packedqty`)),\n"
                                + "            2) AS `PackingCost`\n"
                                + "    FROM\n"
                                + "        ((`packingreport`\n"
                                + "        LEFT JOIN `product` ON ((`packingreport`.`packedproduct` = `product`.`product_name`)))\n"
                                + "        LEFT JOIN `new_view` ON ((`new_view`.`Production_ID` = `packingreport`.`ProductionID`)))\n"
                                + "                  where `packingreport`.`ProductionID` ='" + Disid + "' \n"
                                + "    ORDER BY `packingreport`.`ProductionID` ";
                        JRDesignQuery NewQuery = new JRDesignQuery();
                        NewQuery.setText(sqlie);
                        jd.setQuery(NewQuery);

                        JasperReport jasperMasterReport = JasperCompileManager.compileReport(jd);
                        JasperReport jsr = JasperCompileManager.compileReport(SUBjd);

//         JasperReport jasperMasterReport = JasperCompileManager.compileReport(masterReportSource);
//JasperReport jasperSubReport = JasperCompileManager.compileReport(SUBjd);
//
//Map<String, Object> parameters = new HashMap()<String, Object>;
//parameters.put("subreportParameter", jasperSubReport);
//
//JasperFillManager.fillReportToFile(jasperMasterReport, parameters, connection);
                        Map<String, Object> paramsi = new HashMap<>();
//                Map<String, Object> params = new HashMap<>()<String, Object()>;
                        paramsi.put("spar", jsr);

//JasperFillManager.fillReportToFile(jasperMasterReport, parameters, connn);
                        JasperPrint jp = JasperFillManager.fillReport(jasperMasterReport, paramsi, connn9);

//DISPLAY IN JPANEL
                        BorderLayout layoutPanel = new BorderLayout();
                        JPanel panelRPTt = new JPanel(layoutPanel);
                        JRViewer vw = new JRViewer(jp);
                        panelRPTt.setLayout(new BorderLayout());
                        panelRPTt.repaint();
                        panelRPTt.add(vw);
                        panelRPTt.revalidate();

                        MainPanel.removeAll();
                        MainPanel.add(panelRPTt);
                        MainPanel.repaint();
                        MainPanel.revalidate();

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e.getMessage());
//                        e.printStackTrace();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please Select an Option");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
//                e.printStackTrace();
            }
        } else {
            try {

                if (jRadioButton8.isSelected() == true) {

                    try {

                        Connection connn0 = (Connection) db_Connection.getInstance();
// JasperDesign jd = JRXmlLoader.load("C:\\Users\\Stevoski\\Documents\\Scanned Documents\\Canning\\src\\newpackage1\\DatebtwnReport.jrxml");
//                  64BIT OS
//                        JasperDesign jd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport.jrxml");
//                        JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport_subreport2.jrxml");
//JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport_subreport2.jrxml");
//                  32BIT OS
                        JasperDesign jd = JRXmlLoader.load("C:\\Program Files\\Cost\\packingReport.jrxml");
                        JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files\\Cost\\packingsubReport.jrxml");

//                InputStream jrM1 = getClass().getResourceAsStream("DatetwnReport.jasper");
//                InputStream jSr1 = getClass().getResourceAsStream("DatebtwnReport_rawsubreport.jasper");
//                JasperDesign jd = JRXmlLoader.load(jrM1);
                        String sqlie = "  SELECT \n"
                                + "        `packingreport`.`ProductionID` AS `ProductionID`,\n"
                                + "        `packingreport`.`packrptid` AS `PackID`,\n"
                                + "        `packingreport`.`date` AS `date`,\n"
                                + "        `packingreport`.`packedproduct` AS `packedproduct`,\n"
                                + "        `packingreport`.`packedqty` AS `packedqty`,\n"
                                + "        `packingreport`.`consumedproduct` AS `consumedproduct`,\n"
                                + "        `new_view`.`Cperunit` AS `consumedprice`,\n"
                                + "        (`packingreport`.`consumedqty` * `new_view`.`Cperunit`) AS `consumedamount`,\n"
                                + "        `packingreport`.`consumedqty` AS `consumedqty`,\n"
                                + "   `packingreport`.`package` AS `package`,\n"
                                + "        `packingreport`.`label` AS `label`,\n"
                                + "       `packingreport`.`packageqty` AS `packamount`,\n"
                                + "        (`packingreport`.`labelprice` * `packingreport`.`labelqty`) AS `labamount`,\n"
                                + "        (`product`.`kgsperpc` * `packingreport`.`packedqty`) AS `quantityKGS`,\n"
                                + "        TRUNCATE((`packingreport`.`manpower` * '35'),\n"
                                + "            2) AS `manamount`,\n"
                                + "         `packingreport`.`labelqty` AS `labelqty`,\n"
                                + "        TRUNCATE(((`packingreport`.`consumedqty` * `new_view`.`Cperunit`) / `packingreport`.`packedqty`),\n"
                                + "            2) AS `procost`,\n"
                                + "        TRUNCATE(((`packingreport`.`packageprice` * `packingreport`.`packageqty`) / `packingreport`.`packedqty`),\n"
                                + "            2) AS `packagecost`,\n"
                                + "        TRUNCATE(((`packingreport`.`manpower` * '35') / `packingreport`.`packedqty`),\n"
                                + "            2) AS `mancost`,\n"
                                + "        TRUNCATE((((((`packingreport`.`labelprice` * `packingreport`.`labelqty`) / `packingreport`.`packedqty`) + ((`packingreport`.`consumedqty` * `new_view`.`Cperunit`) / `packingreport`.`packedqty`)) + ((`packingreport`.`packageprice` * `packingreport`.`packageqty`) / `packingreport`.`packedqty`)) + ((`packingreport`.`manpower` * '35') / `packingreport`.`packedqty`)),\n"
                                + "            2) AS `PackingCost`\n"
                                + "    FROM\n"
                                + "        ((`packingreport`\n"
                                + "        LEFT JOIN `product` ON ((`packingreport`.`packedproduct` = `product`.`product_name`)))\n"
                                + "        LEFT JOIN `new_view` ON ((`new_view`.`Production_ID` = `packingreport`.`ProductionID`)))\n"
                                + "                  where `new_view`.`voucher_no` ='" + Disppl + "' and `packingreport`.`factory` ='" + access + "'\n"
                                + "    ORDER BY `packingreport`.`ProductionID` ";
                        JRDesignQuery NewQuery = new JRDesignQuery();
                        NewQuery.setText(sqlie);
                        jd.setQuery(NewQuery);

                        JasperReport jasperMasterReport = JasperCompileManager.compileReport(jd);
                        JasperReport jsr = JasperCompileManager.compileReport(SUBjd);

//         JasperReport jasperMasterReport = JasperCompileManager.compileReport(masterReportSource);
//JasperReport jasperSubReport = JasperCompileManager.compileReport(SUBjd);
//
//Map<String, Object> parameters = new HashMap()<String, Object>;
//parameters.put("subreportParameter", jasperSubReport);
//
//JasperFillManager.fillReportToFile(jasperMasterReport, parameters, connection);
                        Map<String, Object> paramsi = new HashMap<>();
//                Map<String, Object> params = new HashMap<>()<String, Object()>;
                        paramsi.put("spar", jsr);

//JasperFillManager.fillReportToFile(jasperMasterReport, parameters, connn);
                        JasperPrint jp = JasperFillManager.fillReport(jasperMasterReport, paramsi, connn0);

//DISPLAY IN JPANEL
                        BorderLayout layoutPanel = new BorderLayout();
                        JPanel panelRPTt = new JPanel(layoutPanel);
                        JRViewer vw = new JRViewer(jp);
                        panelRPTt.setLayout(new BorderLayout());
                        panelRPTt.repaint();
                        panelRPTt.add(vw);
                        panelRPTt.revalidate();

                        MainPanel.removeAll();
                        MainPanel.add(panelRPTt);
                        MainPanel.repaint();
                        MainPanel.revalidate();

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e.getMessage());
//                        e.printStackTrace();
                    }
                } else if (jRadioButton9.isSelected() == true) {
                    try {

                        Connection conn1 = (Connection) db_Connection.getInstance();
//                        JasperDesign jd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport.jrxml");
//                        JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport_subreport2.jrxml");

//64BIT OS
//                        JasperDesign jd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport.jrxml");
//                        JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport_subreport2.jrxml");
//32 BIT OS
                        JasperDesign jd = JRXmlLoader.load("C:\\Program Files\\Cost\\packingReport.jrxml");
                        JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files\\Cost\\packingsubReport.jrxml");
                        String sqlie = " SELECT \n"
                                + "        `packingreport`.`ProductionID` AS `ProductionID`,\n"
                                + "        `packingreport`.`packrptid` AS `PackID`,\n"
                                + "        `packingreport`.`date` AS `date`,\n"
                                + "        `packingreport`.`packedproduct` AS `packedproduct`,\n"
                                + "        `packingreport`.`packedqty` AS `packedqty`,\n"
                                + "        `packingreport`.`consumedproduct` AS `consumedproduct`,\n"
                                + "        `new_view`.`Cperunit` AS `consumedprice`,\n"
                                + "        (`packingreport`.`consumedqty` * `new_view`.`Cperunit`) AS `consumedamount`,\n"
                                + "        `packingreport`.`consumedqty` AS `consumedqty`,\n"
                                + "   `packingreport`.`package` AS `package`,\n"
                                + "        `packingreport`.`label` AS `label`,\n"
                                + "       `packingreport`.`packageqty` AS `packamount`,\n"
                                + "        (`packingreport`.`labelprice` * `packingreport`.`labelqty`) AS `labamount`,\n"
                                + "        (`product`.`kgsperpc` * `packingreport`.`packedqty`) AS `quantityKGS`,\n"
                                + "        TRUNCATE((`packingreport`.`manpower` * '35'),\n"
                                + "            2) AS `manamount`,\n"
                                + "         `packingreport`.`labelqty` AS `labelqty`,\n"
                                + "        TRUNCATE(((`packingreport`.`consumedqty` * `new_view`.`Cperunit`) / `packingreport`.`packedqty`),\n"
                                + "            2) AS `procost`,\n"
                                + "        TRUNCATE(((`packingreport`.`packageprice` * `packingreport`.`packageqty`) / `packingreport`.`packedqty`),\n"
                                + "            2) AS `packagecost`,\n"
                                + "        TRUNCATE(((`packingreport`.`manpower` * '35') / `packingreport`.`packedqty`),\n"
                                + "            2) AS `mancost`,\n"
                                + "        TRUNCATE((((((`packingreport`.`labelprice` * `packingreport`.`labelqty`) / `packingreport`.`packedqty`) + ((`packingreport`.`consumedqty` * `new_view`.`Cperunit`) / `packingreport`.`packedqty`)) + ((`packingreport`.`packageprice` * `packingreport`.`packageqty`) / `packingreport`.`packedqty`)) + ((`packingreport`.`manpower` * '35') / `packingreport`.`packedqty`)),\n"
                                + "            2) AS `PackingCost`\n"
                                + "    FROM\n"
                                + "        ((`packingreport`\n"
                                + "        LEFT JOIN `product` ON ((`packingreport`.`packedproduct` = `product`.`product_name`)))\n"
                                + "        LEFT JOIN `new_view` ON ((`new_view`.`Production_ID` = `packingreport`.`ProductionID`)))\n"
                                + " where  packingreport.date ='" + Dispdt + "' and `packingreport`.`factory` ='" + access + "'\n"
                                + "    ORDER BY `packingreport`.`ProductionID` ";
                        JRDesignQuery NewQuery = new JRDesignQuery();
                        NewQuery.setText(sqlie);
                        jd.setQuery(NewQuery);
                        JasperReport jr = JasperCompileManager.compileReport(jd);
                        JasperReport jsr = JasperCompileManager.compileReport(SUBjd);
                        Map<String, Object> paramsi = new HashMap<>();

                        paramsi.put("spar", jsr);

                        JasperPrint jp = JasperFillManager.fillReport(jr, paramsi, conn1);

//DISPLAY IN JPANEL
                        BorderLayout layoutPanel1 = new BorderLayout();
                        JPanel panelRPTt1 = new JPanel(layoutPanel1);
                        JRViewer vw = new JRViewer(jp);
                        panelRPTt1.setLayout(new BorderLayout());
                        panelRPTt1.repaint();
                        panelRPTt1.add(vw);
                        panelRPTt1.revalidate();

                        MainPanel.removeAll();
                        MainPanel.add(panelRPTt1);
                        MainPanel.repaint();
                        MainPanel.revalidate();

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e.getMessage());
//                                                e.printStackTrace();

                    }

                } else if (jRadioButton13.isSelected() == true) {
                    try {
                        Connection conn2 = (Connection) db_Connection.getInstance();

//                        JasperDesign jd = JRXmlLoader.load("C:\\Users\\Stevoski\\Documents\\Scanned Documents\\Canning\\src\\CostReport.jrxml");
//                        JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport_subreport2.jrxml");
//                  64BIT OS
//                        JasperDesign jd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport.jrxml");
//                        JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport_subreport2.jrxml");
//                  32BIT OS
                        JasperDesign jd = JRXmlLoader.load("C:\\Program Files\\Cost\\packingReport.jrxml");
                        JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files\\Cost\\packingsubReport.jrxml");
//                InputStream jrM1 = getClass().getResourceAsStream("DatetwnReport.jasper");
//                InputStream jSr1 = getClass().getResourceAsStream("DatebtwnReport_rawsubreport.jasper");
//                JasperDesign jd = JRXmlLoader.load(jrM1);
                        String sqlie = "  SELECT \n"
                                + "        `packingreport`.`ProductionID` AS `ProductionID`,\n"
                                + "        `packingreport`.`packrptid` AS `PackID`,\n"
                                + "        `packingreport`.`date` AS `date`,\n"
                                + "        `packingreport`.`packedproduct` AS `packedproduct`,\n"
                                + "        `packingreport`.`packedqty` AS `packedqty`,\n"
                                + "        `packingreport`.`consumedproduct` AS `consumedproduct`,\n"
                                + "        `new_view`.`Cperunit` AS `consumedprice`,\n"
                                + "        (`packingreport`.`consumedqty` * `new_view`.`Cperunit`) AS `consumedamount`,\n"
                                + "        `packingreport`.`consumedqty` AS `consumedqty`,\n"
                                + "   `packingreport`.`package` AS `package`,\n"
                                + "        `packingreport`.`label` AS `label`,\n"
                                + "       `packingreport`.`packageqty` AS `packamount`,\n"
                                + "        (`packingreport`.`labelprice` * `packingreport`.`labelqty`) AS `labamount`,\n"
                                + "        (`product`.`kgsperpc` * `packingreport`.`packedqty`) AS `quantityKGS`,\n"
                                + "        TRUNCATE((`packingreport`.`manpower` * '35'),\n"
                                + "            2) AS `manamount`,\n"
                                + "         `packingreport`.`labelqty` AS `labelqty`,\n"
                                + "        TRUNCATE(((`packingreport`.`consumedqty` * `new_view`.`Cperunit`) / `packingreport`.`packedqty`),\n"
                                + "            2) AS `procost`,\n"
                                + "        TRUNCATE(((`packingreport`.`packageprice` * `packingreport`.`packageqty`) / `packingreport`.`packedqty`),\n"
                                + "            2) AS `packagecost`,\n"
                                + "        TRUNCATE(((`packingreport`.`manpower` * '35') / `packingreport`.`packedqty`),\n"
                                + "            2) AS `mancost`,\n"
                                + "        TRUNCATE((((((`packingreport`.`labelprice` * `packingreport`.`labelqty`) / `packingreport`.`packedqty`) + ((`packingreport`.`consumedqty` * `new_view`.`Cperunit`) / `packingreport`.`packedqty`)) + ((`packingreport`.`packageprice` * `packingreport`.`packageqty`) / `packingreport`.`packedqty`)) + ((`packingreport`.`manpower` * '35') / `packingreport`.`packedqty`)),\n"
                                + "            2) AS `PackingCost`\n"
                                + "    FROM\n"
                                + "        ((`packingreport`\n"
                                + "        LEFT JOIN `product` ON ((`packingreport`.`packedproduct` = `product`.`product_name`)))\n"
                                + "        LEFT JOIN `new_view` ON ((`new_view`.`Production_ID` = `packingreport`.`ProductionID`)))\n"
                                + " where `packingreport`.`factory` ='" + access + "' and packingreport.date >='" + prt1 + "' and packingreport.date<='" + prt2 + "'\n"
                                + "    ORDER BY `packingreport`.`ProductionID` ";
                        JRDesignQuery NewQuery = new JRDesignQuery();
                        NewQuery.setText(sqlie);
                        jd.setQuery(NewQuery);

                        JasperReport jasperMasterReport = JasperCompileManager.compileReport(jd);

                        JasperReport jsr = JasperCompileManager.compileReport(SUBjd);
                        Map<String, Object> paramsi = new HashMap<>();
//                Map<String, Object> params = new HashMap<>()<String, Object()>;
                        paramsi.put("spar", jsr);

//JasperFillManager.fillReportToFile(jasperMasterReport, parameters, connn);
                        JasperPrint jp = JasperFillManager.fillReport(jasperMasterReport, paramsi, conn2);

//DISPLAY IN JPANEL
                        BorderLayout layoutPanel = new BorderLayout();
                        JPanel panelRPTt = new JPanel(layoutPanel);
                        JRViewer vw = new JRViewer(jp);
                        panelRPTt.setLayout(new BorderLayout());
                        panelRPTt.repaint();
                        panelRPTt.add(vw);
                        panelRPTt.revalidate();

                        MainPanel.removeAll();
                        MainPanel.add(panelRPTt);
                        MainPanel.repaint();
                        MainPanel.revalidate();

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e.getMessage());
//                        e.printStackTrace();
                    }
                } else if (jRadioButton20.isSelected() == true) {

                    try {

                        Connection conn3 = (Connection) db_Connection.getInstance();

// JasperDesign jd = JRXmlLoader.load("C:\\Users\\Stevoski\\Documents\\Scanned Documents\\Canning\\src\\newpackage1\\DatebtwnReport.jrxml");
//                  64BIT OS
//                        JasperDesign jd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport.jrxml");
//                        JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport_subreport2.jrxml");
//JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport_subreport2.jrxml");
//                  32BIT OS
                        JasperDesign jd = JRXmlLoader.load("C:\\Program Files\\Cost\\packingReport.jrxml");
                        JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files\\Cost\\packingsubReport.jrxml");

//                InputStream jrM1 = getClass().getResourceAsStream("DatetwnReport.jasper");
//                InputStream jSr1 = getClass().getResourceAsStream("DatebtwnReport_rawsubreport.jasper");
//                JasperDesign jd = JRXmlLoader.load(jrM1);
                        String sqlie = "  SELECT \n"
                                + "        `packingreport`.`ProductionID` AS `ProductionID`,\n"
                                + "        `packingreport`.`packrptid` AS `PackID`,\n"
                                + "        `packingreport`.`date` AS `date`,\n"
                                + "        `packingreport`.`packedproduct` AS `packedproduct`,\n"
                                + "        `packingreport`.`packedqty` AS `packedqty`,\n"
                                + "        `packingreport`.`consumedproduct` AS `consumedproduct`,\n"
                                + "        `new_view`.`Cperunit` AS `consumedprice`,\n"
                                + "        (`packingreport`.`consumedqty` * `new_view`.`Cperunit`) AS `consumedamount`,\n"
                                + "        `packingreport`.`consumedqty` AS `consumedqty`,\n"
                                + "   `packingreport`.`package` AS `package`,\n"
                                + "        `packingreport`.`label` AS `label`,\n"
                                + "       `packingreport`.`packageqty` AS `packamount`,\n"
                                + "        (`packingreport`.`labelprice` * `packingreport`.`labelqty`) AS `labamount`,\n"
                                + "        (`product`.`kgsperpc` * `packingreport`.`packedqty`) AS `quantityKGS`,\n"
                                + "        TRUNCATE((`packingreport`.`manpower` * '35'),\n"
                                + "            2) AS `manamount`,\n"
                                + "         `packingreport`.`labelqty` AS `labelqty`,\n"
                                + "        TRUNCATE(((`packingreport`.`consumedqty` * `new_view`.`Cperunit`) / `packingreport`.`packedqty`),\n"
                                + "            2) AS `procost`,\n"
                                + "        TRUNCATE(((`packingreport`.`packageprice` * `packingreport`.`packageqty`) / `packingreport`.`packedqty`),\n"
                                + "            2) AS `packagecost`,\n"
                                + "        TRUNCATE(((`packingreport`.`manpower` * '35') / `packingreport`.`packedqty`),\n"
                                + "            2) AS `mancost`,\n"
                                + "        TRUNCATE((((((`packingreport`.`labelprice` * `packingreport`.`labelqty`) / `packingreport`.`packedqty`) + ((`packingreport`.`consumedqty` * `new_view`.`Cperunit`) / `packingreport`.`packedqty`)) + ((`packingreport`.`packageprice` * `packingreport`.`packageqty`) / `packingreport`.`packedqty`)) + ((`packingreport`.`manpower` * '35') / `packingreport`.`packedqty`)),\n"
                                + "            2) AS `PackingCost`\n"
                                + "    FROM\n"
                                + "        ((`packingreport`\n"
                                + "        LEFT JOIN `product` ON ((`packingreport`.`packedproduct` = `product`.`product_name`)))\n"
                                + "        LEFT JOIN `new_view` ON ((`new_view`.`Production_ID` = `packingreport`.`ProductionID`)))\n"
                                + "                  where `packingreport`.`ProductionID` ='" + Disid + "' and `packingreport`.`factory` ='" + access + "'\n"
                                + "    ORDER BY `packingreport`.`ProductionID` ";
                        JRDesignQuery NewQuery = new JRDesignQuery();
                        NewQuery.setText(sqlie);
                        jd.setQuery(NewQuery);

                        JasperReport jasperMasterReport = JasperCompileManager.compileReport(jd);
                        JasperReport jsr = JasperCompileManager.compileReport(SUBjd);

//         JasperReport jasperMasterReport = JasperCompileManager.compileReport(masterReportSource);
//JasperReport jasperSubReport = JasperCompileManager.compileReport(SUBjd);
//
//Map<String, Object> parameters = new HashMap()<String, Object>;
//parameters.put("subreportParameter", jasperSubReport);
//
//JasperFillManager.fillReportToFile(jasperMasterReport, parameters, connection);
                        Map<String, Object> paramsi = new HashMap<>();
//                Map<String, Object> params = new HashMap<>()<String, Object()>;
                        paramsi.put("spar", jsr);

//JasperFillManager.fillReportToFile(jasperMasterReport, parameters, connn);
                        JasperPrint jp = JasperFillManager.fillReport(jasperMasterReport, paramsi, conn3);

//DISPLAY IN JPANEL
                        BorderLayout layoutPanel = new BorderLayout();
                        JPanel panelRPTt = new JPanel(layoutPanel);
                        JRViewer vw = new JRViewer(jp);
                        panelRPTt.setLayout(new BorderLayout());
                        panelRPTt.repaint();
                        panelRPTt.add(vw);
                        panelRPTt.revalidate();

                        MainPanel.removeAll();
                        MainPanel.add(panelRPTt);
                        MainPanel.repaint();
                        MainPanel.revalidate();

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e.getMessage());
//                        e.printStackTrace();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please Select an Option");
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
//                e.printStackTrace();
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton40ActionPerformed

    private void jTextField41ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField41ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField41ActionPerformed

    private void jMenu5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu5ActionPerformed
        if ("ADMINISTRATOR".equals(jTextLogin.getText())) {
            jMenuItem11.setEnabled(true);
            jMenuItem10.setEnabled(true);
            jMenu5.setEnabled(true);

        } else {
            jMenu5.setEnabled(false);
            jMenuItem11.setEnabled(false);
            jMenuItem10.setEnabled(false);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu5ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        MainPanel.removeAll();
        MainPanel.add(UsageAnalysis);
        MainPanel.repaint();
        MainPanel.revalidate();

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jButton58ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton58ActionPerformed
        warehouseLoad();
    }//GEN-LAST:event_jButton58ActionPerformed

    public void warehouseLoad() throws HeadlessException {
        String Warevoucher = jTextWarehouse.getText();
        String Waredate = ((JTextField) jDateWarehouse.getDateEditor().getUiComponent()).getText();
        String WareProd = jProdWarehouse.getText();
        String Wareaccess = jTextLogin.getText();
        if (jRadioButton15.isSelected() == true) {
            //RADIO BUTTON DATE
            try {
                DefaultTableModel modelWare = (DefaultTableModel) jTable26.getModel();
                DefaultTableModel modelWarePack = (DefaultTableModel) jTable27.getModel();
                try {
                    int z4 = modelWare.getRowCount();
                    for (int lu3 = 0; lu3 <= z4; ++lu3) {
                        modelWare.removeRow(0);
                    }
                } catch (Exception e) {
                }
                try {
                    Connection con19 = (Connection) db_Connection.getInstance();
                    Statement stmt4;
                    stmt4 = con19.createStatement();
                    String quer = "SELECT * FROM new_view where date = '" + Waredate + "';";
                    rs = stmt4.executeQuery(quer);

                    while (rs.next()) {
                        modelWare.addRow(new Object[]{rs.getString("Production_ID"), rs.getString("date"), rs.getString("product"), rs.getDouble("quantity")});

//                        modelWarePack.addRow(new Object[]{rs.getString("production_id"), rs.getString("date"), rs.getString("can_name"), rs.getDouble("no_of_cans"), rs.getString("label_name"), rs.getDouble("no_of_labels"), rs.getDouble("manpower")});
                    }
                    stmt4.close();
                    try {
                        int zi4 = modelWarePack.getRowCount();
                        for (int lui3 = 0; lui3 <= zi4; ++lui3) {
                            modelWarePack.removeRow(0);

                        }
                    } catch (Exception e) {
                    }
                    try {
//                    Class.forName("com.mysql.jdbc.Driver").newInstance();
//                    Connection conpkg = (Connection) DriverManager.getConnection("jdbc:mysql://192.168.1.190:3306/canning?zeroDateTimeBehavior=convertToNull", "weru", "steve23741997");
                        try (PreparedStatement stpkg = db_Connection.getInstance().prepareStatement("SELECT * FROM amounts where date = '" + Waredate + "'")) {
//                    Statement stpkg= conpkg.createStatement();
                            String querstpkg = "SELECT * FROM package1 where date = '" + Waredate + "';";
                            rs = stpkg.executeQuery(querstpkg);

                            while (rs.next()) {
                                modelWarePack.addRow(new Object[]{rs.getString("production_id"), rs.getString("date"), rs.getString("can_name"), rs.getDouble("no_of_cans"), rs.getString("label_name"), rs.getDouble("no_of_labels"), rs.getDouble("packagemanpower")});

                            }
                            stpkg.close();
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage());
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        } else if (jRadioButton16.isSelected() == true) //voucher_no
        {
            try {
                DefaultTableModel modelWare = (DefaultTableModel) jTable26.getModel();
                DefaultTableModel modelWarePack = (DefaultTableModel) jTable27.getModel();

                try {
                    int z4 = modelWare.getRowCount();
                    for (int lu3 = 0; lu3 <= z4; ++lu3) {
                        modelWare.removeRow(0);
                    }

                } catch (Exception e) {
                }
                try {

                    Connection con19 = (Connection) db_Connection.getInstance();
                    try (Statement stmt4 = con19.createStatement()) {
                        String quer = "SELECT * FROM new_view where voucher_no = '" + Warevoucher + "';";
                        rs = stmt4.executeQuery(quer);

                        while (rs.next()) {
                            modelWare.addRow(new Object[]{rs.getString("Production_ID"), rs.getString("date"), rs.getString("product"), rs.getDouble("quantity")});

//                        modelWarePack.addRow(new Object[]{rs.getString("production_id"), rs.getString("date"), rs.getString("can_name"), rs.getDouble("no_of_cans"), rs.getString("label_name"), rs.getDouble("no_of_labels"), rs.getDouble("manpower")});
                        }
                    }
                    try {
                        int zi4 = modelWarePack.getRowCount();
                        for (int lui3 = 0; lui3 <= zi4; ++lui3) {
                            modelWarePack.removeRow(0);

                        }
                    } catch (Exception e) {
                    }
                    try {
//                    Statement stpkg= conpkg.createStatement();
                        try (PreparedStatement stpkg = db_Connection.getInstance().prepareStatement("SELECT * FROM amounts where date = '" + Waredate + "'")) {
                            //                    Statement stpkg= conpkg.createStatement();
                            String querstpkg = "SELECT * FROM package1 where voucher_no = '" + Warevoucher + "';";
                            rs = stpkg.executeQuery(querstpkg);

                            while (rs.next()) {
                                modelWarePack.addRow(new Object[]{rs.getString("production_id"), rs.getString("date"), rs.getString("can_name"), rs.getDouble("no_of_cans"), rs.getString("label_name"), rs.getDouble("no_of_labels"), rs.getDouble("packagemanpower")});

                            }
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage());
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }

        } else if (jRadioButton17.isSelected() == true) //Production id
        {

            try {
                DefaultTableModel modelWare = (DefaultTableModel) jTable26.getModel();
                DefaultTableModel modelWarePack = (DefaultTableModel) jTable27.getModel();

                try {
                    int z4 = modelWare.getRowCount();
                    for (int lu3 = 0; lu3 <= z4; ++lu3) {
                        modelWare.removeRow(0);
                    }

                } catch (Exception e) {
                }
                try {

                    Connection con19 = (Connection) db_Connection.getInstance();
                    try (Statement stmt4 = con19.createStatement()) {
                        String quer = "SELECT * FROM packed_product where packed_productid = '" + WareProd + "';";
                        rs = stmt4.executeQuery(quer);

                        while (rs.next()) {
                            modelWare.addRow(new Object[]{rs.getString("packed_productid"), rs.getString("date"), rs.getString("packed_product"), rs.getDouble("packed_qty")});

//                        modelWarePack.addRow(new Object[]{rs.getString("production_id"), rs.getString("date"), rs.getString("can_name"), rs.getDouble("no_of_cans"), rs.getString("label_name"), rs.getDouble("no_of_labels"), rs.getDouble("manpower")});
                        }
                    }
                    try {
                        int zi4 = modelWarePack.getRowCount();
                        for (int lui3 = 0; lui3 <= zi4; ++lui3) {
                            modelWarePack.removeRow(0);

                        }
                    } catch (Exception e) {
                    }
                    try {
//                    Class.forName("com.mysql.jdbc.Driver").newInstance();
//                    Connection conpkg = (Connection) DriverManager.getConnection("jdbc:mysql://192.168.1.190:3306/canning?zeroDateTimeBehavior=convertToNull", "weru", "steve23741997");
                        try (PreparedStatement stpkg = db_Connection.getInstance().prepareStatement("SELECT * FROM packed_product where date = '" + Waredate + "'")) {
//                    Statement stpkg= conpkg.createStatement();
                            String querstpkg = "SELECT * FROM product_wip where production_id = '" + WareProd + "';";
                            rs = stpkg.executeQuery(querstpkg);

                            while (rs.next()) {
                                modelWarePack.addRow(new Object[]{rs.getString("production_id"), rs.getString("date"), rs.getString("carton"), rs.getDouble("carton_qty"), rs.getString("label"), rs.getDouble("label_qty"), rs.getDouble("manpower_hrs")});

                            }
                            stpkg.close();
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage());
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }

            try {
                DefaultTableModel modelWare = (DefaultTableModel) jTable26.getModel();
                DefaultTableModel modelWarePack = (DefaultTableModel) jTable27.getModel();

                try {
                    int z4 = modelWare.getRowCount();
                    for (int lu3 = 0; lu3 <= z4; ++lu3) {
                        modelWare.removeRow(0);
                    }

                } catch (Exception e) {
                }
                try {

                    Connection con19 = (Connection) db_Connection.getInstance();
                    try (Statement stmt4 = con19.createStatement()) {
                        String quer = "SELECT * FROM new_view where production_id = '" + WareProd + "';";
                        rs = stmt4.executeQuery(quer);

                        while (rs.next()) {
                            modelWare.addRow(new Object[]{rs.getString("Production_ID"), rs.getString("date"), rs.getString("product"), rs.getDouble("quantity")});

//                        modelWarePack.addRow(new Object[]{rs.getString("production_id"), rs.getString("date"), rs.getString("can_name"), rs.getDouble("no_of_cans"), rs.getString("label_name"), rs.getDouble("no_of_labels"), rs.getDouble("manpower")});
                        }
                    }
                    try {
                        int zi4 = modelWarePack.getRowCount();
                        for (int lui3 = 0; lui3 <= zi4; ++lui3) {
                            modelWarePack.removeRow(0);

                        }
                    } catch (Exception e) {
                    }
                    try {
//                    Class.forName("com.mysql.jdbc.Driver").newInstance();
//                    Connection conpkg = (Connection) DriverManager.getConnection("jdbc:mysql://192.168.1.190:3306/canning?zeroDateTimeBehavior=convertToNull", "weru", "steve23741997");
                        try (PreparedStatement stpkg = db_Connection.getInstance().prepareStatement("SELECT * FROM amounts where date = '" + Waredate + "'")) {
//                    Statement stpkg= conpkg.createStatement();
                            String querstpkg = "SELECT * FROM package1 where production_id = '" + WareProd + "';";
                            rs = stpkg.executeQuery(querstpkg);

                            while (rs.next()) {
                                modelWarePack.addRow(new Object[]{rs.getString("production_id"), rs.getString("date"), rs.getString("can_name"), rs.getDouble("no_of_cans"), rs.getString("label_name"), rs.getDouble("no_of_labels"), rs.getDouble("packagemanpower")});

                            }
                            stpkg.close();
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage());
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }

        } else {
            JOptionPane.showMessageDialog(null, "Invalid Entry or Please Select An Option", "message", 2);

        }

        // TODO add your handling code here:
    }

    private void jButton59ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton59ActionPerformed
        String Waredater = ((JTextField) warehousiing_date.getDateEditor().getUiComponent()).getText();
        String wareid1 = jTextField7.getText();
        Integer wareid = Integer.valueOf(wareid1);
        String factoe = jTextLogin.getText();
        String Warepqty = jTextField114.getText();
        Double pty = Double.valueOf(Warepqty);
//        String Waremanp = jTextField114.getText();
//        Double manpa = Double.valueOf(Waremanp);
        String Warelqty = jTextField115.getText();
        Double lty = Double.valueOf(Warelqty);
        String produsto = jTextField109.getText();
        String pqty = jTextField8.getText();
        Double pqty1 = Double.valueOf(pqty);
        String Warepid = jTextField117.getText();
        Integer vid = Integer.valueOf(Warepid);
        String waregrp = jTextField110.getText();
        String warepcg = (String) jComboBox33.getSelectedItem();
        String warelbl = (String) jComboBox34.getSelectedItem();
        String dwu = (String) jComboBox33.getSelectedItem(); //label name   
        String wud = (String) jComboBox34.getSelectedItem();
        String cperunita = null;
//               
        try {
            PreparedStatement pscper = db_Connection.getInstance().prepareStatement("SELECT * FROM new_view where product='" + dwu + "'");
            try {
                rs = pscper.executeQuery();
                while (rs.next()) {
                    String gter = rs.getString("cperunit");

                    cperunita = gter;
                }

                try {
                    PreparedStatement pslLy = db_Connection.getInstance().prepareStatement("SELECT * FROM carton_trays where tray_name='" + dwu + "'");
                    try {
                        rs = pslLy.executeQuery();
                        while (rs.next()) {
                            jTextField134.setText(rs.getString("total_tray_price"));
                        }
                        try {
                            PreparedStatement cartonia = db_Connection.getInstance().prepareStatement("SELECT * FROM package where label_name='" + wud + "'");
                            try {
                                rs = cartonia.executeQuery();
                                while (rs.next()) {
                                    jTextField135.setText(rs.getString("price_per_label"));
                                }
                                try {
                                    String quatoo = jTextField134.getText();
                                    Double plryce = Double.valueOf(quatoo);
                                    String ctsn = jTextField135.getText();
                                    Double caton = Double.valueOf(ctsn);
                                    try {
                                        try (PreparedStatement wps4 = db_Connection.getInstance().prepareStatement("INSERT INTO product_wip(main_wh_id, warehouse, product,label,label_qty,production_id,label_price,carton,carton_price,carton_qty,product_qty)"
                                                + "values(?,?,?,?,?,?,?,?,?,?,?)")) {
                                            wps4.setInt(1, wareid);
                                            wps4.setString(2, factoe);
                                            wps4.setString(3, produsto);
                                            wps4.setString(4, warelbl);
                                            wps4.setDouble(5, lty);
                                            wps4.setInt(6, vid);
                                            wps4.setDouble(7, caton);
                                            wps4.setString(8, warepcg);
                                            wps4.setDouble(9, plryce);
                                            wps4.setDouble(10, pty);
                                            wps4.setDouble(11, pqty1);

                                            wps4.executeUpdate();
                                            JOptionPane.showMessageDialog(null, "The data was successfully added to the Database!");
                                            try {
                                                DefaultTableModel wmodel = (DefaultTableModel) jTable27.getModel();
                                                try {
                                                    int e3 = wmodel.getRowCount();
                                                    for (int eu3 = 0; eu3 <= e3; ++eu3) {
                                                        wmodel.removeRow(0);
                                                    }
                                                } catch (Exception e) {
                                                }
                                                try (PreparedStatement psew = db_Connection.getInstance().prepareStatement("SELECT * FROM wip_rpt where date = '" + Waredater + "';")) {
                                                    rs = psew.executeQuery();
                                                    while (rs.next()) {
                                                        wmodel.addRow(new Object[]{rs.getInt("production_id"), rs.getString("date"), rs.getString("product"), rs.getString("product_qty"), rs.getString("label"), rs.getDouble("label_qty"), rs.getDouble("manpower"), rs.getString("carton"), rs.getDouble("carton_qty")});
                                                    }
                                                    rs.close();
                                                    psew.close();
                                                } catch (Exception e) {
                                                    e.printStackTrace();
                                                    JOptionPane.showMessageDialog(this, "Error in connectivity");
                                                }
                                            } catch (Exception ex) {
                                                JOptionPane.showMessageDialog(null, ex.getMessage());
                                            }
                                        }
                                    } catch (Exception ex) {
                                        JOptionPane.showMessageDialog(null, ex.getMessage());
                                    }
                                } catch (Exception e) {
//                            e.printStackTrace();
                                    JOptionPane.showMessageDialog(this, "Error in connectivity");
                                }
                            } catch (Exception ex) {
                                JOptionPane.showMessageDialog(null, ex.getMessage());
                            }
                        } catch (Exception e) {
//                            e.printStackTrace();
                            JOptionPane.showMessageDialog(this, "Error in connectivity");
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage());
                    }
                } catch (Exception e) {
//                            e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error in connectivity");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton59ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        jComboBox34.removeAllItems();
        jComboBox33.removeAllItems();
        if (null == jTextStatus.getText()) {
            JOptionPane.showMessageDialog(null, "Error connection");
        } else {
            switch (jTextStatus.getText()) {
                case "ADMINISTRATOR":
                    try {
//Package
                    String PACKCOMBO = "select * from package";
//            String PACKCOMBO = "select * from package where factory = '" + twew + "'";
                    PreparedStatement comboPACK = db_Connection.getInstance().prepareStatement(PACKCOMBO);
                    try {

                        rs = comboPACK.executeQuery();

                        while (rs.next()) {
                            jComboBox33.addItem(rs.getString("can_name"));
                            jComboBox34.addItem(rs.getString("label_name"));

                        }
                        jPanel56.removeAll();
                        jPanel56.add(jPanel22);
                        jPanel56.repaint();
                        jPanel56.revalidate();
                        MainPanel.removeAll();
                        MainPanel.add(jPanelWarehouse);
                        MainPanel.repaint();
                        MainPanel.revalidate();

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e.getMessage());
                    }

                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
                }
                break;
                // TODO add your handling code here:
                case "USER": {
                    String qlo = jTextLogin.getText();
                    try {
//Package   
//                String PACKCOMBO = "select * from package";
                        String PACKCOMBO = "select * from package where factory = '" + qlo + "'";
                        PreparedStatement comboPACK = db_Connection.getInstance().prepareStatement(PACKCOMBO);
                        try {

                            rs = comboPACK.executeQuery();

                            while (rs.next()) {
                                jComboBox33.addItem(rs.getString("can_name"));
                                jComboBox34.addItem(rs.getString("label_name"));

                            }
                            jPanel56.removeAll();
                            jPanel56.add(jPanel22);
                            jPanel56.repaint();
                            jPanel56.revalidate();

                            MainPanel.removeAll();
                            MainPanel.add(jPanelWarehouse);
                            MainPanel.repaint();
                            MainPanel.revalidate();

                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e.getMessage());
                        }

                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage());
                    }
//            JOptionPane.showMessageDialog(null, "error");
                    break;
                }
                case "WAREHOUSE": {
                    String qlo = jTextSubsidiary.getText();
                    try {
//Package
//                String PACKCOMBO = "select * from package";
                        String PACKCOMBO = "select * from package where factory = '" + qlo + "'";
                        PreparedStatement comboPACK = db_Connection.getInstance().prepareStatement(PACKCOMBO);
                        try {

                            rs = comboPACK.executeQuery();

                            while (rs.next()) {
                                jComboBox34.addItem(rs.getString("label_name"));

                            }
                            try {
//Package
//                String PACKCOMBO = "select * from package";
                                String pacarton = "select * from carton_trays";
                                PreparedStatement combocarton = db_Connection.getInstance().prepareStatement(pacarton);
                                try {

                                    rs = combocarton.executeQuery();

                                    while (rs.next()) {
                                        jComboBox33.addItem(rs.getString("tray_name"));

                                    }

                                    jPanel56.removeAll();
                                    jPanel56.add(jPanel22);
                                    jPanel56.repaint();
                                    jPanel56.revalidate();

                                    MainPanel.removeAll();
                                    MainPanel.add(jPanelWarehouse);
                                    MainPanel.repaint();
                                    MainPanel.revalidate();

                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, e.getMessage());
                                }

                            } catch (Exception ex) {
                                JOptionPane.showMessageDialog(null, ex.getMessage());
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e.getMessage());
                        }

                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage());
                    }
                    break;
                }
                default:
                    JOptionPane.showMessageDialog(null, "Error connection");
                    break;
            }
        }

    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jTable26MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable26MouseClicked
        jTextField110.setText(null);
        int wareows = jTable26.getSelectedRow();
        String Waretblclck = (jTable26.getModel().getValueAt(wareows, 0).toString());
        try {
            String clik = "select * from packed_product where packed_productid='" + Waretblclck + "' ";
            PreparedStatement wareclikk = db_Connection.getInstance().prepareStatement(clik);

            rs = wareclikk.executeQuery();

            if (rs.next()) {
                int watadd1 = rs.getInt("packed_productid");
                String watadd = String.valueOf(watadd1);
                jTextField117.setText(watadd);

                String wastadd1 = rs.getString("packed_product");
//                String wastadd = String.valueOf(wastadd1);
                jTextField109.setText(wastadd1);

                String wagpr = rs.getString("packed_product");
//                String wagpr1 = String.valueOf(wagpr);
                jTextField110.setText(wagpr);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
            ex.printStackTrace();
        }
//         try {
//            String clik = "select * from productproduction where ProductionID='" + Waretblclck + "' ";
//            PreparedStatement wareclikk = db_Connection.getInstance().prepareStatement(clik);
//
//            rs = wareclikk.executeQuery();
//
//            if (rs.next()) {
//                int watadd1 = rs.getInt("ProductionID");
//                String watadd = String.valueOf(watadd1);
//                jTextField117.setText(watadd);
//
//                String wastadd1 = rs.getString("product_name");
////                String wastadd = String.valueOf(wastadd1);
//                jTextField109.setText(wastadd1);
//
//                String wagpr = rs.getString("groupe");
////                String wagpr1 = String.valueOf(wagpr);
//                jTextField110.setText(wagpr);
//            }
//
//        } catch (Exception ex) {
//            JOptionPane.showMessageDialog(null, ex.getMessage());
//            ex.printStackTrace();
//        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jTable26MouseClicked

    private void jTextWarehouseKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextWarehouseKeyPressed

        switch (evt.getKeyCode()) {
            case KeyEvent.VK_ENTER:
                warehouseLoad();
                break;
            default:
                  
;

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jTextWarehouseKeyPressed

    private void jTextField79ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField79ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField79ActionPerformed

    private void jButton56ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton56ActionPerformed
        jLabel246.setText("Transfer Table");
        wareLog();
        jPanel56.removeAll();
        jPanel56.add(jPanelTransferList);
        jPanel56.repaint();
        jPanel56.revalidate();// TODO add your handling code here:
    }//GEN-LAST:event_jButton56ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        jCombopprod.removeAllItems();
        jCombo_label.removeAllItems();
        jCombo_package.removeAllItems();
        if ("ADMINISTRATOR".equals(jTextLogin.getText())) {
            // jComboBox24.removeAllItems();
            try {
                jComboBox5.setModel(new DefaultComboBoxModel(packageReturns.getPackage().toArray()));
                jComboBox4.setModel(new DefaultComboBoxModel(labelReturns.getLabel().toArray()));

                com.canning.returns.packageReturns.getPackage();
                com.canning.returns.labelReturns.getLabel();

                MainPanel.removeAll();
                MainPanel.add(jPanelPacking);
                MainPanel.repaint();
                MainPanel.revalidate();

                jPanelTabpackrpt.removeAll();
                jPanelTabpackrpt.add(jPanel40);
                jPanelTabpackrpt.repaint();
                jPanelTabpackrpt.revalidate();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Database Error");
//                        e.printStackTrace();
            }
        } else {
            String hpy = jTextLogin.getText();

            try (PreparedStatement psc1st = db_Connection.getInstance().prepareStatement("SELECT distinct(product_name) FROM product where factory ='" + hpy + "' ")) {

                try {
                    rs = psc1st.executeQuery();

                    while (rs.next()) {
                        jCombopprod.addItem(rs.getString("product_name"));

                    }//Package
                    String PBO = "select * from package where factory='" + hpy + "'";
                    try (PreparedStatement comboPACK = db_Connection.getInstance().prepareStatement(PBO)) {
                        rs = comboPACK.executeQuery();

                        while (rs.next()) {
                            jCombo_package.addItem(rs.getString("can_name"));
                            jCombo_label.addItem(rs.getString("label_name"));
                        }
                        MainPanel.removeAll();
                        MainPanel.add(jPanelPacking);
                        MainPanel.repaint();
                        MainPanel.revalidate();

                        rs.close();
                        psc1st.close();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Database Error");
//                        e.printStackTrace();
                    }

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Database Error");
//                    e.printStackTrace();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error connection");
//                e.printStackTrace();
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem16ActionPerformed

    private void jButton63ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton63ActionPerformed
//
//        String kcP = (String) jComboBox37.getSelectedItem();//Produced product
//        String keP = jTextField124.getText(); //produced qty qty
//        Double ktP = Double.valueOf(keP);
//        String kcL = (String) jComboBox36.getSelectedItem(); //Label 
//        String kcLq = jTextField126.getText(); //label qty
//        Double kcL1 = Double.valueOf(kcLq);
//
//        String kcPK = (String) jComboBox35.getSelectedItem();//Package
//        String kcPKq = jTextField126.getText(); //package qty
//        Double kcPKq1 = Double.valueOf(kcPKq);
//
//        String kg = jTextField120.getText();
//        String kgrt = jTextLogin.getText();
//
////consumed product
////                Double ks = Double.valueOf(kg);
//        String kbg = jTextField121.getText(); //consumed qty
//        Double kbs = Double.valueOf(kbg);
//        String ke = jTextField125.getText(); //manpower qty
//        Double kt = Double.valueOf(ke);
//
//        String k1 = jTextField119.getText(); //PID
//        Integer k11 = Integer.valueOf(k1);
//        try {
//            Connection con3 = (Connection) db_Connection.getInstance();
//            con3.setAutoCommit(false);
//
//            try (PreparedStatement pschy = db_Connection.getInstance().prepareStatement("SELECT * FROM package where can_name='" + kcPK + "'")) {
//
//                try {
//                    rs = pschy.executeQuery();
//
//                    while (rs.next()) {
//                        jTextField128.setText(rs.getString("price_per_can"));
//
//                    }
//                    try (PreparedStatement psly = db_Connection.getInstance().prepareStatement("SELECT * FROM package where label_name='" + kcL + "'")) {
//
//                        try {
//                            rs = psly.executeQuery();
//
//                            while (rs.next()) {
//                                jTextField123.setText(rs.getString("price_per_label"));
//
//                            }
//                            try {
//                                String ropryce = jTextField122.getText();
//                                Double propryce = Double.valueOf(ropryce);
//                                String apryce = jTextField128.getText();
//                                Double papryce = Double.valueOf(apryce);
//                                String abpryce = jTextField123.getText();
//                                Double labpryce = Double.valueOf(abpryce);
//
//                                String query1 = "insert into packingreport (date,packedproduct,packedqty,consumedproduct,consumedqty,manpower,package,packageqty,label,labelqty,ProductionID,consumedproductprice,packageprice,labelprice,factory)"
//                                        + "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
//
//                                try (PreparedStatement pst = con3.prepareStatement(query1)) {
//
//                                    pst.setString(1, ((JTextField) jDatepckpck.getDateEditor().getUiComponent()).getText());
//                                    pst.setString(2, kcP);
//                                    pst.setDouble(3, ktP);
//                                    pst.setString(4, kg);
//                                    pst.setDouble(5, kbs);
//                                    pst.setDouble(6, kt);
//                                    pst.setString(7, kcPK);
//                                    pst.setDouble(8, kcPKq1);
//                                    pst.setString(9, kcL);
//                                    pst.setDouble(10, kcL1);
//                                    pst.setInt(11, k11);
//                                    pst.setDouble(12, propryce);
//                                    pst.setDouble(13, papryce);
//                                    pst.setDouble(14, labpryce);
//                                    pst.setString(15, kgrt);
//
//                                    pst.addBatch();
//                                    pst.executeBatch();
//                                    con3.commit();
//                                    JOptionPane.showMessageDialog(this, "record has been inserted");
//////                   
//                                } catch (Exception e) {
////                                    e.printStackTrace();
//                                    JOptionPane.showMessageDialog(null, "Cannot save." + e);
//                                }
//
//                            } catch (Exception e) {
////                                e.printStackTrace();
//                                JOptionPane.showMessageDialog(null, "Invalid in fields");
//                            }
//                        } catch (Exception e) {
////                            e.printStackTrace();
//                            JOptionPane.showMessageDialog(null, "Cannot save." + e);
//                        }
//                        psly.close();
//                    } catch (Exception e) {
////                        e.printStackTrace();
//                        JOptionPane.showMessageDialog(null, "Invalid in fields");
//                    }
//                } catch (Exception e) {
////                    e.printStackTrace();
//                    JOptionPane.showMessageDialog(null, "Invalid in fields");
//                }
//                pschy.close();
//            } catch (Exception e) {
//                JOptionPane.showMessageDialog(null, "Invalid Entry");
////                e.printStackTrace();
//            }
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Invalid Entry");
////            e.printStackTrace();
//        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton63ActionPerformed

    private void jTextField123ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField123ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField123ActionPerformed

    private void jTextField128ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField128ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField128ActionPerformed

    private void jTextField129ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField129ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField129ActionPerformed

    private void jTextField136ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField136ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField136ActionPerformed

    private void jTextField137ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField137ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField137ActionPerformed

    private void jTextField133ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField133ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField133ActionPerformed

    private void jTextField141ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField141ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField141ActionPerformed

    private void jTextField134ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField134ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField134ActionPerformed

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
//        waresalesCombo();
//        MainPanel.removeAll();
//        MainPanel.add(ProductsalesPanel);
//        MainPanel.repaint();
//        MainPanel.revalidate();
//
//        jPanel31.removeAll();
//        jPanel31.add(jPanel29);
//        jPanel31.repaint();
//        jPanel31.revalidate();

//        jPanel31.removeAll();//ProductsalesPanel
//        jPanel31.add(ProductsalesPanel);
//        MainPanel.add(jPanelsalesstockupdate);
//        jPanel31.repaint();
//        jPanel31.revalidate();
//        TableNamesTest();
// String salevoucher = jTextField143.getText();
//
//        String saleWareaccess = jTextLogin.getText();
//        if ("ADMINISTRATOR".equals(jTextLogin.getText())) {
//
//            //RADIO BUTTON DATE
//            try {
//                DefaultTableModel modelsale1 = (DefaultTableModel) jTable32.getModel();
//
//                try {
//                    int z4 = modelsale1.getRowCount();
//                    for (int lu3 = 0; lu3 <= z4; ++lu3) {
//                        modelsale1.removeRow(0);
//                    }
//                } catch (Exception e) {
//                }
//
//                try {
//
//                    String quer = "SELECT * FROM salestable";
//                    try (PreparedStatement stmt4 = db_Connection.getInstance().prepareStatement(quer)) {
//                        rs = stmt4.executeQuery(quer);
//                        
//                        while (rs.next()) {
//                            modelsale1.addRow(new Object[]{rs.getString("salesdate"), rs.getInt("productionid"), rs.getString("product"), rs.getDouble("quantity"), rs.getString("buyer")});
//                            
//                        }
//                    }
//
//                    try {
//
//                        String prod = "SELECT * FROM product";
//                       try(PreparedStatement stmtprod = db_Connection.getInstance().prepareStatement(prod)){
//                        rs = stmtprod.executeQuery(prod);
//
//                        while (rs.next()) {
//                            jComboBox39.addItem(rs.getString("product_name"));
//
//                        }
//                        stmtprod.close();
//                       }
//                        MainPanel.removeAll();
//                        MainPanel.add(jPanel29);
//                        MainPanel.repaint();
//                        MainPanel.revalidate();
//
//                        MainPanel.removeAll();
//                        MainPanel.add(ProductsalesPanel);
//                        MainPanel.repaint();
//                        MainPanel.revalidate();
//                    } catch (Exception ex) {
//                        JOptionPane.showMessageDialog(null, ex.getMessage());
////                        ex.printStackTrace();
//                    }
//                } catch (Exception ex) {
//                    JOptionPane.showMessageDialog(null, ex.getMessage());
////                    ex.printStackTrace();
//                }
//
//            } catch (Exception ex) {
////                ex.printStackTrace();
//                JOptionPane.showMessageDialog(null, ex.getMessage());
//            }
//
//            //END OF RADIO DATE
//        } else {
//            //RADIO BUTTON DATE
//            try {
//                DefaultTableModel modelsale = (DefaultTableModel) jTable32.getModel();
//
//                try {
//                    int z4 = modelsale.getRowCount();
//                    for (int lu3 = 0; lu3 <= z4; ++lu3) {
//                        modelsale.removeRow(0);
//                    }
//                } catch (Exception e) {
//                }
//
//                try {
//                    String quer = "SELECT * FROM salestable where factory ='" + saleWareaccess + "' ;";
//                    try(PreparedStatement stmt4 = db_Connection.getInstance().prepareStatement(quer)){
//
//                    rs = stmt4.executeQuery(quer);
//
//                    while (rs.next()) {
//                        modelsale.addRow(new Object[]{rs.getString("salesdate"), rs.getInt("productionid"), rs.getString("product"), rs.getDouble("quantity"), rs.getString("buyer")});
//
//                    }
//                    try {
//
//                        String prod = "SELECT * FROM product where factory ='" + saleWareaccess + "' ;";
//                        try(PreparedStatement stmtprod = db_Connection.getInstance().prepareStatement(prod)){
//                        rs = stmtprod.executeQuery(prod);
//
//                        while (rs.next()) {
//                            jComboBox39.addItem(rs.getString("product_name"));
//
//                        }
//                        MainPanel.removeAll();
//                        MainPanel.add(ProductsalesPanel);
//                        MainPanel.repaint();
//                        MainPanel.revalidate();
//                        stmtprod.close();
//                        }
//                    } catch (Exception ex) {
////                        ex.printStackTrace();
//                        JOptionPane.showMessageDialog(null, ex.getMessage());
//                    }
//                    stmt4.close();
//                    }
//                } catch (Exception ex) {
////                    ex.printStackTrace();
//                    JOptionPane.showMessageDialog(null, ex.getMessage());
//                }
//
//            } catch (Exception ex) {
////                ex.printStackTrace();
//                JOptionPane.showMessageDialog(null, ex.getMessage());
//            }
//
//        }
// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem17ActionPerformed

    private void jButton72ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton72ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton72ActionPerformed

    private void jMenuItem23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem23ActionPerformed
        String pck = jTextLogin.getText();
        if (jTextLogin.getText().equals("ADMINISTRATOR")) {       //DISPLAY Jasper Report IN JPANEL
            try {

                Connection connn = (Connection) db_Connection.getInstance();
//            JasperDesign jd = JRXmlLoader.load("C:\\Users\\Stevoski\\Documents\\Scanned Documents\\Canning\\src\\CostReport.jrxml");
//64 BIT           
//                JasperDesign jd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\CostReport.jrxml");
//32 BIT
                JasperDesign jd = JRXmlLoader.load("C:\\Program Files\\Cost\\CostReport.jrxml");
                String sql = "select Production_ID,date,product,quantity,Cperunit from canning.new_view order by Production_ID";
                JRDesignQuery NewQuery = new JRDesignQuery();
                NewQuery.setText(sql);
                jd.setQuery(NewQuery);
                JasperReport jr = JasperCompileManager.compileReport(jd);
                JasperPrint jp = JasperFillManager.fillReport(jr, null, connn);
//JasperViewer.viewReport(jp, false);
//DISPLAY IN JPANEL
                BorderLayout layoutPaneVC = new BorderLayout();
                JPanel panelVC = new JPanel(layoutPaneVC);
                JRViewer vw = new JRViewer(jp);
                panelVC.setLayout(new BorderLayout());
                panelVC.repaint();
                panelVC.add(vw);
                panelVC.revalidate();
                MainPanel.removeAll();
                MainPanel.add(panelVC);
                MainPanel.repaint();
                MainPanel.revalidate();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
//                e.printStackTrace();
            }
        } else {
            jMenuItem11.setEnabled(false);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem23ActionPerformed

    private void jMenuItem22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem22ActionPerformed
        String pck = jTextLogin.getText();
        if (jTextLogin.getText().equals("ADMINISTRATOR")) {      //DISPLAY Jasper Report IN JPANEL
            try {
                Connection connn = (Connection) db_Connection.getInstance();
//            JasperDesign jd = JRXmlLoader.load("C:\\Users\\Stevoski\\Documents\\Scanned Documents\\Canning\\src\\CostReport.jrxml");
//64 BIT           
//                JasperDesign jd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\CostReport.jrxml");
//32 BIT
                JasperDesign jd = JRXmlLoader.load("C:\\Program Files\\Cost\\newReport.jrxml");
                JasperDesign jdi = JRXmlLoader.load("C:\\Program Files\\Cost\\newsubReport.jrxml");
                String sql = "select voucher_no,Production_ID,date,product,manCost,IngCost,RawCost,CanCost,LabelCost,EleCost,FuelCost,ManCost,Cperunit,quantity,waste_amount FROM new_view order by Production_ID";
                JRDesignQuery NewQuery = new JRDesignQuery();
                NewQuery.setText(sql);
                jd.setQuery(NewQuery);
                JasperReport jr = JasperCompileManager.compileReport(jd);
                JasperReport jsr = JasperCompileManager.compileReport(jdi);
                Map<String, Object> paramsie = new HashMap<>();

                paramsie.put("fupr", jsr);
                JasperPrint jp = JasperFillManager.fillReport(jr, paramsie, connn);
//JasperViewer.viewReport(jp, false);
//DISPLAY IN JPANEL

                BorderLayout layoutPanelCV = new BorderLayout();
                JPanel panelRPTCST = new JPanel(layoutPanelCV);
                JRViewer vw = new JRViewer(jp);
                panelRPTCST.setLayout(new BorderLayout());
                panelRPTCST.repaint();
                panelRPTCST.add(vw);
                panelRPTCST.revalidate();

                MainPanel.removeAll();
                MainPanel.add(panelRPTCST);
                MainPanel.repaint();
                MainPanel.revalidate();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
//                e.printStackTrace();
            }
        } else {
            jMenuItem11.setEnabled(false);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem22ActionPerformed

    private void jMenuItem18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem18ActionPerformed
        MainPanel.removeAll();
        MainPanel.add(StocksPanel);
        MainPanel.repaint();
        MainPanel.revalidate();
        rovementCaller();
    }//GEN-LAST:event_jMenuItem18ActionPerformed

    public void rovementCaller() throws HeadlessException {
        if ("ADMINISTRATOR".equals(jTextLogin.getText())) {

            //RADIO BUTTON DATE
            try {
                DefaultTableModel modelsalep = (DefaultTableModel) jTable37.getModel();

                try {
                    int z4 = modelsalep.getRowCount();
                    for (int lu3 = 0; lu3 <= z4; ++lu3) {
                        modelsalep.removeRow(0);
                    }
                } catch (Exception ex) {

                }

                try {

                    String quer = "SELECT * FROM raw_material";
                    try (PreparedStatement stmt4 = db_Connection.getInstance().prepareStatement(quer)) {
                        rs = stmt4.executeQuery(quer);

                        while (rs.next()) {
                            modelsalep.addRow(new Object[]{rs.getString("raw_material_name"), rs.getString("factory"), rs.getDouble("Stock_in_hand"), rs.getString("unit")});

                        }
                        stmt4.close();
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
//                    ex.printStackTrace();
                }

            } catch (Exception ex) {
//                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }

            //END OF RADIO DATE
        } else {
            String ahsa = jTextLogin.getText();
            try {
                DefaultTableModel modelsalep = (DefaultTableModel) jTable37.getModel();

                try {
                    int z4 = modelsalep.getRowCount();
                    for (int lu3 = 0; lu3 <= z4; ++lu3) {
                        modelsalep.removeRow(0);
                    }
                } catch (Exception ex) {

                }

                try {

                    String quer = "SELECT * FROM raw_material where factory='" + ahsa + "'";
                    try (PreparedStatement stmt4 = db_Connection.getInstance().prepareStatement(quer)) {
                        rs = stmt4.executeQuery(quer);

                        while (rs.next()) {
                            modelsalep.addRow(new Object[]{rs.getString("raw_material_name"), rs.getString("factory"), rs.getDouble("Stock_in_hand"), rs.getString("unit")});

                        }
                        stmt4.close();
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
//                    ex.printStackTrace();
                }

            } catch (Exception ex) {
//                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }

        }

// TODO add your handling code here:
    }

    private void jDate2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jDate2KeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_ENTER:
                com.canning.proreport.prorptShow.panel8Show();
                break;
            default:                  
;

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jDate2KeyPressed

    private void jTextField9KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField9KeyPressed

        switch (evt.getKeyCode()) {
            case KeyEvent.VK_ENTER:
                com.canning.proreport.prorptShow.panel8Show();
                break;
            default:                  
;

        }        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField9KeyPressed

    private void jTextField138KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField138KeyPressed

        switch (evt.getKeyCode()) {
            case KeyEvent.VK_ENTER:
                com.canning.proreport.prorptShow.panel8Show();
                break;
            default:                  
;

        }           // TODO add your handling code here:
    }//GEN-LAST:event_jTextField138KeyPressed

    private void jButton75ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton75ActionPerformed
//        String salevoucher = jTextField143.getText();
//
//        String saleWareaccess = LoginForm.getItem();
        jPanel36.removeAll();
        jPanel36.add(stocksproduct);
        jPanel36.repaint();
        jPanel36.revalidate();
        if ("ADMINISTRATOR".equals(jTextLogin.getText())) {

            //RADIO BUTTON DATE
            try {
                DefaultTableModel modelsalep = (DefaultTableModel) jTable33.getModel();

                try {
                    int z4 = modelsalep.getRowCount();
                    for (int lu3 = 0; lu3 <= z4; ++lu3) {
                        modelsalep.removeRow(0);
                    }
                } catch (Exception ex) {

                }

                try {

                    String quer = "SELECT * FROM product";
                    try (PreparedStatement stmt4 = db_Connection.getInstance().prepareStatement(quer)) {
                        rs = stmt4.executeQuery(quer);

                        while (rs.next()) {
                            modelsalep.addRow(new Object[]{rs.getString("product_name"), rs.getDouble("stock_in_hand"), rs.getString("unit"), rs.getString("groupe"), rs.getString("kgsperpc")});
                        }
                        stmt4.close();
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
//                    ex.printStackTrace();
                }
            } catch (Exception ex) {
//                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        } else {
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton75ActionPerformed

    private void jMenuItem21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem21ActionPerformed
        MainPanel.removeAll();
        MainPanel.add(jPanel36);
        MainPanel.repaint();
        MainPanel.revalidate();

        jPanel36.removeAll();
        jPanel36.add(stocksproduct);
        jPanel36.repaint();
        jPanel36.revalidate();
        String Acc = jTextLogin.getText();

        if ("ADMINISTRATOR".equals(jTextLogin.getText())) {

            //RADIO BUTTON DATE
            try {
                DefaultTableModel modelsalep = (DefaultTableModel) jTable33.getModel();

                try {
                    int z4 = modelsalep.getRowCount();
                    for (int lu3 = 0; lu3 <= z4; ++lu3) {
                        modelsalep.removeRow(0);
                    }
                } catch (Exception ex) {

                }

                try {

                    String quer = "SELECT * FROM product";
                    try (PreparedStatement stmt4 = db_Connection.getInstance().prepareStatement(quer)) {
                        rs = stmt4.executeQuery(quer);

                        while (rs.next()) {
                            modelsalep.addRow(new Object[]{rs.getString("product_name"), rs.getDouble("stock_in_hand"), rs.getString("unit"), rs.getString("groupe"), rs.getString("kgsperpc")});

                        }
                        stmt4.close();
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
//                    ex.printStackTrace();
                }

            } catch (Exception ex) {
//                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }

            //END OF RADIO DATE
        } else {
            try {
                DefaultTableModel modelsalep = (DefaultTableModel) jTable33.getModel();

                try {
                    int z4 = modelsalep.getRowCount();
                    for (int lu3 = 0; lu3 <= z4; ++lu3) {
                        modelsalep.removeRow(0);
                    }
                } catch (Exception ex) {

                }

                try {

                    String quer = "SELECT * FROM product where factory='" + Acc + "'";
                    try (PreparedStatement stmt4 = db_Connection.getInstance().prepareStatement(quer)) {
                        rs = stmt4.executeQuery(quer);
                        while (rs.next()) {
                            modelsalep.addRow(new Object[]{rs.getString("product_name"), rs.getDouble("stock_in_hand"), rs.getString("unit"), rs.getString("groupe"), rs.getString("kgsperpc")});
                        }
                        stmt4.close();
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
//                    ex.printStackTrace();
                }
            } catch (Exception ex) {
//                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem21ActionPerformed

//    public void comboSales(KeyEvent evt) throws HeadlessException {
//        switch (evt.getKeyCode()) {
//            case KeyEvent.VK_ENTER:
//
//                String saleCombo = (String) jComboBox39.getSelectedItem();
//                String saleWareaccess = jTextLogin.getText();
//                if ("ADMINISTRATOR".equals(jTextLogin.getText())) {
//
//                    //RADIO BUTTON DATE
//                    try {
//                        DefaultTableModel modelsale = (DefaultTableModel) jTable30.getModel();
//
//                        try {
//                            int z4 = modelsale.getRowCount();
//                            for (int lu3 = 0; lu3 <= z4; ++lu3) {
//                                modelsale.removeRow(0);
//                            }
//                        } catch (Exception ex) {
//
//                        }
//
//                        try {
//
//                            String quer = "SELECT * FROM prodpriceinclusive where product_name = '" + saleCombo + "' ;";
//                            try (PreparedStatement stmt4 = db_Connection.getInstance().prepareStatement(quer)) {
//                                rs = stmt4.executeQuery(quer);
//
//                                while (rs.next()) {
//                                    modelsale.addRow(new Object[]{rs.getInt("ProductionID"), rs.getString("date"), rs.getString("product_name"), rs.getDouble("quantity")});
//                                    jTextField143.setText(rs.getString("ProductionID"));
//                                    jTextField142.setText(rs.getString("voucher_no"));
//                                    jDatesalesload.setDate(rs.getDate("date"));
//                                    jsalesProduct.setText(rs.getString("product_name"));
//                                    jLabel190.setText(rs.getString("unit"));
//                                }
//                                stmt4.close();
//                            }
//                        } catch (Exception ex) {
//                            JOptionPane.showMessageDialog(null, ex.getMessage());
////                            ex.printStackTrace();
//                        }
//                    } catch (Exception ex) {
////                        ex.printStackTrace();
//                        JOptionPane.showMessageDialog(null, ex.getMessage());
//                    }
//                } else {
//                    try {
//                        DefaultTableModel modelsale = (DefaultTableModel) jTable30.getModel();
//                        try {
//                            int z4 = modelsale.getRowCount();
//                            for (int lu3 = 0; lu3 <= z4; ++lu3) {
//                                modelsale.removeRow(0);
//                            }
//                        } catch (Exception ex) {
//                        }
//                        try {
//                            String quer = "SELECT * FROM prodpriceinclusive where product_name = '" + saleCombo + "' and factory ='" + saleWareaccess + "' ;";
//                            PreparedStatement stmt4 = db_Connection.getInstance().prepareStatement(quer);
//                            rs = stmt4.executeQuery(quer);
//                            while (rs.next()) {
//                                modelsale.addRow(new Object[]{rs.getInt("ProductionID"), rs.getString("date"), rs.getString("product_name"), rs.getDouble("quantity")});
//                                jTextField143.setText(rs.getString("voucher_no"));
//                                jDatesalesload.setDate(rs.getDate("date"));
//                                jsalesProduct.setText(rs.getString("product_name"));
//                                jLabel190.setText(rs.getString("unit"));
//                            }
//                        } catch (Exception ex) {
////                            ex.printStackTrace();
//                            JOptionPane.showMessageDialog(null, ex.getMessage());
//                        }
//
//                    } catch (Exception ex) {
////                        ex.printStackTrace();
//                        JOptionPane.showMessageDialog(null, ex.getMessage());
//                    }
//
//                }
//                break;
//            default:
//                ;
//        }        // TODO add your handling code here:
//    }
    private void jMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem19ActionPerformed
//        int result = JOptionPane.showConfirmDialog(null, jPanel38,
//                "Please Enter X and Y Values", JOptionPane.OK_CANCEL_OPTION);
//        if (result == JOptionPane.OK_OPTION) {
//            System.out.println("x value: ");
//            System.out.println("y value: ");
//        }
        ingstock();

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem19ActionPerformed

    private void jButton76ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton76ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton76ActionPerformed

    private void jTextField148ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField148ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField148ActionPerformed

    private void jButton78ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton78ActionPerformed
        String tbded = decider.getText();
        switch (tbded) {
            case "Sorting":
                sortMethode();
                subsortMethode();
                break;
            case "Pasteurization":
                pastMethod();
                break;

        }
    }//GEN-LAST:event_jButton78ActionPerformed

    private void sortMethode() throws HeadlessException {
        try {
            String armpry = fieldin.getText();//qty in
            Double aRin = Double.valueOf(armpry);

            String qtyout1 = fieldout.getText();//qty out
            Double qtyout = Double.valueOf(armpry);

            String armpry1 = jTextLogin.getText();//factory

            String armstc = fieldwaste.getText();//waste
            Double Rmanhs = Double.valueOf(armstc);

            String arm = fieldmanp.getText();//manpower
            Double stmhrs = Double.valueOf(arm);

            String raw = (String) jComboRawPast.getSelectedItem();
            String cosna = (String) jComboBox29.getSelectedItem();//cons no
//            String cosna = (String) jComboRawPast.getSelectedItem();
            try {
                int autoincrementa = 0;
                PreparedStatement ps4 = db_Connection.getInstance().prepareStatement("INSERT INTO sorting(date,factory,raw_material,qtybefore,manpower_hrs,qtyafter,waste,cons_no)"
                        + "values(?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
                ps4.setString(1, ((JTextField) jDatePast.getDateEditor().getUiComponent()).getText());
                ps4.setString(2, armpry1);
                ps4.setString(3, raw);
                ps4.setDouble(4, aRin);
                ps4.setDouble(5, stmhrs);
                ps4.setDouble(6, qtyout);
                ps4.setDouble(7, Rmanhs);
                ps4.setString(8, cosna);
                autoincrementa = ps4.executeUpdate();
                ResultSet aresTa = ps4.getGeneratedKeys();
                while (aresTa.next()) {
                    jTextField154.setText(String.valueOf(aresTa.getInt(1)));
                }

                JOptionPane.showMessageDialog(null, "The data was successfully added to the Database!");
            } catch (Exception ex) {
//                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        } catch (Exception ex) {
//            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }

    private void pastMethod() throws HeadlessException {

        try {
            String armpry = fieldin.getText();
            Double inqty = Double.valueOf(armpry);
            String factorie = jTextLogin.getText();
            String waste1 = fieldwaste.getText();
            Double waste = Double.valueOf(waste1);
            String manp1 = fieldmanp.getText();
            Double manp = Double.valueOf(manp1);
            String outqty1 = fieldout.getText();
            Double outqty = Double.valueOf(outqty1);
            String raw = (String) jComboRawPast.getSelectedItem();
            String cosna = (String) jComboBox29.getSelectedItem();
            try {
                int autoincrementa = 0;
                PreparedStatement ps4 = db_Connection.getInstance().prepareStatement("INSERT INTO mainpast(date,raw_material,qtyin,manhrs,qty_out,waste,factory,cons_no)"
                        + "values(?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
                ps4.setString(1, ((JTextField) jDatePast.getDateEditor().getUiComponent()).getText());
                ps4.setString(2, raw);
                ps4.setDouble(3, inqty);
                ps4.setDouble(4, manp);
                ps4.setDouble(5, outqty);
                ps4.setDouble(6, waste);
                ps4.setString(7, factorie);
                ps4.setString(8, cosna);
                autoincrementa = ps4.executeUpdate();
                ResultSet aresTa = ps4.getGeneratedKeys();
                while (aresTa.next()) {
                    jTextField154.setText(String.valueOf(aresTa.getInt(1)));
                }

                JOptionPane.showMessageDialog(null, "The data was successfully added to the Database!");
            } catch (Exception ex) {
//                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        } catch (Exception ex) {
//            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
// TODO add your handling code here:
    }

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        jTable3.setEnabled(true);
        jScrollPane3.setVisible(true);
        jButton81.setEnabled(true);
        jButton81.setVisible(true);

        past_no.setText("Past ID");
        decider.setText("Pasteurization");
        jComboRawPast.removeAllItems();
        if ("ADMINISTRATOR".equals(jTextLogin.getText())) {
            // jComboBox24.removeAllItems();
            try {
                PreparedStatement psc1st = db_Connection.getInstance().prepareStatement("SELECT distinct(raw_material_name) FROM raw_material");
                try {
                    consiered.setModel(new DefaultComboBoxModel(packageReturns.getPackage().toArray()));
                    rs = psc1st.executeQuery();
                    while (rs.next()) {
                        jComboRawPast.addItem(rs.getString("raw_material_name"));
                    }
                    rs.close();
                    psc1st.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Database Error");
//                    e.printStackTrace();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error connection");
//                e.printStackTrace();
            }
        } else {
            String hpy = jTextLogin.getText();

            try (PreparedStatement psc1st = db_Connection.getInstance().prepareStatement("SELECT distinct(raw_material_name) FROM raw_material where factory ='" + hpy + "' ")) {

                try {
                    consiered.setModel(new DefaultComboBoxModel(packageReturns.getPackage().toArray()));
                    rs = psc1st.executeQuery();

                    while (rs.next()) {
                        jComboRawPast.addItem(rs.getString("raw_material_name"));

                    }//Package

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Database Error");
//                    e.printStackTrace();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error connection");
//                e.printStackTrace();
            }
        }
        MainPanel.removeAll();
        MainPanel.add(jPanelPasteurization);
        MainPanel.repaint();
        MainPanel.revalidate();

//jPanelPasteurization        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jButton81ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton81ActionPerformed
        String tbded = decider.getText();
        switch (tbded) {
            case "Sorting":
                JOptionPane.showMessageDialog(this, "Invalid Entry, Only for Pasteurization");
//                subsortMethode();
                break;
            case "Pasteurization":
                subPast();
                break;
        }
        try {
            DefaultTableModel mopela = (DefaultTableModel) jTable3.getModel();
            int pz1 = mopela.getRowCount();
            for (int p31 = 0; p31 < pz1; ++p31) {

                mopela.removeRow(0);
                mopela.setRowCount(1);
            }
            try {
                DefaultTableModel mopel1 = (DefaultTableModel) jTable2.getModel();
                int pz2 = mopel1.getRowCount();
                for (int p32 = 0; p32 < pz2; ++p32) {
                    mopel1.removeRow(0);
                    mopel1.setRowCount(1);
                }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Invalid Entry");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Invalid Entry");
        }
    }//GEN-LAST:event_jButton81ActionPerformed

    private void subsortMethode() throws HeadlessException {
        try {
            Connection conpa = (Connection) db_Connection.getInstance();
            conpa.setAutoCommit(false);
            int epocki = jTable2.getRowCount();

            String querypa = "insert into subsort (sortid,package,cons_no,no_of_bags) VALUES (?,?,?,?)";
            PreparedStatement packsyt = conpa.prepareStatement(querypa);
            for (int row = 0; row < epocki; row++) {

                String pid = jTextField154.getText();
                Integer pid1 = Integer.valueOf(pid);
                String tin = (String) jTable2.getValueAt(row, 1);
                String qtyin = (String) jTable2.getValueAt(row, 2);
                String bagty = (String) jTable2.getValueAt(row, 3);
                Double bagty1 = Double.valueOf(bagty);

                packsyt.setInt(1, pid1);
                packsyt.setString(2, tin);
                packsyt.setString(3, qtyin);
                packsyt.setDouble(4, bagty1);

//                 psy.setDouble(5, exproe);
                packsyt.addBatch();
            }
            packsyt.executeBatch();
            conpa.commit();
            JOptionPane.showMessageDialog(this, "Data Successfully added");

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Invalid Entry");
        }
    }

    private void subPast() throws HeadlessException {
        try {

            Connection connpAST = (Connection) db_Connection.getInstance();
            connpAST.setAutoCommit(false);
            int erowsi = jTable3.getRowCount();

            String querycoh = "insert into subpast (pastid,timein,qtyin,retortno,temperature,duration,timeout,binno) VALUES (?,?,?,?,?,?,?,?)";
            PreparedStatement psyAST = connpAST.prepareStatement(querycoh);
            for (int row = 0; row < erowsi; row++) {
//

                String pid = (String) jTable3.getValueAt(row, 0);
                Integer pid1 = Integer.valueOf(pid);
                String tin = (String) jTable3.getValueAt(row, 1);

                String qtyin = (String) jTable3.getValueAt(row, 2);
                Double qtyin1 = Double.valueOf(qtyin);
                String rttno = (String) jTable3.getValueAt(row, 3);
                String temp = (String) jTable3.getValueAt(row, 4);
                String dur = (String) jTable3.getValueAt(row, 5);
                String tout = (String) jTable3.getValueAt(row, 6);
                String binno = (String) jTable3.getValueAt(row, 7);
//                Double expqty1=Double.valueOf(expqty);

                psyAST.setInt(1, pid1);
                psyAST.setString(2, tin);
                psyAST.setDouble(3, qtyin1);
                psyAST.setString(4, rttno);
                psyAST.setString(5, temp);
                psyAST.setString(6, dur);
                psyAST.setString(7, tout);
                psyAST.setString(8, binno);
//                 psy.setDouble(5, exproe);
                psyAST.addBatch();
            }
            psyAST.executeBatch();
            connpAST.commit();
            JOptionPane.showMessageDialog(this, "Data Successfully added");

            try {
                Connection conpa = (Connection) db_Connection.getInstance();
                conpa.setAutoCommit(false);
                int epocki = jTable2.getRowCount();

                String querypa = "insert into subpack (pastid,package,cons_no,no_of_bags) VALUES (?,?,?,?)";
                PreparedStatement packsyt = conpa.prepareStatement(querypa);
                for (int row = 0; row < epocki; row++) {
//

                    String pid = (String) jTable2.getValueAt(row, 0);
                    Integer pid1 = Integer.valueOf(pid);
                    String tin = (String) jTable2.getValueAt(row, 1);
                    String qtyin = (String) jTable2.getValueAt(row, 2);
                    String bagty = (String) jTable2.getValueAt(row, 3);
                    Double bagty1 = Double.valueOf(bagty);

                    packsyt.setInt(1, pid1);
                    packsyt.setString(2, tin);
                    packsyt.setString(3, qtyin);
                    packsyt.setDouble(4, bagty1);

//                 psy.setDouble(5, exproe);
                    packsyt.addBatch();
                }
                packsyt.executeBatch();
                conpa.commit();
//            JOptionPane.showMessageDialog(this, "Data Successfully added");

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Invalid Entry");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Invalid Entry");
        }

        // TODO add your handling code here:
        // TODO add your handling code here:
    }

    private void jButton82ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton82ActionPerformed
        sorttblSave();
    }//GEN-LAST:event_jButton82ActionPerformed

    public void sorttblSave() throws HeadlessException {
        //        sort table save button
//        sort table save button
        try {
            String stype = (String) jCombosorttype.getSelectedItem();//stype
//              String qtybft = jTextcomment.getText();
            String rm = (String) jCombosort.getSelectedItem();
            String qtybf1 = jTextqtybefore.getText();
            Double qtybf = Double.valueOf(qtybf1);
            String waste1 = jTextsortwaste.getText();
            Double waste = Double.valueOf(waste1);
            String manp1 = jTextsortmanpower.getText();
            Double manp = Double.valueOf(manp1);
            String qaft1 = jTextsortqtyafter.getText();
            Double qaft = Double.valueOf(qaft1);
            String Factosort = jTextLogin.getText();
            String comm = jTextcomment.getText();

            try (PreparedStatement pps = db_Connection.getInstance().prepareStatement("INSERT INTO sorting(date,sorttype,raw_material,qtybefore,waste,manpower_hrs,qtyafter,factory,comments)"
                    + "values(?,?,?,?,?,?,?,?,?)")) {
                pps.setString(1, ((JTextField) jDatesort.getDateEditor().getUiComponent()).getText());
                pps.setString(2, stype);
                pps.setString(3, rm);
                pps.setDouble(4, qtybf);
                pps.setDouble(5, waste);
                pps.setDouble(6, manp);
                pps.setDouble(7, qaft);
                pps.setString(8, Factosort);
                pps.setString(9, comm);

                pps.executeUpdate();
                try {
                    DefaultTableModel model = (DefaultTableModel) jTable35.getModel();

                    try {
                        int z3 = model.getRowCount();
                        for (int lu3 = 0; lu3 <= z3; ++lu3) {
                            model.removeRow(0);
                        }
                    } catch (Exception e) {
                    }
                    try (PreparedStatement ps7 = db_Connection.getInstance().prepareStatement("SELECT * FROM sorting where date = ? and factory =?")) {
                        ps7.setString(1, ((JTextField) jDatesort.getDateEditor().getUiComponent()).getText());
                        ps7.setString(2, Factosort);
                        rs = ps7.executeQuery();
                        while (rs.next()) {
                            model.addRow(new Object[]{rs.getString("date"), rs.getString("raw_material"), rs.getDouble("qtybefore"), rs.getDouble("qtyafter"), rs.getDouble("waste")});
                        }
                    } catch (Exception e) {
//                    e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Invalid Entry");
                    }
                } catch (Exception e) {
//                e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Invalid Entry");
                }
                pps.close();
            }
        } catch (Exception e) {
//            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Invalid Entry");
        }
// TODO add your handling code here:
    }

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        jTable3.setEnabled(false);
        jScrollPane3.setVisible(false);
        jButton81.setEnabled(false);
        jButton81.setVisible(false);

        past_no.setText("Sort ID");
        decider.setText("Sorting");
        try {
            consiered.setModel(new DefaultComboBoxModel(packageReturns.getPackage().toArray()));
            jComboRawPast.setModel(new DefaultComboBoxModel(rawMaterialReturns.getrawMaterial().toArray()));
//                     jComboRawPast.setModel(new DefaultComboBoxModel(allIngredientReturns.getallMaterial().toArray()));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Database Error");
            e.printStackTrace();
        }
        MainPanel.removeAll();
        MainPanel.add(jPanelPasteurization);
        MainPanel.repaint();
        MainPanel.revalidate();

//        jCombosort.removeAllItems();
//        if ("ADMINISTRATOR".equals(jTextLogin.getText())) {
//            // jComboBox24.removeAllItems();
//            try {
//                PreparedStatement psc1st = db_Connection.getInstance().prepareStatement("SELECT distinct(raw_material_name) FROM raw_material");
//
//                try {
//                    rs = psc1st.executeQuery();
//
//                    while (rs.next()) {
//                        jCombosort.addItem(rs.getString("raw_material_name"));
//
//                    }
//
//                    rs.close();
//                    psc1st.close();
//
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, "Database Error");
////                    e.printStackTrace();
//                }
//            } catch (Exception e) {
//                JOptionPane.showMessageDialog(null, "Error connection");
////                e.printStackTrace();
//            }
//        } else {
//            String hpy = jTextLogin.getText();
//
//            try (PreparedStatement psc1st = db_Connection.getInstance().prepareStatement("SELECT distinct(raw_material_name) FROM raw_material where factory ='" + hpy + "' ")) {
//
//                try {
//                    rs = psc1st.executeQuery();
//
//                    while (rs.next()) {
//                        jCombosort.addItem(rs.getString("raw_material_name"));
//
//                    }//Package
//
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, "Database Error");
////                    e.printStackTrace();
//                }
//            } catch (Exception e) {
//                JOptionPane.showMessageDialog(null, "Error connection");
////                e.printStackTrace();
//            }
//        }
//jPanelSorting
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jTable3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable3KeyPressed

        int numRows1 = jTable3.getRowCount();
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_ENTER:
                DefaultTableModel moderode = (DefaultTableModel) jTable3.getModel();
                moderode.addRow(Paster);

//                for (int row_b = 0; row_b < numRows1; row_b++) {
//                    String numberless = jTextField154.getText();
//                    jTable3.setValueAt(numberless, row_b, 0);
//                }
                break;
            default:
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jTable3KeyPressed

//   // public void bomSave() throws NumberFormatException, HeadlessException {
////        button save panel bom
//        String qtrb = (String) jComboBox42.getSelectedItem(); //prod
//        String qtrrb = (String) jComboBox41.getSelectedItem();//factory
//
//        String gwub = (String) jComboBox45.getSelectedItem(); //ing/raw name
//
//        String etrb = jTextField156.getText();
//        Double gweb = Double.valueOf(etrb); //no of labels
//
//        if (jComboBox44.getSelectedItem() == "Raw Material") {
//
//            try (PreparedStatement psly = db_Connection.getInstance().prepareStatement("SELECT * FROM raw_material where raw_material_name='" + gwub + "'")) {
//
//                try {
//                    rs = psly.executeQuery();
//
//                    while (rs.next()) {
//                        jTextField160.setText(rs.getString("unit"));
//
//                    }
//
//                    try {
//                        String pfpry = jTextField160.getText();
//
//                        try (PreparedStatement ps4 = db_Connection.getInstance().prepareStatement("INSERT INTO rawbom(product_name,factory,raw_material,quantity,unit)"
//                                + "values(?,?,?,?,?)")) {
//                            ps4.setString(1, qtrb);
//                            ps4.setString(2, qtrrb);
//                            ps4.setString(3, gwub);
//                            ps4.setDouble(4, gweb);
//                            ps4.setString(5, pfpry);
//
//                            ps4.executeUpdate();
////                JOptionPane.showMessageDialog(null, "The data was successfully added to the Database!");
//
////TABLE INSERT
//                            try {
//                                DefaultTableModel model = (DefaultTableModel) jTable36.getModel();
//
//                                try {
//                                    int e3 = model.getRowCount();
//                                    for (int eu3 = 0; eu3 <= e3; ++eu3) {
//                                        model.removeRow(0);
//                                    }
//                                } catch (Exception e) {
//                                }
//                                try (PreparedStatement pse = db_Connection.getInstance().prepareStatement("SELECT * FROM rawbom where product_name = '" + qtrb + "';")) {
//
//                                    rs = pse.executeQuery();
//
//                                    while (rs.next()) {
//                                        model.addRow(new Object[]{rs.getString("raw_material"), rs.getDouble("quantity"), rs.getString("unit")});
//
//                                    }
//                                    try (PreparedStatement psedu = db_Connection.getInstance().prepareStatement("SELECT  truncate(sum(distinct quantity),4) FROM rawbom where product_name = '" + qtrb + "';")) {
//
//                                        rs = psedu.executeQuery();
//
//                                        while (rs.next()) {
//                                            Double jansal = rs.getDouble(1);
//                                            jTextField157.setText(String.valueOf(jansal));
//                                        }
//                                        rs.close();
//                                        psedu.close();
//                                        jTextField161.setText(jComboBox42.getSelectedItem().toString());
//                                    } catch (Exception e) {
////                                        e.printStackTrace();
//                                        JOptionPane.showMessageDialog(this, "Error in connectivity");
//                                    }
//                                    pse.close();
//                                } catch (Exception e) {
////                                    e.printStackTrace();
//                                    JOptionPane.showMessageDialog(this, "Error in connectivity");
//                                }
//                            } catch (Exception e) {
////                                e.printStackTrace();
//                                JOptionPane.showMessageDialog(this, "Error in connectivity");
//                            }
//                        } catch (Exception e) {
////                            e.printStackTrace();
//                            JOptionPane.showMessageDialog(null, e.getMessage());
//                        }
//                    } catch (Exception e) {
////                        e.printStackTrace();
//                        JOptionPane.showMessageDialog(null, e.getMessage());
//                    }
//                } catch (Exception e) {
////                    e.printStackTrace();
//                    JOptionPane.showMessageDialog(this, "Error in connectivity");
//                }
//            } catch (Exception e) {
////                e.printStackTrace();
//                JOptionPane.showMessageDialog(null, e.getMessage());
//            }
//            // TODO add your handling code here:
//        } else if (jComboBox44.getSelectedItem() == "Ingredient") {
//            try {
////where factory='" + access + "'
//                PreparedStatement psly = db_Connection.getInstance().prepareStatement("SELECT * FROM ingredients where ingredient_name='" + gwub + "'");
//
//                try {
//                    rs = psly.executeQuery();
//
//                    while (rs.next()) {
//                        jTextField160.setText(rs.getString("unit"));
//
//                    }
//
//                    try {
//                        String pfpry = jTextField160.getText();
//
//                        try (PreparedStatement ps4 = db_Connection.getInstance().prepareStatement("INSERT INTO ingredbom(product,factory,ingredient,quantity,unit)"
//                                + "values(?,?,?,?,?)")) {
//                            ps4.setString(1, qtrb);
//                            ps4.setString(2, qtrrb);
//                            ps4.setString(3, gwub);
//                            ps4.setDouble(4, gweb);
//                            ps4.setString(5, pfpry);
//
//                            ps4.executeUpdate();
////                JOptionPane.showMessageDialog(null, "The data was successfully added to the Database!");
//
////TABLE INSERT
//                            try {
//                                DefaultTableModel model = (DefaultTableModel) jTable38.getModel();
//
//                                try {
//                                    int e3 = model.getRowCount();
//                                    for (int eu3 = 0; eu3 <= e3; ++eu3) {
//                                        model.removeRow(0);
//                                    }
//                                } catch (Exception e) {
//                                }
//                                try (PreparedStatement pse = db_Connection.getInstance().prepareStatement("SELECT * FROM ingredbom where product = '" + qtrb + "';")) {
//
//                                    rs = pse.executeQuery();
//
//                                    while (rs.next()) {
//                                        model.addRow(new Object[]{rs.getString("ingredient"), rs.getDouble("quantity"), rs.getString("unit")});
//
//                                    }
//                                    try (PreparedStatement psedu = db_Connection.getInstance().prepareStatement("SELECT truncate(sum(distinct quantity),4) FROM ingredbom where product = '" + qtrb + "';")) {
//
//                                        rs = psedu.executeQuery();
//
//                                        while (rs.next()) {
//                                            Double jansal = rs.getDouble(1);
//                                            jTextField158.setText(String.valueOf(jansal));
//                                        }
//
//                                        rs.close();
//                                        psedu.close();
//                                        jTextField161.setText(jComboBox42.getSelectedItem().toString());
//                                    } catch (Exception e) {
////                                        e.printStackTrace();
//                                        JOptionPane.showMessageDialog(this, "Error in connectivity");
//                                    }
//
//                                    pse.close();
//                                } catch (Exception e) {
////                                    e.printStackTrace();
//                                    JOptionPane.showMessageDialog(this, "Error in connectivity");
//                                }
//
//                            } catch (Exception e) {
////                                e.printStackTrace();
//                                JOptionPane.showMessageDialog(this, "Error in connectivity");
//                            }
//
//                        } catch (Exception e) {
////                            e.printStackTrace();
//                            JOptionPane.showMessageDialog(null, e.getMessage());
//                        }
//
//                    } catch (Exception e) {
////                        e.printStackTrace();
//                        JOptionPane.showMessageDialog(null, e.getMessage());
//                    }
//                } catch (Exception e) {
////                    e.printStackTrace();
//                    JOptionPane.showMessageDialog(this, "Error in connectivity");
//                }
//
//            } catch (Exception e) {
////                e.printStackTrace();
//                JOptionPane.showMessageDialog(null, e.getMessage());
//            }
//        }
//
//        // TODO add your handling code here:
//    }

    private void jTextField160ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField160ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField160ActionPerformed


    private void jMenuItem26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem26ActionPerformed
        if (jTextLogin.getText().equals("ADMINISTRATOR")) {
            try (PreparedStatement ps1ez = db_Connection.getInstance().prepareStatement("SELECT product, qty, unit, factory, rawcost, ingcost, packcost+ lblcost as packcost, mancost, briqcost+ fuelcost as fuelcost, elecost, dieselcost, Unit_Cost FROM canning.bom_cost order by factory,product;")) {
                ResultSet rsPadd = ps1ez.executeQuery();
                ExportAndImport.bomTable.setModel(rsToTableModels.aboveMarginModel.buildTableModel(rsPadd));
                ps1ez.close();
                try {

                    ExportAndImport.jComboing.setModel(new DefaultComboBoxModel(ingredientReturns.getIngredient().toArray()));
                    ExportAndImport.jCombopprod.setModel(new DefaultComboBoxModel(productReturns.getProduct().toArray()));
                    ExportAndImport.jCombo_package.setModel(new DefaultComboBoxModel(packageReturns.getPackage().toArray()));
                    ExportAndImport.jCombo_label.setModel(new DefaultComboBoxModel(labelReturns.getLabel().toArray()));

                    MainPanel.removeAll();
                    MainPanel.add(bomPanel);
                    MainPanel.repaint();
                    MainPanel.revalidate();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Database Error");
//                        e.printStackTrace();
                }
            } catch (Exception e) {
                Logger.getLogger(NewJFrame.class
                        .getName()).log(Level.SEVERE, null, e);
                e.printStackTrace();
            }

        } else {
            String pck = jTextLogin.getText();
            try (PreparedStatement ps1ez = db_Connection.getInstance().prepareStatement("SELECT product, qty, unit, factory, rawcost, ingcost, packcost+ lblcost as packcost, mancost, briqcost+ fuelcost as fuelcost, elecost, dieselcost, Unit_Cost FROM canning.bom_cost where factory=? order by factory,product;")) {

                ps1ez.setString(1, pck);
                ResultSet rsPadd = ps1ez.executeQuery();
                ExportAndImport.bomTable.setModel(rsToTableModels.aboveMarginModel.buildTableModel(rsPadd));
                ps1ez.close();
                try {

                    ExportAndImport.jComboing.setModel(new DefaultComboBoxModel(ingredientReturns.getIngredient().toArray()));
                    ExportAndImport.jCombopprod.setModel(new DefaultComboBoxModel(productReturns.getProduct().toArray()));
                    ExportAndImport.jCombo_package.setModel(new DefaultComboBoxModel(packageReturns.getPackage().toArray()));
                    ExportAndImport.jCombo_label.setModel(new DefaultComboBoxModel(labelReturns.getLabel().toArray()));

                    MainPanel.removeAll();
                    MainPanel.add(bomPanel);
                    MainPanel.repaint();
                    MainPanel.revalidate();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Database Error");
//                        e.printStackTrace();
                }
            } catch (Exception e) {
                Logger.getLogger(NewJFrame.class
                        .getName()).log(Level.SEVERE, null, e);
                e.printStackTrace();
            }
        }

//        if ("ADMINISTRATOR".equals(jTextLogin.getText())) {
//            // jComboBox24.removeAllItems();
//            try {
//                ExportAndImport.jComboing.setModel(new  DefaultComboBoxModel(ingredientReturns.getIngredient().toArray()));
//                   ExportAndImport.jCombopprod.setModel(new DefaultComboBoxModel(productReturns.getProduct().toArray()));
//                ExportAndImport.jCombo_package.setModel(new DefaultComboBoxModel(packageReturns.getPackage().toArray()));
//                ExportAndImport.jCombo_label.setModel(new DefaultComboBoxModel(labelReturns.getLabel().toArray()));              
//                           
//                MainPanel.removeAll();
//                MainPanel.add(bomPanel);
//                MainPanel.repaint();
//                MainPanel.revalidate();
//
////                jPanelTabpackrpt.removeAll();
////                jPanelTabpackrpt.add(jPanel40);
////                jPanelTabpackrpt.repaint();
////                jPanelTabpackrpt.revalidate();
//            } catch (Exception e) {
//                JOptionPane.showMessageDialog(null, "Database Error");
////                        e.printStackTrace();
//            }
//        } else {
//            String hpy = jTextLogin.getText();
//
//            try (PreparedStatement psc1st = db_Connection.getInstance().prepareStatement("SELECT distinct(product_name) FROM product where factory ='" + hpy + "' ")) {
//
//                try {
//                    rs = psc1st.executeQuery();
//
//                    while (rs.next()) {
//                         ExportAndImport.jCombopprod.addItem(rs.getString("product_name"));
//
//                    }//Package
//                    String PBO = "select * from package where factory='" + hpy + "'";
//                    try (PreparedStatement comboPACK = db_Connection.getInstance().prepareStatement(PBO)) {
//                        rs = comboPACK.executeQuery();
//
//                        while (rs.next()) {
//                             ExportAndImport.jCombo_package.addItem(rs.getString("can_name"));
//                             ExportAndImport.jCombo_label.addItem(rs.getString("label_name"));
//                        }
//                        MainPanel.removeAll();
//                        MainPanel.add(bomPanel);
//                        MainPanel.repaint();
//                        MainPanel.revalidate();
//
//                        rs.close();
//                        psc1st.close();
//                    } catch (Exception e) {
//                        JOptionPane.showMessageDialog(null, "Database Error");
////                        e.printStackTrace();
//                    }
//
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, "Database Error");
////                    e.printStackTrace();
//                }
//            } catch (Exception e) {
//                JOptionPane.showMessageDialog(null, "Error connection");
////                e.printStackTrace();
//            }
//        }
//        
//   
//       
//// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem26ActionPerformed

//    public void comboBom() throws HeadlessException {
//        //       comb bill of materials panelbom
//        String keicfac = (String) jComboBox41.getSelectedItem();
//        String keic2 = jTextLogin.getText();
//        jComboBox45.removeAllItems();
//
//        if ("ADMINISTRATOR".equals(jTextLogin.getText())) {
//            if (jComboBox44.getSelectedItem() == "Raw Material") {
//
//                //PRODUCT
//                String PRODCOMBO = "select * from raw_material where factory = '" + keicfac + "'";
//                try (PreparedStatement comboprod = db_Connection.getInstance().prepareStatement(PRODCOMBO)) {
//                    rs = comboprod.executeQuery();
//
//                    while (rs.next()) {
//                        jComboBox45.addItem(rs.getString("raw_material_name"));
//                    }
//                    rs.close();
//                    comboprod.close();
//
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, "Database Error");
////                    e.printStackTrace();
//                }
//
//            } else if (jComboBox44.getSelectedItem() == "Ingredient") {
//                //RAW MATEERIAL
//                String RAWCOMBO = "select * from ingredients where factory = '" + keicfac + "'";
//                try (PreparedStatement comboraw = db_Connection.getInstance().prepareStatement(RAWCOMBO)) {
//                    rs = comboraw.executeQuery();
//
//                    while (rs.next()) {
//                        jComboBox45.addItem(rs.getString("ingredient_name"));
//                    }
//                    rs.close();
//                    comboraw.close();
//
//                } catch (Exception e) {
////                    e.printStackTrace();
//                    JOptionPane.showMessageDialog(null, "Error connection!!!");
//                }
//            }
//            //
//        } else {
//            if (jComboBox44.getSelectedItem() == "Raw Material") {
//
//                //PRODUCT
//                String PRODCOMBO = "select * from raw_material where factory = '" + keic2 + "'";
//                try (PreparedStatement comboprod = db_Connection.getInstance().prepareStatement(PRODCOMBO)) {
//                    rs = comboprod.executeQuery();
//
//                    while (rs.next()) {
//                        jComboBox45.addItem(rs.getString("raw_material_name"));
//                    }
//                    rs.close();
//                    comboprod.close();
//
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, "Database Error");
////                    e.printStackTrace();
//                }
//
//            } else if (jComboBox44.getSelectedItem() == "Ingredient") {
//                //RAW MATEERIAL
//                String RAWCOMBO = "select * from ingredients where factory = '" + keic2 + "'";
//                try (PreparedStatement comboraw = db_Connection.getInstance().prepareStatement(RAWCOMBO)) {
//                    rs = comboraw.executeQuery();
//
//                    while (rs.next()) {
//                        jComboBox45.addItem(rs.getString("ingredient_name"));
//                    }
//                    rs.close();
//                    comboraw.close();
//
//                } catch (Exception e) {
////                    e.printStackTrace();
//                    JOptionPane.showMessageDialog(null, "Error connection!!!");
//                }
//            }
//        }
//
//        // TODO add your handling code here:
//    }

    private void jButton88ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton88ActionPerformed
        ingstock();
    }//GEN-LAST:event_jButton88ActionPerformed

    private void jMenuItem25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem25ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem25ActionPerformed

    private void jComboBox46ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox46ActionPerformed
        comboSort();
    }//GEN-LAST:event_jComboBox46ActionPerformed

    public void comboSort() throws HeadlessException {
        //ComboSorting panel sorting
        String keic2 = jTextLogin.getText();
        jCombosort.removeAllItems();

        if ("ADMINISTRATOR".equals(jTextLogin.getText())) {
            if (jComboBox46.getSelectedItem() == "Raw Material") {

                //PRODUCT
                String PRODCOMBO = "select * from raw_material";
                try (PreparedStatement comboprod = db_Connection.getInstance().prepareStatement(PRODCOMBO)) {
                    rs = comboprod.executeQuery();

                    while (rs.next()) {
                        jCombosort.addItem(rs.getString("raw_material_name"));
                    }
                    jLabel210.setText("Raw Material");
                    rs.close();
                    comboprod.close();

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Database Error");
//                    e.printStackTrace();
                }

            } else if (jComboBox46.getSelectedItem() == "Ingredient") {
                //RAW MATEERIAL
                String RAWCOMBO = "select * from ingredients";
                try (PreparedStatement comboraw = db_Connection.getInstance().prepareStatement(RAWCOMBO)) {
                    rs = comboraw.executeQuery();

                    while (rs.next()) {
                        jCombosort.addItem(rs.getString("ingredient_name"));
                    }
                    jLabel210.setText("Ingredient");
                    rs.close();
                    comboraw.close();

                } catch (Exception e) {
//                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error connection");
                }
            } else if (jComboBox46.getSelectedItem() == "Product") {
                //RAW MATEERIAL
                String RAWCOMBO = "select * from product";
                try (PreparedStatement comboraw = db_Connection.getInstance().prepareStatement(RAWCOMBO)) {
                    rs = comboraw.executeQuery();
                    while (rs.next()) {
                        jCombosort.addItem(rs.getString("product_name"));
                    }
                    jLabel210.setText("Product");
                    rs.close();
                    comboraw.close();
                } catch (Exception e) {
//                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error connection");
                }
            }           //
        } else {
            if (jComboBox46.getSelectedItem() == "Raw Material") {

                //PRODUCT
                String PRODCOMBO = "select * from raw_material where factory = '" + keic2 + "'";
                try (PreparedStatement comboprod = db_Connection.getInstance().prepareStatement(PRODCOMBO)) {
                    rs = comboprod.executeQuery();

                    while (rs.next()) {
                        jCombosort.addItem(rs.getString("raw_material_name"));
                    }
                    jLabel210.setText("Raw Material");
                    rs.close();
                    comboprod.close();

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Database Error");
//                    e.printStackTrace();
                }

            } else if (jComboBox46.getSelectedItem() == "Ingredient") {
                //RAW MATEERIAL
                String RAWCOMBO = "select * from ingredients where factory = '" + keic2 + "'";
                try (PreparedStatement comboraw = db_Connection.getInstance().prepareStatement(RAWCOMBO)) {
                    rs = comboraw.executeQuery();

                    while (rs.next()) {
                        jCombosort.addItem(rs.getString("ingredient_name"));
                    }
                    jLabel210.setText("Ingredient");
                    rs.close();
                    comboraw.close();

                } catch (Exception e) {
//                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error connection");
                }
            } else if (jComboBox46.getSelectedItem() == "Product") {
                //RAW MATEERIAL
                String RAWCOMBO = "select * from product where factory = '" + keic2 + "'";
                try (PreparedStatement comboraw = db_Connection.getInstance().prepareStatement(RAWCOMBO)) {
                    rs = comboraw.executeQuery();

                    while (rs.next()) {
                        jCombosort.addItem(rs.getString("product_name"));
                    }
                    jLabel210.setText("Product");
                    rs.close();
                    comboraw.close();

                } catch (Exception e) {
//                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error connection");
                }
            }
        }

        // TODO add your handling code here:
    }

    private void jButton66ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton66ActionPerformed
        packrpttbl();
    }//GEN-LAST:event_jButton66ActionPerformed
    public void packrpttbl() throws HeadlessException {
        String pck = jTextLogin.getText();
        if ("ADMINISTRATOR".equals(jTextLogin.getText())) {
            try {
                DefaultTableModel modelsale1 = (DefaultTableModel) jTable40.getModel();
                try {
                    int z4 = modelsale1.getRowCount();
                    for (int lu3 = 0; lu3 <= z4; ++lu3) {
                        modelsale1.removeRow(0);
                    }
                } catch (Exception e) {
                }
                try {
                    String quer = "SELECT * FROM packed_product order by date";
                    try (PreparedStatement stmt4 = db_Connection.getInstance().prepareStatement(quer)) {
                        rs = stmt4.executeQuery(quer);
                        while (rs.next()) {
                            modelsale1.addRow(new Object[]{rs.getInt("packed_productid"), rs.getString("date"), rs.getString("packed_product"), rs.getDouble("packed_qty"), rs.getDouble("manpower_hrs")});
                        }
                        stmt4.close();
                        jPanel62.removeAll();
                        jPanel62.add(jPanel40);
                        jPanel62.repaint();
                        jPanel62.revalidate();
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
//                ex.printStackTrace();
                }
            } catch (Exception ex) {
//            ex.printStackTrace();
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        } else {
            try {
                DefaultTableModel modelsale1 = (DefaultTableModel) jTable40.getModel();
                try {
                    int z4 = modelsale1.getRowCount();
                    for (int lu3 = 0; lu3 <= z4; ++lu3) {
                        modelsale1.removeRow(0);
                    }
                } catch (Exception e) {
                }
                try {

                    String quer = "SELECT * FROM packed_product where factory = '" + pck + "' order by date";
                    try (PreparedStatement stmt4 = db_Connection.getInstance().prepareStatement(quer)) {
                        rs = stmt4.executeQuery(quer);
                        while (rs.next()) {
                            modelsale1.addRow(new Object[]{rs.getInt("packed_productid"), rs.getString("date"), rs.getString("packed_product"), rs.getDouble("packed_qty"), rs.getDouble("manpower_hrs")});
                        }
                        stmt4.close();
                    }
                    jPanel62.removeAll();
                    jPanel62.add(jPanel40);
                    jPanel62.repaint();
                    jPanel62.revalidate();
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
//                ex.printStackTrace();
                }
            } catch (Exception ex) {
//            ex.printStackTrace();
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        }     // TODO add your handling code here:
    }

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        try {
            String insid = jTextId.getText();
            String refac = jTextLogin.getText();
            String recat = (String) jComborecp.getSelectedItem();
            String refrm = (String) jComboFrom.getSelectedItem();
            String arm = jTextQty.getText();
            Double reqty = Double.valueOf(arm);
            String raw = (String) jComboName.getSelectedItem();
//            INSERT INTO subrecp(insertid,factory,category,'frome',item,qty,addedby)"
            String readd = jTextUser.getText();
            try {
                PreparedStatement ps4 = db_Connection.getInstance().prepareStatement("INSERT INTO `canning`.`subrecp` (`insertid`, `factory`, `category`, `frome`, `item`, `qty`, `addedby`,`date`)"
                        + "values(?,?,?,?,?,?,?,?)");
                ps4.setString(1, insid);
                ps4.setString(2, refac);
                ps4.setString(3, recat);
                ps4.setString(4, refrm);
                ps4.setString(5, raw);
                ps4.setDouble(6, reqty);
                ps4.setString(7, readd);
                ps4.setString(8, ((JTextField) jDaterecp.getDateEditor().getUiComponent()).getText());
                ps4.executeUpdate();
                try {
                    DefaultTableModel model = (DefaultTableModel) jTablerecp.getModel();
                    try {
                        int e3 = model.getRowCount();
                        for (int eu3 = 0; eu3 <= e3; ++eu3) {
                            model.removeRow(0);
                        }
                    } catch (Exception e) {
                    }
                    try (PreparedStatement pse = db_Connection.getInstance().prepareStatement("SELECT * FROM subrecp where insertid = '" + insid + "';")) {
                        rs = pse.executeQuery();
                        while (rs.next()) {
                            model.addRow(new Object[]{rs.getString("category"), rs.getString("item"), rs.getDouble("qty"), rs.getString("frome")});
                        }
                        rs.close();
                        pse.close();
//                                       JOptionPane.showMessageDialog(null, "The data was successfully added to the Database!");
                    } catch (Exception e) {
//                                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Error in connectivity");
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
//                                    e.printStackTrace();
                }

            } catch (Exception e) {
//                                e.printStackTrace();
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        } catch (Exception ex) {
//                ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButton94ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton94ActionPerformed
        Integer nu = 0;
        try {
            String factrecp = jTextLogin.getText();
            String addrecp = jTextUser.getText();
            try {
                PreparedStatement ps4 = db_Connection.getInstance().prepareStatement("INSERT INTO mainrecp(date,factory,addedby)"
                        + "values(?,?,?)", Statement.RETURN_GENERATED_KEYS);
                ps4.setString(1, ((JTextField) jDaterecp.getDateEditor().getUiComponent()).getText());
                ps4.setString(2, factrecp);
                ps4.setString(3, addrecp);
//                Integer nu=0;
//               , Statement.RETURN_GENERATED_KEYS);
                nu = ps4.executeUpdate();
                ResultSet ars = ps4.getGeneratedKeys();
                if (ars.next()) {
//                jTextField3.setText(ares.getInt(1).);
                    jTextId.setText(String.valueOf(ars.getInt(1)));
                }
                jComborecp.setEnabled(true);
                jComboFrom.setEnabled(true);
                jComboName.setEnabled(true);
                jComborecp.setEnabled(true);
                jTextQty.setEnabled(true);
                jButtonDiscard.setEnabled(true);
                jButtonSave.setEnabled(true);
                jButtonSaveall.setEnabled(true);
                jTablerecp.setEnabled(true);
                JOptionPane.showMessageDialog(null, "The data was successfully added to the Database!");
            } catch (Exception ex) {
//                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        } catch (Exception ex) {
//            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton94ActionPerformed

    private void jComborecpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComborecpActionPerformed
        itemCategory();
    }//GEN-LAST:event_jComborecpActionPerformed

    public void itemCategory() throws HeadlessException {
//        panel reception product reception category on combo
        String keic2 = jTextLogin.getText();
        jComboName.removeAllItems();
        if ("ADMINISTRATOR".equals(jTextLogin.getText())) {
            if (jComborecp.getSelectedItem() == "Raw Material") {
                //PRODUCT
                String RAWrecp = "select * from raw_material";
                try (PreparedStatement comboprod = db_Connection.getInstance().prepareStatement(RAWrecp)) {
                    rs = comboprod.executeQuery();
                    while (rs.next()) {
                        jComboName.addItem(rs.getString("raw_material_name"));
                    }
                    jLabel234.setText("Raw Material");
                    rs.close();
                    comboprod.close();

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Database Error");
//                    e.printStackTrace();
                }

            } else if (jComborecp.getSelectedItem() == "Ingredient") {
                //RAW MATEERIAL
                String ingrecp = "select * from ingredients";
                try (PreparedStatement comboraw = db_Connection.getInstance().prepareStatement(ingrecp)) {
                    rs = comboraw.executeQuery();

                    while (rs.next()) {
                        jComboName.addItem(rs.getString("ingredient_name"));
                    }
                    jLabel234.setText("Ingredient");
                    rs.close();
                    comboraw.close();

                } catch (Exception e) {
//                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error connection");
                }
            } else if (jComborecp.getSelectedItem() == "Product") {
                //RAW MATEERIAL
                String prodrecp = "select * from product";
                try (PreparedStatement comboraw = db_Connection.getInstance().prepareStatement(prodrecp)) {
                    rs = comboraw.executeQuery();

                    while (rs.next()) {
                        jComboName.addItem(rs.getString("product_name"));
                    }
                    jLabel234.setText("Product");
                    rs.close();
                    comboraw.close();

                } catch (Exception e) {
//                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error connection");
                }
            } else if (jComborecp.getSelectedItem() == "Package") {
                //RAW MATEERIAL
                String ingrecp = "select * from package";
                try (PreparedStatement comboraw = db_Connection.getInstance().prepareStatement(ingrecp)) {
                    rs = comboraw.executeQuery();

                    while (rs.next()) {
                        jComboName.addItem(rs.getString("can_name"));
                    }
                    jLabel234.setText("Package");
                    rs.close();
                    comboraw.close();

                } catch (Exception e) {
//                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error connection");
                }
            }
        } else {
            if (jComborecp.getSelectedItem() == "Raw Material") {

                //PRODUCT
                String RAWrecp = "select * from raw_material where factory = '" + keic2 + "'";
                try (PreparedStatement comboprod = db_Connection.getInstance().prepareStatement(RAWrecp)) {
                    rs = comboprod.executeQuery();

                    while (rs.next()) {
                        jComboName.addItem(rs.getString("raw_material_name"));
                    }
                    jLabel234.setText("Raw Material");
                    rs.close();
                    comboprod.close();

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Database Error");
//                    e.printStackTrace();
                }

            } else if (jComborecp.getSelectedItem() == "Ingredient") {
                //RAW MATEERIAL
                String ingrecp = "select * from ingredients where factory = '" + keic2 + "'";
                try (PreparedStatement comboraw = db_Connection.getInstance().prepareStatement(ingrecp)) {
                    rs = comboraw.executeQuery();

                    while (rs.next()) {
                        jComboName.addItem(rs.getString("ingredient_name"));
                    }
                    jLabel234.setText("Ingredient");
                    rs.close();
                    comboraw.close();

                } catch (Exception e) {
//                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error connection");
                }
            } else if (jComborecp.getSelectedItem() == "Product") {
                //RAW MATEERIAL
                String prodrecp = "select * from product where factory = '" + keic2 + "'";
                try (PreparedStatement comboraw = db_Connection.getInstance().prepareStatement(prodrecp)) {
                    rs = comboraw.executeQuery();

                    while (rs.next()) {
                        jComboName.addItem(rs.getString("product_name"));
                    }
                    jLabel234.setText("Product");
                    rs.close();
                    comboraw.close();

                } catch (Exception e) {
//                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error connection");
                }
            } else if (jComborecp.getSelectedItem() == "Package") {
                //RAW MATEERIAL
                String ingrecp = "select * from package where factory = '" + keic2 + "'";
                try (PreparedStatement comboraw = db_Connection.getInstance().prepareStatement(ingrecp)) {
                    rs = comboraw.executeQuery();

                    while (rs.next()) {
                        jComboName.addItem(rs.getString("can_name"));
                    }
                    jLabel234.setText("Package");
                    rs.close();
                    comboraw.close();

                } catch (Exception e) {
//                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error connection");
                }
            }
        }
        // TODO add your handling code here:
    }

    private void jMenuItem27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem27ActionPerformed
        MainPanel.removeAll();
        MainPanel.add(jPanelRecp);
        MainPanel.repaint();
        MainPanel.revalidate();

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem27ActionPerformed

    private void jComboRawPastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboRawPastActionPerformed
        String strawm = (String) jComboRawPast.getSelectedItem();
        jComboBox29.removeAllItems();
        try (PreparedStatement ps6 = db_Connection.getInstance().prepareStatement("SELECT main_material FROM raw_material WHERE raw_material_name =? into @skram;")) {
            ps6.setString(1, strawm);
            ps6.execute();
            ResultSet rsPadda = ps6.executeQuery("SELECT * FROM raw_material_reception WHERE raw_material =@skram");
            while (rsPadda.next()) {
                jComboBox29.addItem(rsPadda.getString("cons_no"));
                //                                rawm.setText(rsPadda.getString("cons_no"));
            }
            rsPadda.close();
        } catch (SQLException e) {
            Logger.getLogger(NewJFrame.class
                    .getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(null, "Error in connectivity");
        } catch (InstantiationException ex) {
            Logger.getLogger(NewJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jComboRawPastActionPerformed

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        int numRows1 = jTable3.getRowCount();
        for (int row_b = 0; row_b < numRows1; row_b++) {
            String numberless = jTextField154.getText();
            jTable3.setValueAt(numberless, row_b, 0);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jTable3MouseClicked

    private void fieldinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldinActionPerformed
//requisation.requisation.RequesitionClass.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldinActionPerformed

    private void jMenuItem28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem28ActionPerformed
//       try (PreparedStatement ps1ez = db_Connection.getInstance().prepareStatement("SELECT * FROM production order by date desc")) {
//                                        ResultSet rsPadd = ps1ez.executeQuery();
//                    jTable21.setModel(rsToTableModels.aboveMarginModel.buildTableModel(rsPadd));
//                } catch (Exception e) {
//                    Logger.getLogger(NewJFrame.class
//                            .getName()).log(Level.SEVERE, null, e);
//                    e.printStackTrace();
//                }
        MainPanel.removeAll();
        MainPanel.add(jPanelmodVouch);
        MainPanel.repaint();
        MainPanel.revalidate();
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem28ActionPerformed

    private void jPasswordField_PasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPasswordField_PasswordKeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_ENTER:
                logArithmic();
                break;
            default:
            ;

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jPasswordField_PasswordKeyPressed

    private void jButton_LoginFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButton_LoginFocusGained

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_LoginFocusGained

    private void jButton_LoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_LoginActionPerformed
        logArithmic();

    }//GEN-LAST:event_jButton_LoginActionPerformed

    private void jButton_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CancelActionPerformed
        System.exit(0);
//        jTextField_Username.setText(jTextLogin.getText());
    }//GEN-LAST:event_jButton_CancelActionPerformed

    private void jTextField162ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField162ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField162ActionPerformed

    private void jButton91ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton91ActionPerformed
        modvchr();
    }//GEN-LAST:event_jButton91ActionPerformed

    public void modvchr() {
//        jpanel mod voucher loads voucher data from db
        MainPanel.removeAll();
        MainPanel.add(jPanel3);
        MainPanel.repaint();
        MainPanel.revalidate();
        String friah = jTextField163.getText();
        jTextField3.setText(jTextField163.getText());
        try {
            DefaultTableModel modelfriah = (DefaultTableModel) jTable14.getModel();

            try {
                int z = modelfriah.getRowCount();
                for (int lue = 0; lue <= z; ++lue) {
                    modelfriah.removeRow(0);
                }

            } catch (Exception e) {
                //                           JOptionPane.showMessageDialog(null, "Cannot save." + e);
                //                               e.printStackTrace();
            }

            try (PreparedStatement ps17 = db_Connection.getInstance().prepareStatement("SELECT * FROM prodpriceinclusive where voucher_no = '" + friah + "';")) {
                rs = ps17.executeQuery();

                while (rs.next()) {
                    modelfriah.addRow(new Object[]{rs.getString("ProductionID"), rs.getString("product_name"), rs.getDouble("quantity"), rs.getString("unit"), rs.getString("groupe")});
                }

                rs.close();
                //DISPLAY PRODUCT TEXTFIELD
                try {

                    //                            Connection con18 = (Connection) db_Connection.getInstance();
                    //                Statement stmt4 = con18.createStatement();
                    try {
                        String t = "SELECT sum(quantity),date FROM prodpriceinclusive WHERE voucher_no= '" + friah + "';";

                        try (PreparedStatement psc = db_Connection.getInstance().prepareStatement(t)) {
                            rs = psc.executeQuery(t);

                            if (rs.next()) {
                                Double kansal = rs.getDouble(1);
                                jDate1.setDate(rs.getDate("date"));
                                jTextField45.setText(String.valueOf(kansal));
                            }
                            //                            String manqq=jTextField45.getText();
                            //                            String manq=twa
                            psc.close();
                            rs.close();

                            try {
                                DefaultTableModel model = (DefaultTableModel) jTable15.getModel();

                                try {
                                    int z3 = model.getRowCount();
                                    for (int lu3 = 0; lu3 <= z3; ++lu3) {
                                        model.removeRow(0);
                                    }
                                } catch (Exception e) {
                                }
                                try (PreparedStatement ps5 = db_Connection.getInstance().prepareStatement("SELECT * FROM rawmatpriceinc where voucher_no = '" + friah + "';")) {
                                    rs = ps5.executeQuery();
                                    while (rs.next()) {
                                        model.addRow(new Object[]{rs.getInt("ProductionID"), rs.getString("raw_material"), rs.getDouble("qty"), rs.getInt("RawID"), rs.getString("cons_no")});
                                    }
                                    try {
                                        try {
                                            String tea = "SELECT sum(qty) FROM rawmatpriceinc WHERE voucher_no= '" + friah + "';";

                                            try (PreparedStatement pscea = db_Connection.getInstance().prepareStatement(tea)) {
                                                rs = pscea.executeQuery(tea);

                                                if (rs.next()) {
                                                    Double bansal = rs.getDouble(1);

                                                    jTextField43.setText(String.valueOf(bansal));
                                                }
                                                pscea.close();
//                                        conraw.commit();
                                            }
                                        } catch (Exception e) {
                                            JOptionPane.showMessageDialog(null, "Cannot save." + e);
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, e.getMessage());
                                    }

                                    rs.close();
                                    ps5.close();

                                    //TABLE PANEL ADD
                                    try {
                                        DefaultTableModel modeel = (DefaultTableModel) jTable16.getModel();

                                        try {
                                            int z3 = modeel.getRowCount();
                                            for (int lu3 = 0; lu3 <= z3; ++lu3) {
                                                modeel.removeRow(0);
                                            }
                                        } catch (Exception e) {
                                        }
                                        try (PreparedStatement ps7 = db_Connection.getInstance().prepareStatement("SELECT * FROM ingredpriceinc where voucher_no = '" + friah + "';")) {
                                            rs = ps7.executeQuery();
                                            while (rs.next()) {
                                                modeel.addRow(new Object[]{rs.getInt("ProductionID"), rs.getString("ingredient_name"), rs.getDouble("ingredient_qty"), rs.getInt("ingredID"), rs.getDouble("ingredient_price"), rs.getString("cons_no")});
                                            }
                                            //SUM ING QTY
                                            try {
                                                String eet = "SELECT sum(ingredient_qty) FROM ingredpriceinc WHERE voucher_no= '" + friah + "';";
                                                try (PreparedStatement peesc = db_Connection.getInstance().prepareStatement(eet)) {
                                                    rs = peesc.executeQuery(eet);
                                                    if (rs.next()) {
                                                        Double bansal = rs.getDouble(1);
                                                        jTextField44.setText(String.valueOf(bansal));
                                                    }
//                                    coning.commit();
                                                    rs.close();
                                                    peesc.close();
                                                }
                                            } catch (Exception e) {
//                                                    e.printStackTrace();
                                                JOptionPane.showMessageDialog(null, "Cannot save." + e);
                                            }
                                            rs.close();
                                            ps7.close();

                                            //TABLE INSERT
                                            try {
                                                DefaultTableModel moel = (DefaultTableModel) jTable17.getModel();

                                                try {
                                                    int e3 = moel.getRowCount();
                                                    for (int eu3 = 0; eu3 <= e3; ++eu3) {
                                                        moel.removeRow(0);
                                                    }
                                                } catch (Exception e) {
                                                }
                                                try (PreparedStatement pscee = db_Connection.getInstance().prepareStatement("SELECT * FROM packageproduction where voucher_no = '" + friah + "';")) {
                                                    rs = pscee.executeQuery();
                                                    while (rs.next()) {
                                                        moel.addRow(new Object[]{rs.getString("packId"), rs.getString("can_name"), rs.getDouble("no_of_cans"), rs.getString("label_name"), rs.getDouble("no_of_labels")});
                                                    }
                                                    rs.close();
                                                    pscee.close();
                                                } catch (Exception e) {
//                                                        e.printStackTrace();
                                                    JOptionPane.showMessageDialog(this, "Error in connectivity");
                                                }
                                            } catch (Exception e) {
                                                JOptionPane.showMessageDialog(null, e.getMessage());
//                                                    e.printStackTrace();
                                            }
                                        } catch (Exception e) {
//                                                e.printStackTrace();
                                            JOptionPane.showMessageDialog(this, "Error in connectivity");
                                        }
                                    } catch (Exception e) {
//                                            e.printStackTrace();
                                        JOptionPane.showMessageDialog(null, "Invalid Entry or field must be completely filled", "message", 2);
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, e.getMessage());
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e.getMessage());
                            }
                        }
                    } catch (Exception e) {
                        //                            e.printStackTrace();
                        JOptionPane.showMessageDialog(null, "Cannot save." + e);
                    }
                } catch (Exception ex) {
                    Logger.getLogger(NewJFrame.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
                ps17.close();
            } catch (Exception ex) {
                Logger.getLogger(NewJFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception ex) {
            Logger.getLogger(NewJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        // TODO add your handling code here:
    }

    private void jTextField163KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField163KeyPressed

    }//GEN-LAST:event_jTextField163KeyPressed

    private void jButton90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton90ActionPerformed

        try (PreparedStatement ps1ez = db_Connection.getInstance().prepareStatement("SELECT * FROM production where date between ? and ? order by date,factory")) {
            ps1ez.setString(1, ((JTextField) jDateChooser4.getDateEditor().getUiComponent()).getText());
            ps1ez.setString(2, ((JTextField) jDateChooser7.getDateEditor().getUiComponent()).getText());
            ResultSet rsPadd = ps1ez.executeQuery();
            jTable21.setModel(rsToTableModels.aboveMarginModel.buildTableModel(rsPadd));
            ps1ez.close();
            rsPadd.close();
        } catch (Exception e) {
            Logger.getLogger(NewJFrame.class
                    .getName()).log(Level.SEVERE, null, e);
            e.printStackTrace();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton90ActionPerformed

    private void jButton92ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton92ActionPerformed
        Integer nuer = 0;
        try {
//inserts to main transfer
            String trom = jTextLogin.getText();
            String twoe = (String) jCombotoe.getSelectedItem();
            try {
                PreparedStatement ps4 = db_Connection.getInstance().prepareStatement("INSERT INTO maintransfer(`date`,`from`,`to`) values(?,?,?)", Statement.RETURN_GENERATED_KEYS);
                ps4.setString(1, ((JTextField) jtransDate.getDateEditor().getUiComponent()).getText());
                ps4.setString(2, trom);
                ps4.setString(3, twoe);
                nuer = ps4.executeUpdate();
                ResultSet aars = ps4.getGeneratedKeys();
                if (aars.next()) {
                    jTextFieldid.setText(String.valueOf(aars.getInt(1)));
                }
                JOptionPane.showMessageDialog(null, "The data was successfully added to the Database!");
                jComboBox48.setEnabled(true);
                jTexty.setEnabled(true);
                jTextid.setEnabled(true);
                jButton92.setEnabled(true);
                jButton95.setEnabled(true);
                jButton93.setEnabled(true);
                jTable42.setEnabled(true);
                jLabel244.setEnabled(true);
                jLabel242.setEnabled(true);
                jLabel243.setEnabled(true);
                jCombotoe.setEnabled(false);
                jtransDate.setEnabled(false);
                jTextFieldid.setEnabled(false);
                jTextcomm.setEnabled(false);
            } catch (Exception ex) {
//                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        } catch (Exception ex) {
//            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton92ActionPerformed

    private void jButton95ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton95ActionPerformed
        com.canning.production.addTransfer.Producttransferinsert();
    }//GEN-LAST:event_jButton95ActionPerformed


    private void jMenuItem29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem29ActionPerformed
        MainPanel.removeAll();
        MainPanel.add(jPanelTransfer);
        MainPanel.repaint();
        MainPanel.revalidate();
//                            jPanel15.removeAll();
//                            jPanel15.add(jPanelTransfer);
//                            jPanel15.repaint();
//                            jPanel15.revalidate();

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem29ActionPerformed

    private void jTextidKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextidKeyPressed
        fldidkeypressed(evt);
    }//GEN-LAST:event_jTextidKeyPressed

    public void fldidkeypressed(KeyEvent evt) throws HeadlessException {
//      PRODUCT TRANSFER PANEL LOADS PRODUCTIONID FROM DATABSE TO TEXTFIELD ID
        if (jComboBox27.getSelectedItem() == "Production") {
            jTextStatus.getText();
            switch (evt.getKeyCode()) {
                case KeyEvent.VK_ENTER:
                    String hypo = jTextLogin.getText();
                    String hpilo = jTextid.getText();
                    if (null == jTextStatus.getText()) {
                        JOptionPane.showMessageDialog(null, "Error Unknown User!!");
//        e.printStackTrace();
                    } else {
                        switch (jTextStatus.getText()) {
                            case "ADMINISTRATOR":
                                jTexty.setText(jTextStatus.getText());
                                try {
                                    PreparedStatement pschy = db_Connection.getInstance().prepareStatement("SELECT distinct(product_name) FROM productproduction where ProductionID='" + hpilo + "' ");
                                    try {
                                        rs = pschy.executeQuery();
                                        while (rs.next()) {
                                            jTextprod.setText(rs.getString("product_name"));
                                        }
                                        rs.close();
                                        pschy.close();

                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Database Error");
//                       e.printStackTrace();
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Error connection");
//                   e.printStackTrace();
                                }
                                break;
                            case "USER":
                                try {
                                PreparedStatement pschy = db_Connection.getInstance().prepareStatement("SELECT distinct(product_name) FROM productproduction where factory='" + hypo + "' and ProductionID='" + hpilo + "' ");

                                try {
                                    rs = pschy.executeQuery();

                                    while (rs.next()) {
                                        jTextprod.setText(rs.getString("product_name"));

                                    }

                                    rs.close();
                                    pschy.close();

                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Database Error");
//                       e.printStackTrace();
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Error connection");
//                   e.printStackTrace();
                            }
                            break;
                            case "WAREHOUSE":
                                try {
                                PreparedStatement pschy = db_Connection.getInstance().prepareStatement("SELECT distinct(product_name) FROM wipstc_idwise where factory='" + hypo + "' and ProductionID='" + hpilo + "' ");

                                try {
                                    rs = pschy.executeQuery();

                                    while (rs.next()) {
                                        jTextprod.setText(rs.getString("product_name"));
                                    }

                                    rs.close();
                                    pschy.close();

                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Database Error");
//                       e.printStackTrace();
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Error connection");
//                   e.printStackTrace();
                            }
                            break;
                            default:
                                JOptionPane.showMessageDialog(null, "Error Unknown User!!");
//        e.printStackTrace();
                                break;
                        }
                    }
                    break;
                default:
            }
        } else if (jComboBox27.getSelectedItem() == "Packing") {
            jTextStatus.getText();
            switch (evt.getKeyCode()) {
                case KeyEvent.VK_ENTER:
                    String hypo = jTextLogin.getText();
                    String hpilo = jTextid.getText();
                    if (null == jTextStatus.getText()) {
                        JOptionPane.showMessageDialog(null, "Error Unknown User!!");
//        e.printStackTrace();
                    } else {
                        switch (jTextStatus.getText()) {
                            case "ADMINISTRATOR":
                                jTexty.setText(jTextStatus.getText());
                                try {
                                    PreparedStatement pschy = db_Connection.getInstance().prepareStatement("SELECT distinct(packed_product) FROM packingcost where packed_productid='" + hpilo + "' ");
                                    try {
                                        rs = pschy.executeQuery();
                                        while (rs.next()) {
                                            jTextprod.setText(rs.getString("packed_product"));
                                        }
                                        rs.close();
                                        pschy.close();

                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Database Error");
//                       e.printStackTrace();
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Error connection");
//                   e.printStackTrace();
                                }
                                break;
                            case "USER":
                                try {
                                PreparedStatement pschy = db_Connection.getInstance().prepareStatement("SELECT distinct(packed_product) FROM packingcost where factory='" + hypo + "' and packed_productid='" + hpilo + "' ");

                                try {
                                    rs = pschy.executeQuery();

                                    while (rs.next()) {
                                        jTextprod.setText(rs.getString("packed_product"));

                                    }

                                    rs.close();
                                    pschy.close();

                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Database Error");
//                       e.printStackTrace();
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Error connection");
//                   e.printStackTrace();
                            }
                            break;
                            case "WAREHOUSE":
                                try {
                                PreparedStatement pschy = db_Connection.getInstance().prepareStatement("SELECT distinct(product_name) FROM wipstc_idwise where factory='" + hypo + "' and ProductionID='" + hpilo + "' ");

                                try {
                                    rs = pschy.executeQuery();

                                    while (rs.next()) {
                                        jTextprod.setText(rs.getString("product_name"));
                                    }
                                    rs.close();
                                    pschy.close();
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Database Error");
//                       e.printStackTrace();
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Error connection");
//                   e.printStackTrace();
                            }
                            break;
                            default:
                                JOptionPane.showMessageDialog(null, "Error Unknown User!!");
//        e.printStackTrace();
                                break;
                        }
                    }
                    break;
                default:
            }
        }
        // TODO add your handling code here:
    }
    private void jButton93ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton93ActionPerformed

        jComboBox48.setEnabled(true);
        jTexty.setEnabled(true);
        jTextid.setEnabled(true);
        jButton92.setEnabled(true);
        jButton95.setEnabled(true);
        jButton93.setEnabled(true);
        jTable42.setEnabled(true);
        jLabel244.setEnabled(true);
        jLabel242.setEnabled(true);
        jLabel243.setEnabled(true);

        jCombotoe.setEnabled(true);
        jtransDate.setEnabled(true);
        jTextFieldid.setEnabled(true);
        jTextcomm.setEnabled(true);
// TODO add your handling code here:
    }//GEN-LAST:event_jButton93ActionPerformed

    private void jButton62ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton62ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton62ActionPerformed

    private void jMenuItem30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem30ActionPerformed
        String pck = jTextLogin.getText();
        wareLog();
        MainPanel.removeAll();
        MainPanel.add(jPanelTransferList);
        MainPanel.repaint();
        MainPanel.revalidate();
    }//GEN-LAST:event_jMenuItem30ActionPerformed

    public void wareLog() throws HeadlessException {

//        jPanel56.removeAll();
//        jPanel56.add(jPanelTransferList);
//        jPanel56.repaint();
//        jPanel56.revalidate();
        try {
            DefaultTableModel modulaes = (DefaultTableModel) jTable43.getModel();
            try {
                int mudzo = modulaes.getRowCount();
                for (int l = 0; l < mudzo; l++) {
                    modulaes.removeRow(0);
                }
                jTable43.getColumnModel().getColumn(4).setHeaderValue("Movement In");
                jTable43.getColumnModel().getColumn(5).setHeaderValue("Movement Out");
                jTable43.getColumnModel().getColumn(6).setHeaderValue("Factory");
                try {
                    try (PreparedStatement sitti = db_Connection.getInstance().prepareStatement("select * from whtranslog where `factory`= ? ")) {
                        sitti.setString(1, jTextLogin.getText());
                        rs = sitti.executeQuery();
                        while (rs.next()) {
                            modulaes.addRow(new Object[]{rs.getInt("transid"), rs.getString("date"), rs.getInt("productionid"), rs.getString("product"), rs.getDouble("in"), rs.getDouble("out"), rs.getString("recipient")});
                        }
                        rs.close();
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
//                    e.printStackTrace();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
//                e.printStackTrace();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
//            e.printStackTrace();
        }
        // TODO add your handling code here:
    }

    private void jButton74ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton74ActionPerformed
        jPanel56.removeAll();
        jPanel56.add(jPanelTransfer);
        jPanel56.repaint();
        jPanel56.revalidate();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton74ActionPerformed

    private void jButton96ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton96ActionPerformed
        jPanel56.removeAll();
        jPanel56.add(WarehouseStock);
        jPanel56.repaint();
        jPanel56.revalidate();
        String cessse = jTextLogin.getText();
        try {
            DefaultTableModel modulaes1 = (DefaultTableModel) jTable41.getModel();
            try {
                int mudzo = modulaes1.getRowCount();
                for (int l = 0; l < mudzo; l++) {
                    modulaes1.removeRow(0);
                }
                try (PreparedStatement sittie = db_Connection.getInstance().prepareStatement("select * from wipstock where factory = ? ")) {
                    sittie.setString(1, cessse);
                    rs = sittie.executeQuery();
                    while (rs.next()) {
                        modulaes1.addRow(new Object[]{rs.getString("product"), rs.getString("unit"), rs.getDouble("unit_price"), rs.getDouble("stock_in_hand"), rs.getDouble("reorder_level"), rs.getDouble("qtyin_reorder")});
                    }
                    rs.close();
                    sittie.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
//                    e.printStackTrace();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
//                    e.printStackTrace();
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
//                    e.printStackTrace();  
        }
// TODO add your handling code here:
    }//GEN-LAST:event_jButton96ActionPerformed

    private void jButton85ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton85ActionPerformed
        String lexLuther = jTextStatus.getText();
        String fuvment = jTextLogin.getText();
        switch (lexLuther) {
            case "ADMINISTRATOR":
                DefaultTableModel moclark = (DefaultTableModel) jTable12.getModel();
                try {
                    int clrow = moclark.getRowCount();
                    for (int asp = 0; asp <= clrow; asp++) {
                        moclark.removeRow(0);
                    }
                } catch (Exception e) {

                }
                String clark = "select * from rawmaterial_movements order by date asc";
                try (PreparedStatement psclark = db_Connection.getInstance().prepareStatement(clark)) {
                    rs = psclark.executeQuery();
                    while (rs.next()) {
                        moclark.addRow(new Object[]{rs.getString("date"), rs.getString("raw_material"), rs.getDouble("stock_bf"), rs.getDouble("in"), rs.getDouble("out"), rs.getDouble("stock_cf")});

                    }
                    rs.close();
                    psclark.close();
                    jPanel42.removeAll();
                    jPanel42.add(jPanelRawMaterialMovement);
                    jPanel42.repaint();
                    jPanel42.revalidate();
                } catch (SQLException | InstantiationException ex) {
                    Logger.getLogger(NewJFrame.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "USER":
                DefaultTableModel moclark1 = (DefaultTableModel) jTable12.getModel();
                try {
                    int clrow = moclark1.getRowCount();
                    for (int asp = 0; asp <= clrow; asp++) {
                        moclark1.removeRow(0);
                    }
                } catch (Exception e) {

                }
                String clark1 = "select * from rawmaterial_movements WHERE factory = ?  order by date asc";
                try (PreparedStatement psclark1 = db_Connection.getInstance().prepareStatement(clark1)) {
                    psclark1.setString(1, fuvment);
                    rs = psclark1.executeQuery();
                    while (rs.next()) {
                        moclark1.addRow(new Object[]{rs.getString("date"), rs.getString("raw_material"), rs.getDouble("stock_bf"), rs.getDouble("in"), rs.getDouble("out"), rs.getDouble("stock_cf")});

                    }
                    rs.close();
                    psclark1.close();
                    jPanel42.removeAll();
                    jPanel42.add(jPanelRawMaterialMovement);
                    jPanel42.repaint();
                    jPanel42.revalidate();
                } catch (SQLException | InstantiationException ex) {
                    Logger.getLogger(NewJFrame.class
                            .getName()).log(Level.SEVERE, null, ex);
                }

                break;
            default:

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton85ActionPerformed

    private void jComboBox43ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox43ActionPerformed
        //    String kecI = LoginForm.getItem();
        String keic = (String) jComboBox43.getSelectedItem();

        jComboBox24.removeAllItems();

        if (jComboBox43.getSelectedItem() == "All") {

            //PRODUCT
            String PRODCOMBO = "select * from product";
            try (PreparedStatement comboprod = db_Connection.getInstance().prepareStatement(PRODCOMBO)) {
                rs = comboprod.executeQuery();

                while (rs.next()) {
                    jComboBox24.addItem(rs.getString("product_name"));
                }
                rs.close();

                comboprod.close();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Database Error");
//                e.printStackTrace();
            }

        } else {
            //PRODUCT
            String PRODCOMBO = "select * from product where factory = '" + keic + "'";
            try (PreparedStatement comboprod = db_Connection.getInstance().prepareStatement(PRODCOMBO)) {
                rs = comboprod.executeQuery();

                while (rs.next()) {
                    jComboBox24.addItem(rs.getString("product_name"));
                }
                rs.close();

                comboprod.close();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Database Error");
//                e.printStackTrace();
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox43ActionPerformed

    private void jComboBox24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox24ActionPerformed
        //        String date7 = ((JTextField) jDate5.getDateEditor().getUiComponent()).getText();
        //        String date8 = ((JTextField) jDate6.getDateEditor().getUiComponent()).getText();
        //
        //        try {
        //            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        //
        //            if (jRadioButton10.isSelected() == true) {
        //
        //                try {
        //                    Class.forName("com.mysql.jdbc.Driver").newInstance();
        //                    Connection con1hI0 = (Connection) DriverManager.getConnection("jdbc:mysql://192.168.1.190:3306/canning?zeroDateTimeBehavior=convertToNull", "weru", "steve23741997");
        //
        //                    //            String sI = "select * from prodpriceinclusive where date>=? and date<=?";
        //                    String sI = " SELECT distinct(product_name) FROM canning.amounts where date >= ? and date <= ?";
        //
        //                    try (PreparedStatement psI = con1hI0.prepareStatement(sI)) {
        //
        //                        psI.setString(1, date7);
        //                        psI.setString(2, date8);
        //                        rs = psI.executeQuery();
        //
        //                        while (rs.next()) {
        //                            jComboBox24.addItem(rs.getString("product_name"));
        //                        }
        //
        //                        rs.close();
        //                        psI.close();
        //                        con1hI0.close();
        //                    } catch (Exception e) {
        //                        JOptionPane.showMessageDialog(null, "Database Error");
        //                        e.printStackTrace();
        //                    }
        //                } catch (Exception e) {
        //                    JOptionPane.showMessageDialog(null, "Invalid Date");
        //                }
        //
        //            } else {
        //                JOptionPane.showMessageDialog(null, "ONLY FOR DATE BETWEEN");
        //            }
        //        } catch (Exception e) {
        //            JOptionPane.showMessageDialog(null, "Error connection");
        //        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox24ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            jTextField48.setText(null);
            jTextField49.setText(null);
            jTextField58.setText(null);
            jTextField59.setText(null);
            jTextField60.setText(null);
            jTextField61.setText(null);
            jTextField52.setText(null);
            jTextField53.setText(null);
            jTextField54.setText(null);
            jTextField55.setText(null);
            jTextField56.setText(null);
            jTextField33.setText(null);
            jTextField25.setText(null);
            jTextField51.setText(null);
            jTextField50.setText(null);
            jTextField47.setText(null);
            jTextField26.setText(null);
            jTextField27.setText(null);
            jTextField29.setText(null);
            jTextField28.setText(null);
            jTextField34.setText(null);
            jTextField35.setText(null);
            try {
                DefaultTableModel motel = (DefaultTableModel) jTable9.getModel();
                int zc = motel.getRowCount();
                for (int lu3 = 0; lu3 < zc; ++lu3) {
                    motel.setRowCount(0);
                }
                //
                try {
                    DefaultTableModel mosel = (DefaultTableModel) jTable10.getModel();
                    int cz = mosel.getRowCount();
                    for (int l3 = 0; l3 < cz; ++l3) {
                        mosel.setRowCount(0);
                    }

                    try {
                        DefaultTableModel mopel = (DefaultTableModel) jTable11.getModel();
                        int pz = mopel.getRowCount();
                        for (int p3 = 0; p3 < pz; ++p3) {
                            mopel.setRowCount(0);
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Error connection");
//                        e.printStackTrace();
                    }

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error in connection");
//                    e.printStackTrace();
                }
                //
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error connection!!");
//                e.printStackTrace();
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error connection!");

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton32ActionPerformed
        com.canning.reports.costpanelReport.Panel9report();
    }//GEN-LAST:event_jButton32ActionPerformed

// TODO add your handling code here:

    private void jComboBox22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox22ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox22ActionPerformed

    private void jComboBox22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox22MouseClicked
        combogroup();
    }//GEN-LAST:event_jComboBox22MouseClicked

    public void combogroup() throws NumberFormatException, HeadlessException {
        String VC = jTextField25.getText();
        int vci = Integer.valueOf(VC);
        String grup = (String) jComboBox22.getSelectedItem();
        Double electricitycost;
        Double fuelcost;
        jTextField71.setText(null);
        jTextField55.setText(null);
        jTextField56.setText(null);

        String pua = (String) jTextField70.getText();
        Double pua1 = Double.valueOf(pua);

        String xuo = (String) jTextField69.getText();
        Double xao = Double.valueOf(xuo);

        String Qpc = (String) jTextField51.getText();
        Double qpc = Double.valueOf(Qpc);
        String xuoT = (String) jTextField28.getText();
        Double xaoT = Double.valueOf(xuoT);

        ///PROD DISPL
        try {
            DefaultTableModel model = (DefaultTableModel) jTable9.getModel();

            try {
                int z5 = model.getRowCount();
                for (int lu3 = 0; lu3 <= z5; ++lu3) {
                    model.removeRow(0);
                }
            } catch (Exception e) {
            }
            try {

                Connection con19q = (Connection) db_Connection.getInstance();
                try (Statement stmt4 = con19q.createStatement()) {
                    String query4 = "SELECT * FROM prodpriceinclusive where groupe = '" + grup + "' and voucher_no= '" + vci + "';";
                    rs = stmt4.executeQuery(query4);

                    while (rs.next()) {
                        model.addRow(new Object[]{rs.getString("ProductionID"), rs.getString("date"), rs.getString("product_name"), rs.getDouble("quantity"), rs.getString("unit_price"), rs.getDouble("amount")});
                    }
                    rs.close();
                }
            } catch (Exception e) {
//                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error in connectivity");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Invalid Entry or field must be completely filled", "message", 2);
//            e.printStackTrace();
        }
        //AMOUNT DISPLAY
        try {
            Connection con161 = (Connection) db_Connection.getInstance();
            try {
                String T1i = "SELECT truncate(sum(amount), 1) FROM prodpriceinclusive where groupe = '" + grup + "' and voucher_no='" + vci + "';";
                try (PreparedStatement psrw1 = con161.prepareStatement(T1i)) {
                    rs = psrw1.executeQuery();
                    while (rs.next()) {
                        Double jansal = rs.getDouble(1);
                        jTextField26.setText(String.valueOf(jansal));
                    }
                    psrw1.close();
                } catch (Exception e) {
//                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Database Error");
                }
                rs.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error connection");
//                e.printStackTrace();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error connection");
//            e.printStackTrace();
        }        //qty sum DISPLAY
        try {
            Connection con161 = (Connection) db_Connection.getInstance();
            try {
                String T14 = "SELECT sum(quantityKGS) FROM prodpriceinclusive where groupe = '" + grup + "' and voucher_no='" + vci + "';";
                try (PreparedStatement psrw1 = con161.prepareStatement(T14)) {
                    rs = psrw1.executeQuery();
                    while (rs.next()) {
                        Double vansal = rs.getDouble(1);
                        jTextField47.setText(String.valueOf(vansal));
                        jTextField71.setText(String.valueOf(vansal));
                    }
                    psrw1.close();
                } catch (Exception e) {
//                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Database Error");
                }
                rs.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error connection");
//                e.printStackTrace();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error connection");
//            e.printStackTrace();
        }
        //PACKAGE AMOUNT DISPLAY
        try {
            Connection con161 = (Connection) db_Connection.getInstance();
            try {
                String T1 = "SELECT sum(can_amount) FROM amounts where groupe = '" + grup + "' and voucher_no='" + vci + "';";
                try (PreparedStatement psrw1 = con161.prepareStatement(T1)) {
                    rs = psrw1.executeQuery();
                    while (rs.next()) {
                        Double jansal = rs.getDouble(1);
                        jTextField52.setText(String.valueOf(jansal));
                    }
                    psrw1.close();
                } catch (Exception e) {
//                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Database Error");
                }
                rs.close();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error connection");
//                e.printStackTrace();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error connection");
//            e.printStackTrace();
        }
        //Label AMOUNT DISPLAY
        try {
            Connection con169 = (Connection) db_Connection.getInstance();
            try {
                String T1 = "SELECT sum(label_amount) FROM amounts where groupe = '" + grup + "' and voucher_no='" + vci + "';";
                try (PreparedStatement psrw9 = con169.prepareStatement(T1)) {
                    rs = psrw9.executeQuery();
                    while (rs.next()) {
                        Double jansal = rs.getDouble(1);
                        jTextField53.setText(String.valueOf(jansal));
                    }
                    psrw9.close();
                } catch (Exception e) {
//                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Database Error");
                }
                rs.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error connection");
//                e.printStackTrace();
            }
        } catch (Exception e) {
//            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error connection");
        }        //MANPOWER AMOUNT DISPLAY
        try {
            Connection con173 = (Connection) db_Connection.getInstance();
            try {
                String T1 = "SELECT sum(manpower_amount) FROM amounts where groupe = '" + grup + "' and voucher_no='" + vci + "';";
                try (PreparedStatement psrw1 = con173.prepareStatement(T1)) {
                    rs = psrw1.executeQuery();
                    while (rs.next()) {
                        Double jansal = rs.getDouble(1);
                        jTextField54.setText(String.valueOf(jansal));
                    }
                    psrw1.close();
                } catch (Exception e) {
                    //                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Database Error");
//                    e.printStackTrace();
                }
                rs.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error connection");
//                e.printStackTrace();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error connection");
//            e.printStackTrace();
        }        //Raw AOUNT DISPLAY
        try {
            Connection con1x0 = (Connection) db_Connection.getInstance();                                                                                                                                                                                                                                                       ///Source code of Stephen Weru Cost System
            try {
                String T1 = "SELECT sum(amount) FROM rawmatpriceinc where groupe = '" + grup + "' and voucher_no='" + vci + "';";
                try (PreparedStatement srw1 = con1x0.prepareStatement(T1)) {
                    rs = srw1.executeQuery();
                    while (rs.next()) {
                        Double jansal = rs.getDouble(1);
                        jTextField29.setText(String.valueOf(jansal));
                    }
                    srw1.close();
                } catch (Exception e) {
//                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Database Error");
                }
                rs.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error connection");
//                e.printStackTrace();
            }
        } catch (Exception e) {
//            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error connection");
        }
        //INGREDIENT AMOUNT DISPLAY
        try {
            Connection con1x0 = (Connection) db_Connection.getInstance();
            try {
                String T1 = "SELECT sum(amount) FROM ingredpriceinc where groupe = '" + grup + "' and voucher_no='" + vci + "';";
                try (PreparedStatement srw1 = con1x0.prepareStatement(T1)) {
                    rs = srw1.executeQuery();
                    while (rs.next()) {
                        Double jansal = rs.getDouble(1);
                        jTextField27.setText(String.valueOf(jansal));
                    }
                    srw1.close();
                } catch (Exception e) {
//                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Database Error");
                }

                rs.close();

            } catch (Exception e) {
//                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error connection");
            }
        } catch (Exception e) {
//            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error connection");
        }

        //ELECTRICITY AMOUNT
        try {
            String topua = (String) jTextField71.getText();
            Double topua1 = Double.valueOf(topua);
            Double ewco = (topua1 / pua1);
            electricitycost = ewco * xaoT;

            DecimalFormat dc = new DecimalFormat("0.0000");
            String formattedText = dc.format(electricitycost);
            jTextField55.setText(formattedText);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error connection");
//            e.printStackTrace();

        }

        //FUEL AMOUNT
        try {
            String topua4 = (String) jTextField71.getText();
            Double topua14 = Double.valueOf(topua4);
            Double feeco = (topua14 / pua1);
            fuelcost = feeco * xao;

            DecimalFormat dc1 = new DecimalFormat("0.0000");
            String formattedText1 = dc1.format(fuelcost);

            jTextField56.setText(formattedText1);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error connection");
//            e.printStackTrace();

        }

        // TODO add your handling code here:
    }

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        int rpt = jTable9.getSelectedRow();
        String brah = jTextField84.getText();
        String tablerpt = (jTable9.getModel().getValueAt(rpt, 0).toString());
        try {

            Connection conrpt = (Connection) db_Connection.getInstance();

            //            JasperDesign jd = JRXmlLoader.load("C:\\Users\\Stevoski\\Documents\\Scanned Documents\\Canning\\src\\newpackage1\\DetailedReport.jrxml");
            // 64BIT OS
            //            JasperDesign jd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DetailedReport.jrxml");
            //                  32BIT OS
            JasperDesign jd = JRXmlLoader.load("C:\\Program Files\\Cost\\DetailedReport.jrxml");

            String sql = "SELECT voucher_no,Production_ID,date,product,manpower,IngCost,RawCost,CanCost,LabelCost,EleCost,FuelCost,ManCost,Cperunit,quantityKGS,wasteCost FROM new_view where Production_ID='" + brah + "' order by Production_ID";
            JRDesignQuery NewQuery = new JRDesignQuery();
            NewQuery.setText(sql);
            jd.setQuery(NewQuery);
            JasperReport jr = JasperCompileManager.compileReport(jd);
            JasperPrint jp = JasperFillManager.fillReport(jr, null, conrpt);
            //JasperViewer.viewReport(jp, false);
            //DISPLAY IN JPANEL
            BorderLayout layoutPanel1 = new BorderLayout();
            JPanel panelRPT1 = new JPanel(layoutPanel1);
            JRViewer vw = new JRViewer(jp);
            panelRPT1.setLayout(new BorderLayout());
            panelRPT1.repaint();
            panelRPT1.add(vw);
            panelRPT1.revalidate();

            MainPanel.removeAll();
            MainPanel.add(panelRPT1);
            MainPanel.repaint();
            MainPanel.revalidate();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());

//            e.printStackTrace();
        }

        //        try {
        //
        //            //31,32,34,35
        //            jTextArea3.append("                      NJORO CANNING FACTORY                    " + '\n');
        //            jTextArea3.append("                     COST ANALYSIS AS AT DATE:                    " + '\n');
        //            jTextArea3.append('\n' + "                              " + '\n');
        //            jTextArea3.append('\n' + "                                    " + '\n');
        //            jTextArea3.append("                                                                          " + '\n');
        //            jTextArea3.append("                                                                " + '\n');
        //            jTextArea3.append('\n' + "        RAW MATERIAL COST   :       " + jTextField48.getText() + '\n');
        //            jTextArea3.append('\n' + "           INGREDIENT COST  :       " + jTextField49.getText() + '\n');
        //            jTextArea3.append('\n' + "      FIREWOOD AND FUEL COST  :     " + jTextField61.getText() + '\n');
        //            jTextArea3.append('\n' + "           ELECTRICITY COST:       " + jTextField60.getText() + '\n');
        //            jTextArea3.append('\n' + "           LABOUR COST   :          " + jTextField59.getText() + '\n');
        //
        //            jTextArea3.append(" PACKING MATERIALS:                    " + '\n');
        //            jTextArea3.append('\n' + "            PACKAGE COST     :       " + jTextField57.getText() + '\n');
        //            jTextArea3.append('\n' + "                  LABEL COST  :       " + jTextField58.getText() + '\n');
        //            jTextArea3.append("                                                                          " + '\n');
        //            jTextArea3.append('\n' + "           PRODUCTION OVERHEAD COSTS    " + jTextField34.getText() + '\n');
        //            jTextArea3.append('\n' + "               SELLING AND ADMIN COSTS   " + jTextField35.getText() + +'\n');
        //            jTextArea3.append('\n' + "                                          " + '\n');
        //            jTextArea3.append('\n' + "          NET PRICE PER UNIT:                                " + jTextField33.getText() + +'\n');
        //            jTextArea3.append('\n' + "                                          " + '\n');
        //            jTextArea3.append('\n' + "                                          " + '\n');
        //
        //            jTextArea3.append('\n' + "                                     NJORO CANNING" + '\n');
        //            jTextArea3.append('\n' + "                                    ISO 9001:2001 Certified   " + '\n');
        //            jTextArea3.print();
        //
        //        } catch (Exception ex) {
        //
        //            JOptionPane.showMessageDialog(this, "Please First Compute Price");
        //        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton23ActionPerformed

    private void jTextField55ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField55ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField55ActionPerformed

    private void jTextField51ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField51ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField51ActionPerformed

    private void jTextField50ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField50ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField50ActionPerformed

    private void jTextField48ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField48ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField48ActionPerformed

    private void jTextField35ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField35ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField35ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        com.canning.costpanel.panel9Compute.panel9compute();
    }//GEN-LAST:event_jButton18ActionPerformed
//        // TODO add your handling code here:

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed

        com.canning.costpanel.jpanel9Display.Panel9Display();
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jTextField33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField33ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField33ActionPerformed

    private void jTextField29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField29ActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField29ActionPerformed

    private void jTextField26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField26ActionPerformed

    }//GEN-LAST:event_jTextField26ActionPerformed

    private void jTable9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable9MouseClicked
        table9costanalysis();
    }//GEN-LAST:event_jTable9MouseClicked

    public void table9costanalysis() throws NumberFormatException, HeadlessException {
        jTextField84.setText(null);
        int row = jTable9.getSelectedRow();
        String tableclick = (jTable9.getModel().getValueAt(row, 0).toString());
        jTextField84.setText(tableclick);
        String VC = jTextField25.getText();
        int vyc = Integer.valueOf(VC);
        String gruyp = (String) jComboBox22.getSelectedItem();
        try {
            //            String tableclick = (jTable9.getModel().getValueAt(row, 0).toString());
            jTextField65.setText(tableclick);

            Connection conclik = (Connection) db_Connection.getInstance();
            String clik = "select * from prodpriceinclusive where ProductionID='" + tableclick + "' ";
            try (PreparedStatement psclik = conclik.prepareStatement(clik)) {

                rs = psclik.executeQuery();

                if (rs.next()) {
                    Double add1 = rs.getDouble("quantity");
                    String add = String.valueOf(add1);
                    jTextField51.setText(add);

                    Double add2 = rs.getDouble("quantityKGS");
                    String add3 = String.valueOf(add2);
                    jTextField50.setText(add3);
                }
                psclik.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error connection");
//            e.printStackTrace();
        }
        //PACKAGE AMOUNT DISPLAY
        try {
            Connection con1v1 = (Connection) db_Connection.getInstance();
            try {
                String T1 = "SELECT sum(can_amount) FROM package1 where voucher_no='" + vyc + "'  and production_id='" + tableclick + "';";
                try (PreparedStatement psrw1 = con1v1.prepareStatement(T1)) {
                    rs = psrw1.executeQuery();
                    while (rs.next()) {
                        Double jansal = rs.getDouble(1);
                        jTextField52.setText(String.valueOf(jansal));
                    }                    //LABEL AMOUNT DISPLAY
                    try {
                        Connection conlabel = (Connection) db_Connection.getInstance();
                        try {
                            String Tlabel = "SELECT sum(label_amount) FROM package1 where voucher_no='" + vyc + "'  and production_id='" + tableclick + "';";
                            try (PreparedStatement psrwlabel = conlabel.prepareStatement(Tlabel)) {
                                rs = psrwlabel.executeQuery();
                                while (rs.next()) {
                                    Double jansal = rs.getDouble(1);
                                    jTextField53.setText(String.valueOf(jansal));
                                }
                                psrwlabel.close();
                            } catch (Exception e) {
//                                e.printStackTrace();
                                JOptionPane.showMessageDialog(null, "Database Error");
                            }
                            rs.close();
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Error connection");
//                            e.printStackTrace();
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Error connection");
//                        e.printStackTrace();
                    }
                    psrw1.close();
                } catch (Exception e) {
//                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Database Error");
                }
                rs.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error connection");
//                e.printStackTrace();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error connection");
//            e.printStackTrace();
        }
        // TODO add your handling code here:
    }

    private void jTextField25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField25ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField25ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jTextField54ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField54ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField54ActionPerformed

    private void jTable43KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable43KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable43KeyPressed

    private void jTable43MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable43MouseClicked
        jTextmainidtransferlist.setText(null);
        int wareows = jTable43.getSelectedRow();
        String Waretblclck = (jTable43.getModel().getValueAt(wareows, 0).toString());
        try {
            String clik = "select * from product_transfer where transid='" + Waretblclck + "' ";
            PreparedStatement wareclikk = db_Connection.getInstance().prepareStatement(clik);

            rs = wareclikk.executeQuery();

            if (rs.next()) {
                int watadd1 = rs.getInt("mainid");
                String watadd = String.valueOf(watadd1);
                jTextmainidtransferlist.setText(watadd);

            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jTable43MouseClicked

    private void jButton41ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton41ActionPerformed
//  

        try {
            String guatemalar = jTextmainidtransferlist.getText();
            try {

                Connection connn = (Connection) db_Connection.getInstance();

// JasperDesign jd = JRXmlLoader.load("C:\\Users\\Stevoski\\Documents\\Scanned Documents\\Canning\\src\\newpackage1\\DatebtwnReport.jrxml");
//                  64BIT OS
//                        JasperDesign jd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport.jrxml");
//                        JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files (x86)\\Cost\\DatebtwnReport_subreport2.jrxml");
//JasperFillManager.fillReportToFile(jasperMasterReport, parameters, connn);
//  JasperPrint jp = JasperFillManager.fillReport(jasperMasterReport, paramsi, connn);
////                  32BIT OS
                JasperDesign jd = JRXmlLoader.load("C:\\Program Files\\Cost\\TransferReport.jrxml");
                JasperDesign SUBjd = JRXmlLoader.load("C:\\Program Files\\Cost\\TransfersubReport.jrxml");
//                InputStream jrM1 = getClass().getResourceAsStream("DatetwnReport.jasper");
//                InputStream jSr1 = getClass().getResourceAsStream("DatebtwnReport_rawsubreport.jasper");
//                JasperDesign jd = JRXmlLoader.load(jrM1);
                String sqlie = " SELECT mainid,`from`,`to`,date,productionid,product,quantity FROM canning.product_transfer\n"
                        + "                  where `mainid` ='" + guatemalar + "' \n"
                        + "   group by mainid ";
                JRDesignQuery NewQuery = new JRDesignQuery();
                NewQuery.setText(sqlie);
                jd.setQuery(NewQuery);

                JasperReport jasperMasterReport = JasperCompileManager.compileReport(jd);
                JasperReport jsr = JasperCompileManager.compileReport(SUBjd);

//         JasperReport jasperMasterReport = JasperCompileManager.compileReport(masterReportSource);
//JasperReport jasperSubReport = JasperCompileManager.compileReport(SUBjd);
//
//Map<String, Object> parameters = new HashMap()<String, Object>;
//parameters.put("subreportParameter", jasperSubReport);
//
//JasperFillManager.fillReportToFile(jasperMasterReport, parameters, connection);
                Map<String, Object> paramsi = new HashMap<>();
//                Map<String, Object> params = new HashMap<>()<String, Object()>;
                paramsi.put("retaro", jsr);

//JasperFillManager.fillReportToFile(jasperMasterReport, parameters, connn);
                JasperPrint jp = JasperFillManager.fillReport(jasperMasterReport, paramsi, connn);

//DISPLAY IN JPANEL
                BorderLayout layoutPanel = new BorderLayout();
                JPanel panelRPTt = new JPanel(layoutPanel);
                JRViewer vw = new JRViewer(jp);
                panelRPTt.setLayout(new BorderLayout());
                panelRPTt.repaint();
                panelRPTt.add(vw);
                panelRPTt.revalidate();

                MainPanel.removeAll();
                MainPanel.add(panelRPTt);
                MainPanel.repaint();
                MainPanel.revalidate();
//connn.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
//                        e.printStackTrace();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
//                        e.printStackTrace();
        }
// TODO add your handling code here:
    }//GEN-LAST:event_jButton41ActionPerformed

    private void jButton43ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton43ActionPerformed
        Factorycombo();

        MainPanel.removeAll();
        MainPanel.add(jPanel3);
        MainPanel.repaint();
        MainPanel.revalidate();
// TODO add your handling code here:
    }//GEN-LAST:event_jButton43ActionPerformed

    private void jTextField86ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField86ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField86ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        jTable1.removeAll();
// TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        salesEntry();
    }//GEN-LAST:event_jButton3ActionPerformed

    public void salesEntry() throws HeadlessException {
        switch (jTextStatus.getText()) {
            case "WAREHOUSE":
                String sukda0 = jTextField85.getText();
                String skuda0 = jTextField90.getText();
                String usku10 = jTextUser.getText();
                try {
                    String usku = jTextUser.getText();
                    Connection connsct = (Connection) db_Connection.getInstance();
                    connsct.setAutoCommit(false);
                    int erowsi = jTable1.getRowCount();
                    String fecI = jTextLogin.getText();
                    String scfecI = jTextField86.getText();
                    String feic = ((JTextField) jDatesct.getDateEditor().getUiComponent()).getText();
                    String querycoh = "insert into warehouse_sales (invoice_number, product, quantity, unit,date,factory,buyer,veh_no,soldby) VALUES (?,?,?,?,?,?,?,?,?)";
                    PreparedStatement psyct = connsct.prepareStatement(querycoh);
                    for (int row = 0; row < erowsi; row++) {
                        String tin = (String) jTable1.getValueAt(row, 1);
                        String qtyin = (String) jTable1.getValueAt(row, 2);
                        Double qtyin1 = Double.valueOf(qtyin);
                        String rttno = (String) jTable1.getValueAt(row, 3);

                        psyct.setString(1, scfecI);
                        psyct.setString(2, tin);
                        psyct.setDouble(3, qtyin1);
                        psyct.setString(4, rttno);
                        psyct.setString(5, feic);
                        psyct.setString(6, fecI);
                        psyct.setString(7, sukda0);
                        psyct.setString(8, skuda0);
                        psyct.setString(9, usku10);
                        psyct.addBatch();
                    }
                    psyct.executeBatch();
                    connsct.commit();
                    JOptionPane.showMessageDialog(this, "Data Successfully added");

                } catch (Exception e) {
//            e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Invalid Entry");
                }
                break;
            case "ADMINISTRATOR":
                String sukda = jTextField85.getText();
                String skuda = jTextField90.getText();
                String usku1 = jTextUser.getText();
                try {
                    Connection connsct = (Connection) db_Connection.getInstance();
                    connsct.setAutoCommit(false);
                    int erowsi = jTable1.getRowCount();
                    String fecI = jTextLogin.getText();
                    String scfecI = jTextField86.getText();
                    String feic = ((JTextField) jDatesct.getDateEditor().getUiComponent()).getText();
//     stock_cf, soldby

                    String querycoh = "insert into salestable (invoice_number, product, quantity, productionid,salesdate,factory,buyer,veh_no,soldby) VALUES (?,?,?,?,?,?,?,?,?)";
                    PreparedStatement psyct = connsct.prepareStatement(querycoh);
                    for (int row = 0; row < erowsi; row++) {
                        String tin = (String) jTable1.getValueAt(row, 1);
                        String qtyin = (String) jTable1.getValueAt(row, 2);
                        Double qtyin1 = Double.valueOf(qtyin);
                        String rttno = (String) jTable1.getValueAt(row, 3);

                        psyct.setString(1, scfecI);
                        psyct.setString(2, tin);
                        psyct.setDouble(3, qtyin1);
                        psyct.setString(4, rttno);
                        psyct.setString(5, feic);
                        psyct.setString(6, fecI);
                        psyct.setString(7, sukda);
                        psyct.setString(8, skuda);
                        psyct.setString(9, usku1);

                        psyct.addBatch();
                    }
                    psyct.executeBatch();
                    connsct.commit();
                    JOptionPane.showMessageDialog(this, "Data Successfully added");

                } catch (Exception e) {
//            e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Invalid Entry");
                }
                break;
            case "USER":
                String usku2 = jTextUser.getText();
                String sukda1 = jTextField85.getText();
                String skuda1 = jTextField90.getText();
                try {
                    Connection connsct = (Connection) db_Connection.getInstance();
                    connsct.setAutoCommit(false);
                    int erowsi = jTable1.getRowCount();
                    String fecI = jTextLogin.getText();
                    String scfecI = jTextField86.getText();
                    String feic = ((JTextField) jDatesct.getDateEditor().getUiComponent()).getText();
                    String querycoh = "insert into salestable (invoice_number, product, quantity, productionid,salesdate,factory,buyer,veh_no,soldby) VALUES (?,?,?,?,?,?,?,?,?)";
                    PreparedStatement psyct = connsct.prepareStatement(querycoh);
                    for (int row = 0; row < erowsi; row++) {
                        String tin = (String) jTable1.getValueAt(row, 1);
                        String qtyin = (String) jTable1.getValueAt(row, 2);
                        Double qtyin1 = Double.valueOf(qtyin);
                        String rttno = (String) jTable1.getValueAt(row, 3);

                        psyct.setString(1, scfecI);
                        psyct.setString(2, tin);
                        psyct.setDouble(3, qtyin1);
                        psyct.setString(4, rttno);
                        psyct.setString(5, feic);
                        psyct.setString(6, fecI);
                        psyct.setString(7, sukda1);
                        psyct.setString(8, skuda1);
                        psyct.setString(9, usku2);

                        psyct.addBatch();
                    }
                    psyct.executeBatch();
                    connsct.commit();
                    JOptionPane.showMessageDialog(this, "Data Successfully added");

                } catch (Exception e) {
//            e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Invalid Entry");
                }
                break;
            default:
                JOptionPane.showMessageDialog(this, "Unknown User!!");

        }

        // TODO add your handling code here:
    }

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        int numRows1 = jTable1.getRowCount() + 1;
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_ENTER:
                DefaultTableModel moderode = (DefaultTableModel) jTable1.getModel();
                moderode.addRow(Paster);
//                for (int row_b = 0; row_b < numRows1; row_b++) {
//                    String numberless = jTextField154.getText();
//                    jTable3.setValueAt(numberless, row_b, 0);
//                }
                break;
            default:
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jTable1KeyPressed

    private void jMenuItem31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem31ActionPerformed
        waresalesCombo();
        MainPanel.removeAll();
        MainPanel.add(jPanelsalesstockupdate);
        MainPanel.repaint();
        MainPanel.revalidate();
    }//GEN-LAST:event_jMenuItem31ActionPerformed

    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
        waresalesCombo();
        MainPanel.removeAll();
        MainPanel.add(jPanelsalesstockupdate);
        MainPanel.repaint();
        MainPanel.revalidate();

// TODO add your handling code here:
    }//GEN-LAST:event_jButton31ActionPerformed

    private void jButton28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton28ActionPerformed
//        salesLog();
    }//GEN-LAST:event_jButton28ActionPerformed

//    public void salesLog() throws HeadlessException {
//        String saleWareaccess = jTextLogin.getText();
//        if (null == jTextStatus.getText()) {
//
//        } else {
//            switch (jTextStatus.getText()) {
//                case "ADMINISTRATOR":
//                    try {
//                    DefaultTableModel modelsale1 = (DefaultTableModel) jTable32.getModel();
//                    try {
//                        int z4 = modelsale1.getRowCount();
//                        for (int lu3 = 0; lu3 <= z4; ++lu3) {
//                            modelsale1.removeRow(0);
//                        }
//                    } catch (Exception e) {
//                    }
//                    try {
//                        String quer = "SELECT * FROM salestable order by salesdate";
//                        try (PreparedStatement stmt4 = db_Connection.getInstance().prepareStatement(quer)) {
//                            rs = stmt4.executeQuery(quer);
//                            while (rs.next()) {
//                                modelsale1.addRow(new Object[]{rs.getString("salesdate"), rs.getInt("productionid"), rs.getString("product"), rs.getDouble("quantity"), rs.getString("buyer")});
//                            }
//                        }
//                        jPanel15.removeAll();
//                        jPanel15.add(jPanel29);
//                        jPanel15.repaint();
//                        jPanel15.revalidate();
//                        jButton4.setVisible(false);
//                        jButton4.setVisible(false);
//                    } catch (Exception ex) {
//                        JOptionPane.showMessageDialog(null, ex.getMessage());
//                        ex.printStackTrace();
//                    }
//                } catch (Exception ex) {
////                ex.printStackTrace();
//                    JOptionPane.showMessageDialog(null, ex.getMessage());
//                }
//                break;
//                // TODO add your handling code here:
//                case "USER":
//                    try {
//                    DefaultTableModel modelsale = (DefaultTableModel) jTable32.getModel();
//                    try {
//                        int z4 = modelsale.getRowCount();
//                        for (int lu3 = 0; lu3 <= z4; ++lu3) {
//                            modelsale.removeRow(0);
//                        }
//                    } catch (Exception e) {
//                    }
//                    try {
//                        String quer = "SELECT * FROM salestable where factory ='" + saleWareaccess + "' order by salesdate ;";
//                        try (PreparedStatement stmt4 = db_Connection.getInstance().prepareStatement(quer)) {
//                            rs = stmt4.executeQuery(quer);
//                            while (rs.next()) {
//                                modelsale.addRow(new Object[]{rs.getString("salesdate"), rs.getInt("productionid"), rs.getString("product"), rs.getDouble("quantity"), rs.getString("buyer")});
//                            }
//                            stmt4.close();
//                        }
//                        jPanel15.removeAll();
//                        jPanel15.add(jPanel29);
//                        jPanel15.repaint();
//                        jPanel15.revalidate();
//                    } catch (Exception ex) {
////                    ex.printStackTrace();
//                        JOptionPane.showMessageDialog(null, ex.getMessage());
//                    }
//                } catch (Exception ex) {
////                ex.printStackTrace();
//                    JOptionPane.showMessageDialog(null, ex.getMessage());
//                }
//                break;
//                case "WAREHOUSE":
//                    try {
//                    DefaultTableModel modelsale = (DefaultTableModel) jTable32.getModel();
//                    try {
//                        int z4 = modelsale.getRowCount();
//                        for (int lu3 = 0; lu3 <= z4; ++lu3) {
//                            modelsale.removeRow(0);
//                        }
//                    } catch (Exception e) {
//                    }
//                    try {
//                        String quer = "SELECT * FROM warehouse_sales where factory ='" + saleWareaccess + "' ;";
//                        try (PreparedStatement stmt4 = db_Connection.getInstance().prepareStatement(quer)) {
//                            rs = stmt4.executeQuery(quer);
//                            while (rs.next()) {
//                                modelsale.addRow(new Object[]{rs.getString("date"), rs.getString("Invoice_number"), rs.getString("product"), rs.getDouble("quantity"), rs.getString("buyer")});
//                            }
//                            stmt4.close();
//                        }
//                        jPanel15.removeAll();
//                        jPanel15.add(jPanel29);
//                        jPanel15.repaint();
//                        jPanel15.revalidate();
//                    } catch (Exception ex) {
//                        ex.printStackTrace();
//                        JOptionPane.showMessageDialog(null, ex.getMessage());
//                    }
//                } catch (Exception ex) {
////                ex.printStackTrace();
//                    JOptionPane.showMessageDialog(null, ex.getMessage());
//                }
//                break;
//                default:
//                    break;
//            }
//        }
//    }

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        jPanel15.removeAll();
        jPanel15.add(jPanel53);
        jPanel15.repaint();
        jPanel15.revalidate();
        jButton4.setVisible(true);
        jButton4.setVisible(true);

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton46ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton46ActionPerformed
        jPanel15.removeAll();
        jPanel15.add(jPanelRecp);
        jPanel15.repaint();
        jPanel15.revalidate();

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton46ActionPerformed

    private void jButton57ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton57ActionPerformed
        jPanel56.removeAll();
        jPanel56.add(jPanel22);
        jPanel56.repaint();
        jPanel56.revalidate();
        MainPanel.removeAll();
        MainPanel.add(jPanelWarehouse);
        MainPanel.repaint();
        MainPanel.revalidate();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton57ActionPerformed

    private void jButton65ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton65ActionPerformed
        jPanel62.removeAll();
        jPanel62.add(jPanel26);
        jPanel62.repaint();
        jPanel62.revalidate();

        jPanelLoader.removeAll();
        jPanelLoader.add(jPanel12);
        jPanelLoader.repaint();
        jPanelLoader.revalidate();

        jPanelTabpackrpt.removeAll();
        jPanelTabpackrpt.add(jPanel40);
        jPanelTabpackrpt.repaint();
        jPanelTabpackrpt.revalidate();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton65ActionPerformed

    private void jButton49ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton49ActionPerformed
//        DefaultTableModel model = (DefaultTableModel) jTable40.getModel();
//        if (jTable40.getRowCount() > 0) {
//            if (jTable40.getSelectedRowCount()>0) {
//                int selectedRow[] = jTable40.getSelectedRows();
//                for (int i : selectedRow) {
////                int id = Integer.parseInt(jTable40.getValueAt(i, 0).toString());
////                double val1 = Double.parseDouble(jTable40.getValueAt(i, 3).toString());
////                double val2 = Double.parseDouble(jTable40.getValueAt(i, 4).toString());
//                    model.removeRow(i);
//                }
//            }
//        }

        String tblid = jTextField139.getText();
        try {
            Connection connn = (Connection) db_Connection.getInstance();
            JasperDesign jd = JRXmlLoader.load("C:\\Program Files\\Cost\\packrptnw.jrxml");
            JasperDesign SaBjd = JRXmlLoader.load("C:\\Program Files\\Cost\\packing_subrpt.jrxml");

            try {
                String sqlie = " SELECT \n"
                        + "        `packed_product`.`packed_productid` AS `packed_productid`,\n"
                        + "        `packed_product`.  `date` AS `date`,\n"
                        + "        `packed_product`.`factory` AS `factory`,\n"
                        + "        `packed_product`.`packed_product` AS `packed_product`,\n"
                        + "        `packed_product`.`packed_qty` AS `packed_qty`,\n"
                        + "        `packed_product`.`manpower_hrs` AS `manpower_hrs`,\n"
                        + "        `packing_consumed`.`consumed_id` AS `consumed_id`,\n"
                        + "        `packing_consumed`.`item_name` AS `item_name`,\n"
                        + "        `packing_consumed`.`item_qty` AS `item_qty`,\n"
                        + "        `packing_package`.`package` AS `package`,\n"
                        + "        `packing_package`.`package_qty` AS `package_qty`,\n"
                        + "        `packing_package`.`label` AS `label`,\n"
                        + "        `packing_package`.`label_qty` AS `label_qty`\n"
                        + "    FROM\n"
                        + "        ((`packed_product`\n"
                        + "        LEFT JOIN `packing_consumed` ON ((`packing_consumed`.`pprodid` = `packed_product`.`packed_productid`)))\n"
                        + "        LEFT JOIN `packing_package` ON (((`packed_product`.`packed_productid` = `packing_package`.`ref_packid`)\n"
                        + "            AND (`packing_package`.`ref_packid` = `packing_consumed`.`pprodid`))))\n"
                        + "            where `packed_product`.`packed_productid` = '" + tblid + "'\n"
                        + "    GROUP BY `packed_product`.`packed_productid`";
                JRDesignQuery NewQuery = new JRDesignQuery();
                NewQuery.setText(sqlie);
                jd.setQuery(NewQuery);

                JasperReport jasperMasterReport = JasperCompileManager.compileReport(jd);
                JasperReport jsr = JasperCompileManager.compileReport(SaBjd);

                Map<String, Object> paramsi = new HashMap<String, Object>();

                paramsi.put("subpar", jsr);

                JasperPrint jp = JasperFillManager.fillReport(jasperMasterReport, paramsi, connn);
                try {
//DISPLAY IN JPANEL
                    BorderLayout layoutPanel = new BorderLayout();
                    JPanel panelRPTt = new JPanel(layoutPanel);
                    JRViewer vw = new JRViewer(jp);
                    panelRPTt.setLayout(new BorderLayout());
                    panelRPTt.repaint();
                    panelRPTt.add(vw);
                    panelRPTt.revalidate();

                    MainPanel.removeAll();
                    MainPanel.add(panelRPTt);
                    MainPanel.repaint();
                    MainPanel.revalidate();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Sorry !!");
                    JOptionPane.showMessageDialog(null, e.getMessage());
                    e.printStackTrace();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Sorry No reporter");
                JOptionPane.showMessageDialog(null, e.getMessage());
                e.printStackTrace();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Sorry No report");
            JOptionPane.showMessageDialog(null, e.getMessage());
            e.printStackTrace();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton49ActionPerformed

    private void jButton84ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton84ActionPerformed
        jPanel42.removeAll();
        jPanel42.add(jPanel43);
        jPanel42.repaint();
        jPanel42.revalidate();
        rovementCaller();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton84ActionPerformed

    private void jComboBox17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox17MouseClicked
        String slected = (String) jComboBox16.getSelectedItem();
        switch (slected) {
            case "Production": {
                try {
                    com.canning.loaderReturns.searchLoader.showDataInJTable();
                } catch (Exception e) {
                    Logger.getLogger(NewJFrame.class
                            .getName()).log(Level.SEVERE, null, e);
                }
            }
            break;
            case "Packing": {
                try {
                    com.canning.loaderReturns.loaderPacking.showDataInJTable();
                } catch (Exception e) {
                    Logger.getLogger(NewJFrame.class
                            .getName()).log(Level.SEVERE, null, e);
                }
            }
            break;
            case "Transfers": {
                try {
                    com.canning.loaderReturns.loaderTransfer.showDataInJTable();
                } catch (Exception e) {
                    Logger.getLogger(NewJFrame.class
                            .getName()).log(Level.SEVERE, null, e);
                }
            }
            break;
            case "Reception": {
                try {
                    com.canning.loaderReturns.loaderReception.showDataInJTable();
                } catch (Exception e) {
                    Logger.getLogger(NewJFrame.class
                            .getName()).log(Level.SEVERE, null, e);
                }
            }
            break;
            case "Ingredient": {
                try {
                    com.canning.loaderReturns.loaderAllIngredients.showDataInJTable();
                } catch (Exception e) {
                    Logger.getLogger(NewJFrame.class
                            .getName()).log(Level.SEVERE, null, e);
                }
            }
            break;

            default:
        }

//        String slected=(String) jComboBox16.getSelectedItem(); 
//        String groot= (String) jComboBox17.getSelectedItem();
//switch(slected){
//    case "Production":       
//        break;
//    case "Packing":
//        
//        break;
//    case "Transfers":
//        
//        break;
//    case "Reception":
//        
//        break;
//        
//    default:
//}
// TODO add your handling code here:
    }//GEN-LAST:event_jComboBox17MouseClicked

    private void jComboBox16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox16MouseClicked
        try {
            jComboBox17.setModel(new DefaultComboBoxModel(productReturns.getProduct().toArray()));        // TODO add your handling code here:
        } catch (Exception e) {

        }
        String slected = (String) jComboBox16.getSelectedItem();
        switch (slected) {
            case "Production": {
                try {
                    jComboBox17.setModel(new DefaultComboBoxModel(productReturns.getProduct().toArray()));        // TODO add your handling code here:
                } catch (InstantiationException ex) {
                    Logger.getLogger(NewJFrame.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
            break;
            case "Packing":
                try {
                jComboBox17.setModel(new DefaultComboBoxModel(productReturns.getProduct().toArray()));        // TODO add your handling code here:
            } catch (InstantiationException ex) {
                Logger.getLogger(NewJFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            break;
            case "Ingredient":                
                try {
                jComboBox17.setModel(new DefaultComboBoxModel(allIngredientReturns.getallMaterial().toArray()));        // TODO add your handling code here:

                com.canning.loaderReturns.loaderAllIngredients.showDataInJTable();
            } catch (Exception ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            break;

            case "Reception":
                try {
                com.canning.loaderReturns.loaderReception.showDataInJTable();
//    jComboBox17.setModel(new DefaultComboBoxModel(productReturns.getProduct().toArray()));        // TODO add your handling code here:
            } catch (Exception ex) {
                Logger.getLogger(NewJFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            break;

            default:
        }


    }//GEN-LAST:event_jComboBox16MouseClicked

    private void jButton98ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton98ActionPerformed
        try {
            com.canning.loaderReturns.searchLoader.showDataInJTable();
        } catch (Exception e) {
            e.printStackTrace();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton98ActionPerformed

    private void jButton99ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton99ActionPerformed
        MainPanel.removeAll();
        MainPanel.add(jPanel26);
        MainPanel.repaint();
        MainPanel.revalidate();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton99ActionPerformed

    private void jButton51ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton51ActionPerformed
        String hypo = jTextLogin.getText();
        String hpilo = jTextpid.getText();
//        String categrot= (String) jComboBox16.getSelectedItem();
        jLabel132.setText("Production");

        if ("ADMINISTRATOR".equals(jTextLogin.getText())) {
            try {
                PreparedStatement pschy = db_Connection.getInstance().prepareStatement("SELECT distinct(product) FROM new_view where Production_ID='" + hpilo + "' ");

                try {
                    rs = pschy.executeQuery();

                    while (rs.next()) {
                        jTextppname.setText(rs.getString("product"));

                    }
                    try (PreparedStatement pschuy = db_Connection.getInstance().prepareStatement("SELECT distinct(Cperunit) FROM new_view where Production_ID='" + hpilo + "' ")) {

                        try {
                            rs = pschuy.executeQuery();

                            while (rs.next()) {
                                jTextField122.setText(rs.getString("Cperunit"));
//                                jLabel157.setText(rs.getString("Cperunit"));
//                            jLabel157.setText(hypo);
                            }

                            rs.close();
                            pschuy.close();

                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Database Error");
//                            e.printStackTrace();
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Database Error");
//                        e.printStackTrace();
                    }
                    rs.close();
                    pschy.close();

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Database Error");
//                    e.printStackTrace();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error connection");
//                e.printStackTrace();
            }
        } else {
            try (PreparedStatement pschy = db_Connection.getInstance().prepareStatement("SELECT  distinct(product) FROM new_view where factory='" + hypo + "' and Production_ID='" + hpilo + "' ")) {

                try {
                    rs = pschy.executeQuery();

                    while (rs.next()) {
                        jTextppname.setText(rs.getString("product"));

                    }

                    rs.close();
                    pschy.close();

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Database Error");
//                    e.printStackTrace();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error connection");
//                e.printStackTrace();
            }

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton51ActionPerformed

    private void jButton102ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton102ActionPerformed
        String dtpck = ((JTextField) jDatePacking.getDateEditor().getUiComponent()).getText();
        String phakto = jTextLogin.getText();
        String pprod = jTextppname.getText();
        String qty = jTextppqty.getText();
        String phid = jTextpid.getText();
        Integer hid = Integer.valueOf(phid);
        String shid = jTextpackid.getText();
        Integer hids = Integer.valueOf(shid);
        Double eqty = Double.valueOf(qty);
        String cat = jLabel132.getText();
        ResultSet asher;
        switch (cat) {
            case "Ingredient":
                getFromrawMaterial(phid, phakto, dtpck, pprod, eqty, hid, hids, cat);
                break;
            default:
                getFromProduction(phid, phakto, dtpck, pprod, eqty, hid, hids, cat);
        }

    }//GEN-LAST:event_jButton102ActionPerformed

    private void getFromProduction(String phid, String phakto, String dtpck, String pprod, Double eqty, Integer hid, Integer hids, String cat) {
        ResultSet asher;
        try {
//where factory='" + access + "'
            PreparedStatement psly = db_Connection.getInstance().prepareStatement("SELECT * FROM new_view where Production_ID=? and factory=?");
//Connection conraw = (Connection) db_Connection.getInstance();
//            conraw.setAutoCommit(false);
            psly.setString(1, phid);
            psly.setString(2, phakto);
            try {
                asher = psly.executeQuery();
                while (asher.next()) {
                    jTextField131.setText(asher.getString("Cperunit"));
                }
                try {
                    String priced = jTextField131.getText();
                    Double price = Double.valueOf(priced);

//PreparedStatement pquery= db_Connection.getInstance().prepareStatement("insert into packing_table (date,factory,category,item_name,item_qty) values(?,?,'Packed Product',?,?)",Statement.RETURN_GENERATED_KEYS);
                    String packedsql = "insert into packing_consumed (date,factory,item_name,item_price,item_qty,consumed_id,pprodid,location) values(?,?,?,?,?,?,?,?)";
                    try (PreparedStatement pcp = db_Connection.getInstance().prepareStatement(packedsql)) {
                        pcp.setString(1, dtpck);
                        pcp.setString(2, phakto);
                        pcp.setString(3, pprod);
                        pcp.setDouble(4, price);
                        pcp.setDouble(5, eqty);
                        pcp.setInt(6, hid);
                        pcp.setInt(7, hids);
                        pcp.setString(8, cat);
                        pcp.executeUpdate();
                        try {
                            DefaultTableModel dtb = (DefaultTableModel) jTable_consumedproduct.getModel();
                            try {
                                int skur = dtb.getRowCount();
                                for (int mbi = 0; mbi <= skur; skur++) {
                                    dtb.removeRow(0);
                                }
                            } catch (Exception e) {
                            }
                            try (PreparedStatement pmb = db_Connection.getInstance().prepareStatement("select * from packing_consumed where factory=? and date=?")) {
                                pmb.setString(1, phakto);
                                pmb.setString(2, dtpck);
                                rs = pmb.executeQuery();
                                while (rs.next()) {
                                    dtb.addRow(new Object[]{rs.getInt("packid"), rs.getString("item_name"), rs.getString("consumed_id"), rs.getDouble("item_qty")});
                                }
                                rs.close();
                                pmb.close();
                            } catch (Exception e) {
                                java.util.logging.Logger.getLogger(NewJFrame.class
                                        .getName()).log(java.util.logging.Level.SEVERE, null, e);
                            }
                        } catch (Exception e) {
                            java.util.logging.Logger.getLogger(NewJFrame.class
                                    .getName()).log(java.util.logging.Level.SEVERE, null, e);
                        }
                        pcp.close();
                    } catch (Exception e) {
                        java.util.logging.Logger.getLogger(NewJFrame.class
                                .getName()).log(java.util.logging.Level.SEVERE, null, e);
                    }
                    asher.close();
                } catch (Exception e) {
                    java.util.logging.Logger.getLogger(NewJFrame.class
                            .getName()).log(java.util.logging.Level.SEVERE, null, e);
                }
            } catch (Exception e) {
                java.util.logging.Logger.getLogger(NewJFrame.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, e);
            }
//            pcp.close();
        } catch (Exception e) {
            java.util.logging.Logger.getLogger(NewJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, e);
        }
    }

    private void getFromrawMaterial(String phid, String phakto, String dtpck, String pprod, Double eqty, Integer hid, Integer hids, String cat) {
        ResultSet asher;
        try {
//where factory='" + access + "'
            PreparedStatement psly = db_Connection.getInstance().prepareStatement("SELECT * FROM all_ingredients where ingredient=? and factory=?");
//Connection conraw = (Connection) db_Connection.getInstance();
//            conraw.setAutoCommit(false);
            psly.setString(1, pprod);
            psly.setString(2, phakto);
            try {
                asher = psly.executeQuery();
                while (asher.next()) {
                    jTextField131.setText(asher.getString("ingredient_price"));
                }
                try {
                    String priced = jTextField131.getText();
                    Double price = Double.valueOf(priced);

//PreparedStatement pquery= db_Connection.getInstance().prepareStatement("insert into packing_table (date,factory,category,item_name,item_qty) values(?,?,'Packed Product',?,?)",Statement.RETURN_GENERATED_KEYS);
                    String packedsql = "insert into packing_consumed (date,factory,item_name,item_price,item_qty,consumed_id,pprodid,location) values(?,?,?,?,?,?,?,?)";
                    try (PreparedStatement pcp = db_Connection.getInstance().prepareStatement(packedsql)) {
                        pcp.setString(1, dtpck);
                        pcp.setString(2, phakto);
                        pcp.setString(3, pprod);
                        pcp.setDouble(4, price);
                        pcp.setDouble(5, eqty);
                        pcp.setInt(6, hid);
                        pcp.setInt(7, hids);
                        pcp.setString(8, cat);
                        pcp.executeUpdate();
                        try {
                            DefaultTableModel dtb = (DefaultTableModel) jTable_consumedproduct.getModel();
                            try {
                                int skur = dtb.getRowCount();
                                for (int mbi = 0; mbi <= skur; skur++) {
                                    dtb.removeRow(0);
                                }
                            } catch (Exception e) {
                            }
                            try (PreparedStatement pmb = db_Connection.getInstance().prepareStatement("select * from packing_consumed where factory=? and date=?")) {
                                pmb.setString(1, phakto);
                                pmb.setString(2, dtpck);
                                rs = pmb.executeQuery();
                                while (rs.next()) {
                                    dtb.addRow(new Object[]{rs.getInt("packid"), rs.getString("item_name"), rs.getString("consumed_id"), rs.getDouble("item_qty")});
                                }
                                rs.close();
                                pmb.close();
                            } catch (Exception e) {
                                java.util.logging.Logger.getLogger(NewJFrame.class
                                        .getName()).log(java.util.logging.Level.SEVERE, null, e);
                            }
                        } catch (Exception e) {
                            java.util.logging.Logger.getLogger(NewJFrame.class
                                    .getName()).log(java.util.logging.Level.SEVERE, null, e);
                        }
                        pcp.close();
                    } catch (Exception e) {
                        java.util.logging.Logger.getLogger(NewJFrame.class
                                .getName()).log(java.util.logging.Level.SEVERE, null, e);
                    }
                    asher.close();
                } catch (Exception e) {
                    java.util.logging.Logger.getLogger(NewJFrame.class
                            .getName()).log(java.util.logging.Level.SEVERE, null, e);
                }
            } catch (Exception e) {
                java.util.logging.Logger.getLogger(NewJFrame.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, e);
            }
//            pcp.close();
        } catch (Exception e) {
            java.util.logging.Logger.getLogger(NewJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, e);
        }

//  String ppname =jTextppname.getText();//Produced product
//        String keP = jTextField124.getText(); //produced qty qty
//        Double ktP = Double.valueOf(keP);
//        String kcL = (String) jComboBox36.getSelectedItem(); //Label
//        String kcLq = jTextField126.getText(); //label qty
//        Double kcL1 = Double.valueOf(kcLq);
//
//        String kcPK = (String) jComboBox35.getSelectedItem();//Package
//        String kcPKq = jTextField126.getText(); //package qty
//        Double kcPKq1 = Double.valueOf(kcPKq);
//
//        String kg = jTextField120.getText();
//        String kgrt = jTextLogin.getText();
//
////consumed product
////                Double ks = Double.valueOf(kg);
//        String kbg = jTextField121.getText(); //consumed qty
//        Double kbs = Double.valueOf(kbg);
//        String ke = jTextField125.getText(); //manpower qty
//        Double kt = Double.valueOf(ke);
//
//        String k1 = jTextField119.getText(); //PID
//        Integer k11 = Integer.valueOf(k1);
//        try {
//            Connection con3 = (Connection) db_Connection.getInstance();
//            con3.setAutoCommit(false);
//
//            try (PreparedStatement pschy = db_Connection.getInstance().prepareStatement("SELECT * FROM package where can_name='" + kcPK + "'")) {
//
//                try {
//                    rs = pschy.executeQuery();
//
//                    while (rs.next()) {
//                        jTextField128.setText(rs.getString("price_per_can"));
//
//                    }
//                    try (PreparedStatement psly = db_Connection.getInstance().prepareStatement("SELECT * FROM package where label_name='" + kcL + "'")) {
//
//                        try {
//                            rs = psly.executeQuery();
//
//                            while (rs.next()) {
//                                jTextField123.setText(rs.getString("price_per_label"));
//
//                            }
//                            try {
//                                String ropryce = jTextField122.getText();
//                                Double propryce = Double.valueOf(ropryce);
//                                String apryce = jTextField128.getText();
//                                Double papryce = Double.valueOf(apryce);
//                                String abpryce = jTextField123.getText();
//                                Double labpryce = Double.valueOf(abpryce);
//
//                                String query1 = "insert into packingreport (date,packedproduct,packedqty,consumedproduct,consumedqty,manpower,package,packageqty,label,labelqty,ProductionID,consumedproductprice,packageprice,labelprice,factory)"
//                                        + "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
//
//                                try (PreparedStatement pst = con3.prepareStatement(query1)) {
//
//                                    pst.setString(1, ((JTextField) jDatepckpck.getDateEditor().getUiComponent()).getText());
//                                    pst.setString(2, kcP);
//                                    pst.setDouble(3, ktP);
//                                    pst.setString(4, kg);
//                                    pst.setDouble(5, kbs);
//                                    pst.setDouble(6, kt);
//                                    pst.setString(7, kcPK);
//                                    pst.setDouble(8, kcPKq1);
//                                    pst.setString(9, kcL);
//                                    pst.setDouble(10, kcL1);
//                                    pst.setInt(11, k11);
//                                    pst.setDouble(12, propryce);
//                                    pst.setDouble(13, papryce);
//                                    pst.setDouble(14, labpryce);
//                                    pst.setString(15, kgrt);
//
//                                    pst.addBatch();
//                                    pst.executeBatch();
//                                    con3.commit();
//                                    JOptionPane.showMessageDialog(this, "record has been inserted");
//////
//                                } catch (Exception e) {
////                                    e.printStackTrace();
//                                    JOptionPane.showMessageDialog(null, "Cannot save." + e);
//                                }
//
//                            } catch (Exception e) {
////                                e.printStackTrace();
//                                JOptionPane.showMessageDialog(null, "Invalid in fields");
//                            }
//                        } catch (Exception e) {
////                            e.printStackTrace();
//                            JOptionPane.showMessageDialog(null, "Cannot save." + e);
//                        }
//                        psly.close();
//                    } catch (Exception e) {
////                        e.printStackTrace();
//                        JOptionPane.showMessageDialog(null, "Invalid in fields");
//                    }
//                } catch (Exception e) {
////                    e.printStackTrace();
//                    JOptionPane.showMessageDialog(null, "Invalid in fields");
//                }
//                pschy.close();
//            } catch (Exception e) {
//                JOptionPane.showMessageDialog(null, "Invalid Entry");
////                e.printStackTrace();
//            }
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Invalid Entry");
////            e.printStackTrace();
//        }
// TODO add your handling code here:
    }

    private void jButton_savepackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_savepackActionPerformed
        String datepack = ((JTextField) jDatePacking.getDateEditor().getUiComponent()).getText();
//String pakid=jTextpackid.getText();
        String combprop = (String) jCombopprod.getSelectedItem();
        String qty = jTextpaqty.getText();
        Double pqty = Double.valueOf(qty);
        String mmanp = jText_manpower.getText();
        Double manp = Double.valueOf(mmanp);
//        jText_manpower
        String pfacto = jTextLogin.getText();
        int numpack = 0;
        try {
            PreparedStatement pquery = db_Connection.getInstance().prepareStatement("insert into packed_product (date,factory,packed_product,packed_qty,manpower_hrs) values(?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
            pquery.setString(1, datepack);
            pquery.setString(2, pfacto);
            pquery.setString(3, combprop);
            pquery.setDouble(4, pqty);
            pquery.setDouble(5, manp);
            numpack = pquery.executeUpdate();
            ResultSet rpck = pquery.getGeneratedKeys();
            while (rpck.next()) {
                jTextpackid.setText(String.valueOf(rpck.getInt(1)));
            }
            try {
                DefaultTableModel padel = (DefaultTableModel) jTable44.getModel();
                try {
                    int p1 = jTable44.getRowCount();
                    for (int p = 0; p <= p1; p++) {
                        padel.removeRow(0);
                    }
                } catch (Exception e) {
                }
                try {
//                    String Alk = jTextpackid.getText();
                    try (PreparedStatement esp = db_Connection.getInstance().prepareStatement("select * from packed_product where factory= ? and date= ?")) {
                        esp.setString(1, pfacto);
                        esp.setString(2, datepack);
                        rs = esp.executeQuery();
                        while (rs.next()) {
                            padel.addRow(new Object[]{rs.getInt("packed_productid"), rs.getString("packed_product"), rs.getDouble("packed_qty")});
                        }
                    }
                } catch (Exception e) {
                    java.util.logging.Logger.getLogger(NewJFrame.class
                            .getName()).log(java.util.logging.Level.SEVERE, null, e);
                }
            } catch (Exception e) {
                java.util.logging.Logger.getLogger(NewJFrame.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, e);
            }

        } catch (Exception e) {
            java.util.logging.Logger.getLogger(NewJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, e);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_savepackActionPerformed

    private void jButton97ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton97ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton97ActionPerformed

    private void jButton104ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton104ActionPerformed
        String dtpckee = ((JTextField) jDatePacking.getDateEditor().getUiComponent()).getText();
        String Factoru = jTextLogin.getText();
        String ppck = (String) jCombo_package.getSelectedItem();
        String ackqty = jText_packageqty.getText();
        Double packqty = Double.valueOf(ackqty);
        String lbl = (String) jCombo_label.getSelectedItem();
        String blqty = jText_lblqty.getText();
        Double lblqty = Double.valueOf(blqty);
        String ckid = jTextpackid.getText();
        Integer pckid = Integer.parseInt(ckid);
        ResultSet rusev;

        try {
//where factory='" + access + "'
            PreparedStatement psly = db_Connection.getInstance().prepareStatement("SELECT * FROM package where can_name='" + ppck + "'");
//            Connection conpack = (Connection) db_Connection.getInstance();
//            conpack.setAutoCommit(false);
            try {
                rusev = psly.executeQuery();

                while (rusev.next()) {
                    jTextField133.setText(rusev.getString("price_per_can"));

                }

                try {
//where factory='" + access + "'
                    PreparedStatement pslLy = db_Connection.getInstance().prepareStatement("SELECT * FROM package where label_name='" + lbl + "'");

                    try {
                        rusev = pslLy.executeQuery();

                        while (rusev.next()) {
                            jTextField134.setText(rusev.getString("price_per_label"));

                        }
                        try {
                            String pfpry = jTextField133.getText();
                            Double pfryce = Double.valueOf(pfpry);
                            String plpry = jTextField134.getText();
                            Double plryce = Double.valueOf(plpry);

                            String esql = "insert into packing_package(package,package_qty,label,label_qty,ref_packid,package_price,label_price) values(?,?,?,?,?,?,?)";

                            try (PreparedStatement pesql = db_Connection.getInstance().prepareStatement(esql)) {
                                pesql.setString(1, ppck);
                                pesql.setDouble(2, packqty);
                                pesql.setString(3, lbl);
                                pesql.setDouble(4, lblqty);
                                pesql.setInt(5, pckid);
                                pesql.setDouble(6, pfryce);
                                pesql.setDouble(7, plryce);
                                pesql.executeUpdate();
                                try {
                                    DefaultTableModel modeura = (DefaultTableModel) jTable_ppack.getModel();
                                    try {
                                        int comd = modeura.getRowCount();
                                        for (int mcod = 0; mcod <= comd; mcod++) {
                                            modeura.removeRow(0);
                                        }
                                    } catch (Exception e) {
//java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, e);
                                    }
                                    try (PreparedStatement espo = db_Connection.getInstance().prepareStatement("select* from pack_package where factory= ? and date=?")) {
                                        espo.setString(1, Factoru);
                                        espo.setString(2, dtpckee);
                                        rs = espo.executeQuery();
                                        while (rs.next()) {
                                            modeura.addRow(new Object[]{rs.getInt("ref_packid"), rs.getString("package"), rs.getDouble("package_qty"), rs.getString("label"), rs.getDouble("label_qty")});
                                        }
                                        espo.close();
                                    }

                                } catch (Exception e) {
                                    java.util.logging.Logger.getLogger(NewJFrame.class
                                            .getName()).log(java.util.logging.Level.SEVERE, null, e);
                                }

                                pesql.close();
                            } catch (Exception e) {
                                java.util.logging.Logger.getLogger(NewJFrame.class
                                        .getName()).log(java.util.logging.Level.SEVERE, null, e);
                            }
//                            ashered.close();
                        } catch (Exception e) {
                            java.util.logging.Logger.getLogger(NewJFrame.class
                                    .getName()).log(java.util.logging.Level.SEVERE, null, e);
                        }

//            pesql.close();
                    } catch (Exception e) {
                        java.util.logging.Logger.getLogger(NewJFrame.class
                                .getName()).log(java.util.logging.Level.SEVERE, null, e);
                    }
                } catch (Exception e) {
                    java.util.logging.Logger.getLogger(NewJFrame.class
                            .getName()).log(java.util.logging.Level.SEVERE, null, e);
                }

//            pesql.close();
            } catch (Exception e) {
                java.util.logging.Logger.getLogger(NewJFrame.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, e);
            }
        } catch (Exception e) {
            java.util.logging.Logger.getLogger(NewJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, e);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton104ActionPerformed

    private void jTable44MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable44MouseClicked
        int skraaa = jTable44.getSelectedRow();
        String tremble = (jTable44.getModel().getValueAt(skraaa, 0).toString());
        jTextpackid.setText(tremble);
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable44MouseClicked

    private void jTable18MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable18MouseClicked
        String decider = (String) jComboBox16.getSelectedItem();
        int tpa = jTable18.getSelectedRow();
        String trur;
        String urtu;

        switch (decider) {
            case "Ingredient":

                trur = (jTable18.getModel().getValueAt(tpa, 3)).toString();
                urtu = (jTable18.getModel().getValueAt(tpa, 1)).toString();
                jTextpid.setText(trur);
                jTextppname.setText(urtu);

                break;
            default:

                trur = (jTable18.getModel().getValueAt(tpa, 3)).toString();
                urtu = (jTable18.getModel().getValueAt(tpa, 1)).toString();
                jTextpid.setText(trur);
                jTextppname.setText(urtu);

        }

//        String triar = jLabel12.getText();
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable18MouseClicked

    private void jTextpackidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextpackidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextpackidActionPerformed

    private void jButton61ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton61ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton61ActionPerformed

    private void jTable40MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable40MouseClicked
        jTextField139.setText(null);
        int tblforty = jTable40.getSelectedRow();
        String tremble = (jTable40.getModel().getValueAt(tblforty, 0).toString());
        jTextField139.setText(tremble);
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable40MouseClicked

    private void jComboBox18MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox18MouseClicked

//jComboBox21.setModel(new DefaultComboBoxModel(groupReturns.getGroupe().toArray()));
//            jComboBox26.setModel(new DefaultComboBoxModel(groupReturns.getGroupe().toArray()));
//            
//            
//           
//            
//            jComboBox4.setModel(new DefaultComboBoxModel(packageReturns.getPackage().toArray()));
//
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox18MouseClicked

    private void jButtondisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtondisplayActionPerformed
        com.canning.analysis.productAnalysis.loadItems();
//        String cat = (String) jComboBox18.getSelectedItem();
//        String name = (String) jComboBox19.getSelectedItem();
//        String date1 = ((JTextField) jDate1st.getDateEditor().getUiComponent()).getText();
//        String date2 = ((JTextField) jDate2nd.getDateEditor().getUiComponent()).getText();
//
////                String sqlprod = "Select * from productanalysis where product=? and date between ? and ?";
//       
    }//GEN-LAST:event_jButtondisplayActionPerformed
    // TODO add your handling code here:

    private void jButton109ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton109ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton109ActionPerformed

    private void jButton50ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton50ActionPerformed
        try {
            String idtbl = jTextpackid.getText();
            int idt = Integer.valueOf(idtbl);
//       mouseClick.setId(idt);
        } catch (Exception e) {
            Logger.getLogger(NewJFrame.class
                    .getName()).log(Level.SEVERE, null, e);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton50ActionPerformed

    private void jButton80ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton80ActionPerformed

        fieldin.setText(null);
        fieldout.setText(null);
        fieldwaste.setText(null);
        fieldmanp.setText(null);
        try {
            DefaultTableModel mopela = (DefaultTableModel) jTable3.getModel();
            int pz1 = mopela.getRowCount();
            for (int p31 = 0; p31 < pz1; ++p31) {

                mopela.removeRow(0);
                mopela.setRowCount(1);
            }
            try {
                DefaultTableModel mopel1 = (DefaultTableModel) jTable2.getModel();
                int pz2 = mopel1.getRowCount();
                for (int p32 = 0; p32 < pz2; ++p32) {
                    mopel1.removeRow(0);
                    mopel1.setRowCount(1);

                }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Invalid Entry");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Invalid Entry");
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton80ActionPerformed

    private void jButton100ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton100ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton100ActionPerformed

    private void jMenuItem32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem32ActionPerformed
//       IngFormer.removeAll();
//        IngFormer.add(ExportAndImport.raw_material_reception);
//        IngFormer.repaint();
//        IngFormer.revalidate();
//        
//        MainPanel.removeAll();
//        MainPanel.add(IngFormer);
//        MainPanel.repaint();
//        MainPanel.revalidate();
//        // jComboBox14.setModel(new DefaultComboBoxModel(ingredientReturns.getIngredient().toArray()));
////            jComboBox15.setModel(new DefaultComboBoxModel(rawMaterialReturns.getrawMaterial().toArray()));
////NewJFrame.a
//ExportAndImport.setVisible(true);
        new ExportAndImport().setVisible(true);

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem32ActionPerformed

    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed

//        ingredient_displayer.removeAll();
//        ingredient_displayer.add(jPanel47);
//        ingredient_displayer.repaint();
//        ingredient_displayer.revalidate();
        ingstock();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton25ActionPerformed

    private void jMenuItem33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem33ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem33ActionPerformed

    private void jComboBox16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox16ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox16ActionPerformed

    private void jTabbedPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane2MouseClicked
        String categrot = (String) jComboBox16.getSelectedItem();
        jLabel132.setText(categrot);

        // TODO add your handling code here:
    }//GEN-LAST:event_jTabbedPane2MouseClicked

    private void jComboBox17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox17ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox17ActionPerformed

    private void jButton107ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton107ActionPerformed
        String tobdeleted = jTextField163.getText();
        String krood = "set sql_safe_updates=0;  \n"
                + "delete from packageproduction where voucher_no=?;  \n"
                + "delete from ingredientsproduction where voucher_no=?;  \n"
                + "delete from raw_materialproduction where voucher_no=?;  \n"
                + " delete  from productproduction where voucher_no=?;"
                + " delete  from production where voucher_no=?;"
                + "set sql_safe_updates=1";
        try (PreparedStatement asdfg = db_Connection.getInstance().prepareStatement(krood)) {
            asdfg.setString(1, tobdeleted);
            asdfg.setString(2, tobdeleted);
            asdfg.setString(3, tobdeleted);
            asdfg.setString(4, tobdeleted);
            asdfg.setString(5, tobdeleted);
            asdfg.executeUpdate();

        } catch (Exception e) {
            Logger.getLogger(NewJFrame.class
                    .getName()).log(Level.SEVERE, null, e);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton107ActionPerformed

    private void jMenuItem36ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem36ActionPerformed
        AverageCost();

        MainPanel.removeAll();
        MainPanel.add(jPanelAverageCost);
        MainPanel.repaint();
        MainPanel.revalidate();

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem36ActionPerformed

    private void AverageCost() {
        String pck = jTextLogin.getText();

        if (jTextLogin.getText().equals("ADMINISTRATOR")) {
            try {
                DefaultTableModel model = (DefaultTableModel) jTableavg.getModel();
                model.setColumnCount(6);
                try {
                    int z = model.getRowCount();
                    for (int lue = 0; lue <= z; ++lue) {
                        model.removeRow(0);
                    }

                } catch (Exception e) {
//                           JOptionPane.showMessageDialog(null, "Cannot save." + e);
//                               e.printStackTrace();
                }

                try (PreparedStatement ps1ez = db_Connection.getInstance().prepareStatement("SELECT * FROM all_average_cost order by product;")) {
                    ResultSet rsPadd = ps1ez.executeQuery();
                    jTableavg.setModel(rsToTableModels.aboveMarginModel.buildTableModel(rsPadd));
//                    while (rsPadd.next()) {
//                        model.addRow(new Object[]{rsPadd.getString("product"), rsPadd.getDouble("rawcost"), rsPadd.getDouble("cancost"), rsPadd.getDouble("mancost"), rsPadd.getDouble("averageprice"), rsPadd.getString("frome")});
////                        model.addRow(new Object[]{rsPadd.getString("product"), rsPadd.getString("factory"), rsPadd.getDouble("rawcost"), rsPadd.getDouble("cancost"), rsPadd.getDouble("fuelcost"), rsPadd.getDouble("elecost"), rsPadd.getDouble("dieselcost"), rsPadd.getDouble("mancost"), rsPadd.getDouble("wastecost"), rsPadd.getDouble("averageprice"), rsPadd.getString("month"), rsPadd.getDouble("quantity")});
//                    }
                    try {
//                        jComboBoxavg.setEnabled(true);
                        jComboBoxavg.setModel(new DefaultComboBoxModel(factoryReturns.getFactories().toArray()));

                    } catch (Exception e) {
                        Logger.getLogger(NewJFrame.class
                                .getName()).log(Level.SEVERE, null, e);
//                e.printStackTrace();
                    }

                    ps1ez.close();
                } catch (Exception e) {
                    Logger.getLogger(NewJFrame.class
                            .getName()).log(Level.SEVERE, null, e);
                    e.printStackTrace();
                }

            } catch (Exception e) {
                Logger.getLogger(NewJFrame.class
                        .getName()).log(Level.SEVERE, null, e);
                e.printStackTrace();
            }
        } else {
            try {
                DefaultTableModel model = (DefaultTableModel) jTableavg.getModel();
                model.setColumnCount(6);
                try {
                    int z = model.getRowCount();
                    for (int lue = 0; lue <= z; ++lue) {
                        model.removeRow(0);
                    }

                } catch (Exception e) {
//                           JOptionPane.showMessageDialog(null, "Cannot save." + e);
//                               e.printStackTrace();
                }

                try (PreparedStatement ps1ez = db_Connection.getInstance().prepareStatement("SELECT * FROM all_average_cost where factory=?  order by product;")) {
                    ps1ez.setString(1, pck);
                    ResultSet rsPadd = ps1ez.executeQuery();
                    jTableavg.setModel(rsToTableModels.aboveMarginModel.buildTableModel(rsPadd));
//                    while (rsPadd.next()) {
//                        model.addRow(new Object[]{rsPadd.getString("product"), rsPadd.getDouble("rawcost"), rsPadd.getDouble("cancost"), rsPadd.getDouble("mancost"), rsPadd.getDouble("averageprice"), rsPadd.getString("frome")});
////                        model.addRow(new Object[]{rsPadd.getString("product"), rsPadd.getString("factory"), rsPadd.getDouble("rawcost"), rsPadd.getDouble("cancost"), rsPadd.getDouble("fuelcost"), rsPadd.getDouble("elecost"), rsPadd.getDouble("dieselcost"), rsPadd.getDouble("mancost"), rsPadd.getDouble("wastecost"), rsPadd.getDouble("averageprice"), rsPadd.getString("month"), rsPadd.getDouble("quantity")});
//                    }
                    try {
                        jComboBoxavg.setModel(new DefaultComboBoxModel(factoryReturns.getFactories().toArray()));

                    } catch (Exception e) {
                        Logger.getLogger(NewJFrame.class
                                .getName()).log(Level.SEVERE, null, e);
//                e.printStackTrace();
                    }
                    jComboBoxavg.setEnabled(false);
                    jComboBoxavg.setSelectedItem(pck);
                    ps1ez.close();
                } catch (Exception e) {
                    Logger.getLogger(NewJFrame.class
                            .getName()).log(Level.SEVERE, null, e);
                    e.printStackTrace();
                }

            } catch (Exception e) {
                Logger.getLogger(NewJFrame.class
                        .getName()).log(Level.SEVERE, null, e);
                e.printStackTrace();
            }
        }
    }

    private void jMenuItem34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem34ActionPerformed
        try {
            SupCombox.setModel(new DefaultComboBoxModel(supplierReturns.getSupplier().toArray()));
            rawCombox.setModel(new DefaultComboBoxModel(allIngredientReturns.getallmainMaterial().toArray()));
        } catch (Exception e) {
            e.printStackTrace();
        }
        MainPanel.removeAll();
        MainPanel.add(ExportAndImport.past_and_sort_report);
        MainPanel.repaint();
        MainPanel.revalidate();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem34ActionPerformed

    private void jMenuItem37ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem37ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem37ActionPerformed

    private void jButton110ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton110ActionPerformed
//String tobdeleted=jTextField163.getText();
        String krood = "insert into new_view\n"
                + "select * from new_view1 where Production_ID not in(select  Production_ID from new_view) and  new_view1.date>'2019-05-01' ;";
        try (PreparedStatement asdfg = db_Connection.getInstance().prepareStatement(krood)) {
            asdfg.executeUpdate();

        } catch (Exception e) {
            Logger.getLogger(NewJFrame.class
                    .getName()).log(Level.SEVERE, null, e);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton110ActionPerformed

    private void jTableavgMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableavgMouseClicked
        try {
//            int powt = jTableavg.getSelectedRow();
//            String tableclickp = (jTableavg.getModel().getValueAt(powt, 0).toString());

            int row = jTableavg.getSelectedRow();
            String tableclick = (jTableavg.getModel().getValueAt(row, 6).toString());
            String tableclickp = (jTableavg.getModel().getValueAt(row, 0).toString());
            jTextField20.setText(tableclickp);
            jLabel156.setText(tableclick);
            jLabel142.setText(tableclickp);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error connection");
            e.printStackTrace();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jTableavgMouseClicked

    private void jButton108ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton108ActionPerformed
        String pck = jTextStatus.getText();//factory
//        String factoe = jTextLogin.getText();//factory
        String aciu = jLabel156.getText();
//        String dateaverage1 = ((JTextField) Choose1.getDateEditor().getUiComponent()).getText();
//        String dateaverage2 = ((JTextField) Choose2.getDateEditor().getUiComponent()).getText();
//        String avgdisp = jTextField20.getText();

        if (jRadioButton3.isSelected() == true) {
            switch (pck) {
                case "ADMINISTRATOR":
                    switch (aciu) {
                        case "production":
                            avgCostreturns.prodRadio.prodradioAdmin();
                            break;
                        case "packing":
                            avgCostreturns.packradio.packradioAdmin();
                            break;
                    }
                    break;

                case "USER":
                    switch (aciu) {
                        case "production":
                            avgCostreturns.prodRadio.prodradioUser();
                            break;
                        case "packing":
                            avgCostreturns.packradio.packradioUser();
                            break;
                    }
                    break;
            }
        } else {
//if (jRadioButton3.isSelected() ==false)
            switch (pck) {
                case "ADMINISTRATOR":
                    switch (aciu) {
                        case "production":
                            avgCostreturns.prodnoRadio.prodnoradioAdmin();
                            break;
                        case "packing":
                            avgCostreturns.packNoRadio.packnoradioAdmin();
                            break;
                    }
                    break;
                case "USER":

                    switch (aciu) {

                        case "production":
                            avgCostreturns.prodnoRadio.prodnoradioUser();
                            break;
                        case "packing":
                            avgCostreturns.packNoRadio.packnoradioUser();
                            break;
                    }
                    break;
//
            }
//
        }
//        

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton108ActionPerformed


    private void jComboBoxavgMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxavgMouseClicked
        String usre = jTextLogin.getText();

        String exta = (String) jComboBoxavg.getSelectedItem();

        try (PreparedStatement ps1ez = db_Connection.getInstance().prepareStatement("SELECT * FROM all_average_cost where factory=?  order by product;")) {
            ps1ez.setString(1, exta);
            ResultSet rsPadd = ps1ez.executeQuery();
            while (rsPadd.next()) {
                jTableavg.setModel(rsToTableModels.aboveMarginModel.buildTableModel(rsPadd));
//                    model.addRow(new Object[]{rsPadd.getString("product"), rsPadd.getString("factory"), rsPadd.getDouble("rawcost"), rsPadd.getDouble("cancost"), rsPadd.getDouble("fuelcost"), rsPadd.getDouble("elecost"), rsPadd.getDouble("dieselcost"), rsPadd.getDouble("mancost"), rsPadd.getDouble("wastecost"), rsPadd.getDouble("averageprice"), rsPadd.getString("month"), rsPadd.getDouble("quantity")});
            }

            ps1ez.close();
        } catch (Exception e) {
            Logger.getLogger(NewJFrame.class
                    .getName()).log(Level.SEVERE, null, e);
            e.printStackTrace();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxavgMouseClicked

    private void jComboBoxavgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxavgActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxavgActionPerformed

    private void jButton111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton111ActionPerformed
        AverageCost();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton111ActionPerformed

    private void jTable16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable16MouseClicked

        try {

            int row = jTable16.getSelectedRow();
            String tableclick = (jTable16.getModel().getValueAt(row, 3).toString());
            jTextField31.setText(tableclick);
            Connection conclikftt = (Connection) db_Connection.getInstance();
            String clik = "select * from ingredpriceinc where ingredID='" + tableclick + "' ";
            try (PreparedStatement psclikk = conclikftt.prepareStatement(clik)) {
                rs = psclikk.executeQuery();

                if (rs.next()) {
                    int tadd1 = rs.getInt("ingredID");
                    String tadd = String.valueOf(tadd1);
                    jTextField82.setText(tadd);

                    Double btadd1 = rs.getDouble("total_qty");
                    String btadd = String.valueOf(btadd1);
                    jTextField83.setText(btadd);

                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error connection");
            //                e.printStackTrace();
        }
        //        } catch (Exception e) {
        //            JOptionPane.showMessageDialog(null, "Error connection");
        //            e.printStackTrace();
        //        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jTable16MouseClicked

    private void jButton36ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton36ActionPerformed
        String yCsawa1 = (String) jComboBox26.getSelectedItem();
        String ysCua11 = (String) jComboBox3.getSelectedItem();
        String yCtwe1 = jTextField3.getText();
        Integer ytCwi1 = Integer.parseInt(yCtwe1);
        String ysCwa1 = (String) jComboBox21.getSelectedItem();
        String ydCte = ((JTextField) jDate1.getDateEditor().getUiComponent()).getText();
        String ycCatat1 = jTextField83.getText();//qty raw
        Double ycCatta = Double.valueOf(ycCatat1);
        String ycCatata1 = jTextField79.getText();//qty
        Double ycCattaa = Double.valueOf(ycCatata1);
        String yaCtata1 = jTextField82.getText();//id
        Double yatCtaa = Double.valueOf(yaCtata1);
        String yvaJs = jTextField78.getText();
        Double yvasJa = Double.valueOf(yvaJs);

        if (jRadioButton11.isSelected() && jRadioButton14.isSelected() == true) {
            //SUM QTYKGS DISPLAY

            try {

                Double ykreJa = ycCattaa / yvasJa;
                Double ykwatJa = (ykreJa * ycCatta);
                try {

                    Connection ycontua1J1 = (Connection) db_Connection.getInstance();

                    String yChangJa = "update ingredientsproduction set ingredient_qty='" + ykwatJa + "' where ingredID= '" + yatCtaa + "' ";
                    try (PreparedStatement ypsiJ3 = ycontua1J1.prepareStatement(yChangJa)) {

                        ypsiJ3.executeUpdate();
                        JOptionPane.showMessageDialog(null, "OPERATION SUCCESSFUL!");
                        ypsiJ3.close();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Error Executing!");
                        //                        e.printStackTrace();
                    }

                } catch (Exception e) {
                    //                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Database Error");
                }
            } catch (Exception e) {
                //                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Database Error");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Only for shared resources!!");
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton36ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        com.canning.production.addIngredient.ingAdd();
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton30ActionPerformed
        int yesNo = JOptionPane.showConfirmDialog(null, "Do You Really Want To DELETE this data?", "Delete", JOptionPane.YES_NO_OPTION);
        if (yesNo == 0) {
            String blu = jTextField3.getText();
            if (!jTextField62.getText().equals("")) {
                try (PreparedStatement pers = db_Connection.getInstance().prepareStatement("DELETE FROM ingredientsproduction WHERE ingredID = ?")) {
                    int id = Integer.parseInt(jTextField82.getText());
                    pers.setInt(1, id);
                    pers.executeUpdate();
                    //TABLE PANEL ADD
                    try {
                        DefaultTableModel model = (DefaultTableModel) jTable16.getModel();

                        try {
                            int z3 = model.getRowCount();
                            for (int lu3 = 0; lu3 <= z3; ++lu3) {
                                model.removeRow(0);
                            }
                        } catch (Exception e) {
                        }
                        try (PreparedStatement ps7 = db_Connection.getInstance().prepareStatement("SELECT * FROM ingredpriceinc where voucher_no = '" + blu + "';")) {

                            rs = ps7.executeQuery();

                            while (rs.next()) {
                                model.addRow(new Object[]{rs.getInt("ProductionID"), rs.getString("ingredient_name"), rs.getDouble("ingredient_qty"), rs.getInt("ingredID"), rs.getDouble("ingredient_price"), rs.getString("cons_no")});
                            }

                            //SUM ING QTY
                            try {
                                String t = "SELECT sum(ingredient_qty) FROM ingredpriceinc WHERE voucher_no= '" + blu + "';";

                                PreparedStatement psc = db_Connection.getInstance().prepareStatement(t);
                                rs = psc.executeQuery(t);

                                if (rs.next()) {
                                    Double bansal = rs.getDouble(1);

                                    jTextField44.setText(String.valueOf(bansal));
                                }

                            } catch (Exception e) {
                                //                                e.printStackTrace();
                                JOptionPane.showMessageDialog(null, "Cannot save." + e);
                            }

                            rs.close();
                            ps7.close();

                        } catch (Exception e) {
                            //                            e.printStackTrace();
                            JOptionPane.showMessageDialog(this, "Error in connectivity");
                        }

                    } catch (Exception e) {
                        //                        e.printStackTrace();
                        JOptionPane.showMessageDialog(null, "Invalid Entry or field must be completely filled", "message", 2);
                    }
                    pers.close();
                    JOptionPane.showMessageDialog(null, "The Data Was Successfully Deleted!");
                } catch (Exception e) {
                    Logger.getLogger(NewJFrame.class
                            .getName()).log(Level.SEVERE, null, e);

                }
            } else {
                JOptionPane.showMessageDialog(null, "Could NOT Delete The Data! No Id!");
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton30ActionPerformed

    private void jTextField32KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField32KeyPressed

        jTextField32.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent evt) {
                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    String bla = jTextField32.getText();
                    Double ble = Double.valueOf(bla);
                    String bli = (String) jComboBox14.getSelectedItem();
                    String blo = jTextField3.getText();
                    Integer blu = Integer.parseInt(blo);
                    String boL = jTextField62.getText();
                    Integer bold = Integer.parseInt(boL);
                    String ind = (String) jComboBox21.getSelectedItem();
                    //        Double ingd = Double.valueOf(ind);

                    try {

                        Connection con16 = (Connection) db_Connection.getInstance();
                        PreparedStatement psy = con16.prepareStatement("INSERT INTO ingredientsproduction(voucher_no,ingredient_name,ingredient_qty,ProductionID,groupe,total_qty)"
                                + "values(?,?,?,?,?,?)");
                        psy.setInt(1, blu);
                        psy.setString(2, bli);
                        psy.setDouble(3, ble);
                        psy.setInt(4, bold);
                        psy.setString(5, ind);
                        psy.setDouble(6, ble);

                        psy.executeUpdate();
                        psy.close();
                        //TABLE PANEL ADD
                        try {
                            DefaultTableModel model = (DefaultTableModel) jTable16.getModel();

                            try {
                                int z3 = model.getRowCount();
                                for (int lu3 = 0; lu3 <= z3; ++lu3) {
                                    model.removeRow(0);
                                }
                            } catch (Exception e) {
                            }
                            try {

                                PreparedStatement ps7 = con16.prepareStatement("SELECT * FROM ingredpriceinc where voucher_no = '" + blu + "';");

                                rs = ps7.executeQuery();

                                while (rs.next()) {
                                    model.addRow(new Object[]{rs.getInt("ProductionID"), rs.getString("ingredient_name"), rs.getDouble("ingredient_qty"), rs.getString("unit"), rs.getDouble("ingredient_price"), rs.getInt("ingredID")});
                                }
                                ps7.close();
                                //SUM ING QTY
                                try {
                                    String t = "SELECT sum(ingredient_qty) FROM ingredpriceinc WHERE voucher_no= '" + blu + "';";

                                    try (PreparedStatement psc = con16.prepareStatement(t)) {
                                        rs = psc.executeQuery(t);

                                        if (rs.next()) {
                                            Double bansal = rs.getDouble(1);

                                            jTextField44.setText(String.valueOf(bansal));
                                        }
                                    }
                                } catch (Exception e) {
                                    //                                    e.printStackTrace();
                                    JOptionPane.showMessageDialog(null, "Cannot save." + e);
                                }

                                rs.close();
                                ps7.close();

                            } catch (Exception e) {
                                //                                e.printStackTrace();
                                JOptionPane.showMessageDialog(null, "Error in connectivity");
                            }

                        } catch (Exception e) {
                            //                            e.printStackTrace();
                            JOptionPane.showMessageDialog(null, "Invalid Entry or field must be completely filled", "message", 2);
                        }
                        psy.close();
                        //                        JOptionPane.showMessageDialog(null, "The data was successfully added to the Database!");
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage());
                    }
                }
            }
        });

        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField32KeyPressed

    private void jTextField32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField32ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField32ActionPerformed

    private void jTextField32FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField32FocusGained
        jTextField31.setText("");
        jTextField32.setText("");
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField32FocusGained

    private void jComboBox14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox14ActionPerformed
        String asu = jTextLogin.getText();
//        if (asu.equals("F6")) {
        String strawm = (String) jComboBox14.getSelectedItem();
//        jComboBox30.removeAllItems();
        jComboBox30.setSelectedItem("pre-cosn_no");
//            try (PreparedStatement ps6 = db_Connection.getInstance().prepareStatement("SELECT distinct(main_material) FROM all_ingredients WHERE ingredient =? into @skram;")) {
//                ps6.setString(1, strawm);
//                ps6.execute();
//                ResultSet rsPadda = ps6.executeQuery("SELECT distinct(cons_no) FROM raw_material_issue WHERE raw_material =@skram and issued_to='" + asu + "'");
//                while (rsPadda.next()) {
//                    jComboBox30.addItem(rsPadda.getString("cons_no"));
//                    //                                rawm.setText(rsPadda.getString("cons_no"));
//                }
        try (PreparedStatement ps6 = db_Connection.getInstance().prepareStatement("SELECT distinct concat(cons_no,'                      ',stock_in_hand)as cons_no FROM raw_material_stocks WHERE raw_material =? and factory='" + asu + "' and stock_in_hand>0;")) {
            ps6.setString(1, strawm);
            ResultSet rsPadda = ps6.executeQuery();
            while (rsPadda.next()) {
                jComboBox30.addItem(rsPadda.getString("cons_no"));
                //                                rawm.setText(rsPadda.getString("cons_no"));
            }
            rsPadda.close();
        } catch (SQLException e) {
            Logger.getLogger(NewJFrame.class
                    .getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(null, "Error in connectivity");
        } catch (InstantiationException ex) {
            Logger.getLogger(NewJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
//        } else {
//            jComboBox30.setSelectedItem("pre-cosn_no");
//        }
//////rawm.setText(null);
////        String cople = (String) jComboBox15.getSelectedItem();
////        try (PreparedStatement ps5 = db_Connection.getInstance().prepareStatement("SELECT * FROM raw_material WHERE raw_material_name= ?")) {
////            ps5.setString(1, cople);
////            ResultSet rsPadd = ps5.executeQuery();
////
////            while (rsPadd.next()) {
////                rawm.setText(rsPadd.getString("main_material"));
////
////            }
////            rsPadd.close();
////            ps5.close();
//
//        } catch (SQLException e) {
//            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, e);
//            JOptionPane.showMessageDialog(null, "Error in connectivity");
//        } catch (InstantiationException ex) {
//            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        //        String kwe = (String) jComboBox3.getSelectedItem();
//        //        try {
//        //            Class.forName("com.mysql.jdbc.Driver").newInstance();
        //            Connection con15 = (Connection) DriverManager.getConnection("jdbc:mysql://192.168.1.190:3306/canning?zeroDateTimeBehavior=convertToNull", "weru", "steve23741997");
        //
        //            String s = "SELECT * FROM ingredients where factory = '" + kwe + "';";
        //            try (PreparedStatement ps = con15.prepareStatement(s)) {
        //                rs = ps.executeQuery(s);
        //
        //                while (rs.next()) {
        //                    jComboBox14.addItem(rs.getString("ingredient_name"));
        //
        //                }
        //
        //                rs.close();
        //                ps.close();
        //                con15.close();
        //            } catch (Exception e) {
        //                JOptionPane.showMessageDialog(null, "Database Error");
        //            }
        //        } catch (Exception e) {
        //            JOptionPane.showMessageDialog(null, "Error connection");
        //        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox14ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        Factorycombo();
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jComboBox3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3MouseClicked

    private void jComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox3ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3ItemStateChanged

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        com.canning.production.addPackage.packarde();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton26ActionPerformed

        int yesNoo = JOptionPane.showConfirmDialog(null, "Do You Really Want To DELETE this data?", "Delete", JOptionPane.YES_NO_OPTION);

        if (yesNoo == 0) {
            String qqwi = jTextField3.getText();
            if (!jTextField68.getText().equals("")) {
                try {

                    Connection coned = (Connection) db_Connection.getInstance();
                    try (PreparedStatement prs = coned.prepareStatement("DELETE FROM packageproduction WHERE packId = ?")) {
                        int id = Integer.parseInt(jTextField139.getText());
                        prs.setInt(1, id);
                        prs.executeUpdate();
                        //TABLE INSERT
                        try {
                            DefaultTableModel model = (DefaultTableModel) jTable17.getModel();

                            try {
                                int e3 = model.getRowCount();
                                for (int eu3 = 0; eu3 <= e3; ++eu3) {
                                    model.removeRow(0);
                                }
                            } catch (Exception e) {
                            }
                            try (PreparedStatement pse = db_Connection.getInstance().prepareStatement("SELECT * FROM packageproduction where voucher_no = '" + qqwi + "';")) {

                                rs = pse.executeQuery();

                                while (rs.next()) {
                                    model.addRow(new Object[]{rs.getString("production_id"), rs.getString("can_name"), rs.getDouble("no_of_cans"), rs.getString("label_name"), rs.getDouble("no_of_labels")});
                                }

                                rs.close();
                                pse.close();
                            } catch (Exception e) {
                                //                            e.printStackTrace();
                                JOptionPane.showMessageDialog(this, "Error in connectivity");
                            }

                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e.getMessage());
                            //                        e.printStackTrace();
                        }
                        JOptionPane.showMessageDialog(null, "The Data Was Successfully Deleted!");

                    }
                } catch (Exception e) {
                    Logger.getLogger(NewJFrame.class
                            .getName()).log(Level.SEVERE, null, e);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Could NOT Delete The Data! No Id!");
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton26ActionPerformed

    private void jComboBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox5ActionPerformed
//        jComboBox31.removeAllItems();
        String asu = jTextLogin.getText();
        String strawm = (String) jComboBox5.getSelectedItem();
//        if (asu.equals("F6")) {
//        jComboBox30.removeAllItems();
        try (PreparedStatement ps6 = db_Connection.getInstance().prepareStatement("SELECT main_label FROM package WHERE label_name =? into @skram;")) {
            ps6.setString(1, strawm);
            ps6.execute();
            ResultSet rsPadda = ps6.executeQuery("SELECT distinct(cons_no) FROM package_reception WHERE package =@skram and category='label'");
            while (rsPadda.next()) {
                jComboBox31.addItem(rsPadda.getString("cons_no"));
                //                                rawm.setText(rsPadda.getString("cons_no"));
            }
            rsPadda.close();
        } catch (SQLException e) {
            Logger.getLogger(NewJFrame.class
                    .getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(null, "Error in connectivity");
        } catch (InstantiationException ex) {
            Logger.getLogger(NewJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
//        } else {
//            jComboBox31.setSelectedItem("pre-cosn_no");
//        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox5ActionPerformed

    private void jTextField23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField23ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField23ActionPerformed

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
//        jComboBox35.removeAllItems();
        String asu = jTextLogin.getText();
//        if (asu.equals("F6")) {
        String strawm = (String) jComboBox4.getSelectedItem();
//        jComboBox30.removeAllItems();
        try (PreparedStatement ps6 = db_Connection.getInstance().prepareStatement("SELECT main_package FROM package WHERE can_name =? into @skram;")) {
            ps6.setString(1, strawm);
            ps6.execute();
            ResultSet rsPadda = ps6.executeQuery("SELECT distinct(cons_no) FROM package_reception WHERE package =@skram and category='Package'");
            while (rsPadda.next()) {
                jComboBox35.addItem(rsPadda.getString("cons_no"));
                //                                rawm.setText(rsPadda.getString("cons_no"));
            }
            rsPadda.close();
        } catch (SQLException e) {
            Logger.getLogger(NewJFrame.class
                    .getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(null, "Error in connectivity");
        } catch (InstantiationException ex) {
            Logger.getLogger(NewJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
//        } else {
//            jComboBox35.setSelectedItem("pre-cosn_no");
//        }
//  jComboBox4.removeAllItems();//package
//        jComboBox26.removeAllItems();//grp
//        try {
//            jComboBox21.setModel(new DefaultComboBoxModel(groupReturns.getGroupe().toArray()));
//            jComboBox26.setModel(new DefaultComboBoxModel(groupReturns.getGroupe().toArray()));
//            jComboBox13.setModel(new DefaultComboBoxModel(productReturns.getProduct().toArray()));
//        } catch (Exception e) {
//                        JOptionPane.showMessageDialog(null, "Database Error");
//                    }
        //        try {
        //            Class.forName("com.mysql.jdbc.Driver").newInstance();
        //            Connection con5 = (Connection) DriverManager.getConnection("jdbc:mysql://192.168.1.190:3306/canning?zeroDateTimeBehavior=convertToNull", "weru", "steve23741997");
        //            String s = "select * from package";
        //            try (PreparedStatement ps = con5.prepareStatement(s)) {
        //                rs = ps.executeQuery(s);
        //
        //                while (rs.next()) {
        //                    jComboBox4.addItem(rs.getString("can_name"));
        //
        //                }
        //
        //                rs.close();
        //                ps.close();
        //                con5.close();
        //            } catch (Exception e) {
        //                JOptionPane.showMessageDialog(null, "Database Error");
        //            }
        //        } catch (Exception e) {
        //            JOptionPane.showMessageDialog(null, "Error connection");
        //        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void jRadioButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton11ActionPerformed

        if (jRadioButton11.isSelected() == true) {
            jComboBox26.setEnabled(true);
        } else {
            jComboBox26.setEnabled(false);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton11ActionPerformed

    private void jRadioButton11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRadioButton11MouseClicked

        String manq = jTextField11.getText();
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton11MouseClicked

    private void jButton64ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton64ActionPerformed
        try {
            jComboBox15.setModel(new DefaultComboBoxModel(productReturns.getProduct().toArray()));
        } catch (Exception e) {
            e.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton64ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        com.canning.production.AddButton.Productionadd();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField10ActionPerformed

    private void jButton33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton33ActionPerformed
     

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton33ActionPerformed

    private void jTextField3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyPressed

        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3KeyPressed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
       // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jButton55ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton55ActionPerformed
        com.canning.loaderReturns.bomLoader.bomprodnLoad();
    }//GEN-LAST:event_jButton55ActionPerformed


    private void jButton35ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton35ActionPerformed
        //        String Csawa1 = (String) jComboBox26.getSelectedItem();
        //        String sCua11 = (String) jComboBox3.getSelectedItem();
        //        String Ctwe1 = jTextField3.getText();
        //        Integer tCwi1 = Integer.parseInt(Ctwe1);
        //        String sCwa1 = (String) jComboBox21.getSelectedItem();
        //        String dCte = ((JTextField) jDate1.getDateEditor().getUiComponent()).getText();
        String cCatat1 = jTextField81.getText();//qty raw
        Double cCatta = Double.valueOf(cCatat1);
        String cCatata1 = jTextField79.getText();//qty
        Double cCattaa = Double.valueOf(cCatata1);
        String aCtata1 = jTextField80.getText();//id
        Double atCtaa = Double.valueOf(aCtata1);
        String vaJs = jTextField78.getText();
        Double vasJa = Double.valueOf(vaJs);

        if (jRadioButton11.isSelected() && jRadioButton12.isSelected() == true) {
            //SUM QTYKGS DISPLAY

            try {

                Double kreJa = cCattaa / vasJa;
                Double kwatJa = (kreJa * cCatta);
                try {

                    String ChangJa = "update raw_materialproduction set qty = '" + kwatJa + "' where RawID= '" + atCtaa + "' ";
                    try (PreparedStatement psiJ3 = db_Connection.getInstance().prepareStatement(ChangJa)) {

                        psiJ3.executeUpdate();
                        JOptionPane.showMessageDialog(null, "OPERATION SUCCESSFUL!");
                        psiJ3.close();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Error Executing!");
                        //                        e.printStackTrace();
                    }

                } catch (Exception e) {
                    //                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Database Error");
                }
            } catch (Exception e) {
                //                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Database Error");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Only for shared resources!!");
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton35ActionPerformed

    private void jTextField87FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField87FocusGained
        jTextField87.setText("");   // TODO add your handling code here:
    }//GEN-LAST:event_jTextField87FocusGained

    private void jButtonSplit_productproductionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSplit_productproductionActionPerformed
        com.canning.splitter.ProductSplit.splitProduct();
    }//GEN-LAST:event_jButtonSplit_productproductionActionPerformed

    

    private void jButtonDelete_productproductionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelete_productproductionActionPerformed
        String twi = jTextField3.getText();
        int yesNo = JOptionPane.showConfirmDialog(null, "Do You Really Want To DELETE this data?", "Delete", JOptionPane.YES_NO_OPTION);
        if (yesNo == 0) {
            DefaultTableModel cymbria = (DefaultTableModel) jTable14.getModel();
            if (jTable14.getSelectedRowCount() > 0) {
                int quartsrow[] = jTable14.getSelectedRows();
                for (int ai : quartsrow) {
                    int id = Integer.parseInt(jTable14.getValueAt(ai, 0).toString());
                    try (PreparedStatement weps = db_Connection.getInstance().prepareStatement("DELETE FROM productproduction WHERE ProductionID = ?")) {
                        weps.setInt(1, id);
                        weps.executeUpdate();
                        weps.close();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Invalid Entry or field must be completely filled", "message", 2);
                    }
                    cymbria.removeRow(ai);
                }
            }
            //            JOptionPane.showMessageDialog(null, "The Data Was Successfully Deleted!");
            try {
                DefaultTableModel model = (DefaultTableModel) jTable14.getModel();
                try {
                    int z = model.getRowCount();
                    for (int lue = 0; lue <= z; ++lue) {
                        model.removeRow(0);
                    }
                } catch (Exception e) {
                    //                           JOptionPane.showMessageDialog(null, "Cannot save." + e);
                    //                               e.printStackTrace();
                }
                try (PreparedStatement pts1 = db_Connection.getInstance().prepareStatement("SELECT * FROM prodpriceinclusive where voucher_no = '" + twi + "';")) {
                    rs = pts1.executeQuery();
                    while (rs.next()) {
                        model.addRow(new Object[]{rs.getString("ProductionID"), rs.getString("product_name"), rs.getDouble("quantity"), rs.getString("unit"), rs.getString("groupe")});
                    }
                    rs.close();
                    //DISPLAY PRODUCT TEXTFIELD
                    try {
                        try {
                            String t = "SELECT sum(quantity) FROM prodpriceinclusive WHERE voucher_no= '" + twi + "';";
                            PreparedStatement psc = db_Connection.getInstance().prepareStatement(t);
                            rs = psc.executeQuery(t);
                            if (rs.next()) {
                                Double kansal = rs.getDouble(1);
                                jTextField45.setText(String.valueOf(kansal));
                            }
                            //                            String manqq=jTextField45.getText();
                            //                            String manq=twa
                            rs.close();
                        } catch (Exception e) {
                            //                            e.printStackTrace();
                            JOptionPane.showMessageDialog(null, "Cannot save." + e);
                        }
                        rs.close();
                        //                            ps1.close();
                    } catch (Exception e) {
                        //                    e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Error in connectivity");
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Invalid Entry or field must be completely filled", "message", 2);
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonDelete_productproductionActionPerformed

    private void jButtonAdd_productproductionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAdd_productproductionActionPerformed
        com.canning.production.addProduct.productAdd();
    }//GEN-LAST:event_jButtonAdd_productproductionActionPerformed

    private void jButtonAdd_productproductionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButtonAdd_productproductionFocusGained

        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonAdd_productproductionFocusGained

    private void jComboBox13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox13ActionPerformed
        //        String vwa = (String) you
        jComboBox3.getSelectedItem();
        //
        //        try {
        //            Class.forName("com.mysql.jdbc.Driver").newInstance();
        //            Connection con16 = (Connection) DriverManager.getConnection("jdbc:mysql://192.168.1.190:3306/canning?zeroDateTimeBehavior=convertToNull", "weru", "steve23741997");
        //
        //            String T = "SELECT * FROM product where factory = '" + vwa + "';";
        //            try (PreparedStatement psrw = con16.prepareStatement(T)) {
        //                rs = psrw.executeQuery();
        //
        //                while (rs.next()) {
        //                    jComboBox13.addItem(rs.getString("product_name"));
        //
        //                }
        //
        //                rs.close();
        //                psrw.close();
        //                con16.close();
        //            } catch (Exception e) {
        ////                e.printStackTrace();
        //                JOptionPane.showMessageDialog(null, "Database Error");
        //            }
        //        } catch (Exception e) {
        //            JOptionPane.showMessageDialog(null, "Error connection");
        //        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox13ActionPerformed

    private void jComboBox13FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox13FocusGained

        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox13FocusGained

    private void jTextField73FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField73FocusGained
        jTextField73.setText("");   // TODO add your handling code here:
    }//GEN-LAST:event_jTextField73FocusGained

    private void jTextField30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField30ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField30ActionPerformed

    private void jTextField30FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField30FocusGained
        jTextField30.setText("");  // TODO add your handling code here:
    }//GEN-LAST:event_jTextField30FocusGained

    private void jButton29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton29ActionPerformed

        int yesNo = JOptionPane.showConfirmDialog(null, "Do You Really Want To DELETE this data?", "Delete", JOptionPane.YES_NO_OPTION);
        if (yesNo == 0) {
            String swi = jTextField3.getText();
            if (!jTextField63.getText().equals("")) {
                try (PreparedStatement rips = db_Connection.getInstance().prepareStatement("DELETE FROM raw_materialproduction WHERE RawID = ?")) {
                    int id = Integer.parseInt(jTextField80.getText());
                    rips.setInt(1, id);
                    rips.executeUpdate();
                    //TABLE INSERT
                    try {
                        DefaultTableModel model = (DefaultTableModel) jTable15.getModel();

                        try {
                            int z3 = model.getRowCount();
                            for (int lu3 = 0; lu3 <= z3; ++lu3) {
                                model.removeRow(0);
                            }
                        } catch (Exception e) {
                        }
                        try (PreparedStatement ps5 = db_Connection.getInstance().prepareStatement("SELECT * FROM rawmatpriceinc where voucher_no = '" + swi + "';")) {

                            rs = ps5.executeQuery();

                            while (rs.next()) {
                                model.addRow(new Object[]{rs.getInt("ProductionID"), rs.getString("raw_material"), rs.getInt("RawID"), rs.getString("unit"), rs.getString("cons_no")});
                            }

                            try {

                                try {
                                    String t = "SELECT sum(qty) FROM rawmatpriceinc WHERE voucher_no= '" + swi + "';";

                                    try (PreparedStatement psc = db_Connection.getInstance().prepareStatement(t)) {
                                        rs = psc.executeQuery(t);

                                        if (rs.next()) {
                                            Double bansal = rs.getDouble(1);

                                            jTextField43.setText(String.valueOf(bansal));
                                        }
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Cannot save." + e);
                                }
                            } catch (Exception ex) {
                                Logger.getLogger(NewJFrame.class
                                        .getName()).log(Level.SEVERE, null, ex);
                            }

                            rs.close();
                            ps5.close();

                        } catch (Exception e) {
                            //                    e.printStackTrace();
                            JOptionPane.showMessageDialog(this, "Error in connectivity");
                        }

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e.getMessage());
                    }
                    rips.close();
                    JOptionPane.showMessageDialog(null, "The Data Was Successfully Deleted!");
                } catch (Exception e) {
                    Logger.getLogger(NewJFrame.class
                            .getName()).log(Level.SEVERE, null, e);

                }
            } else {
                JOptionPane.showMessageDialog(null, "Could NOT Delete The Data! No Id!");
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton29ActionPerformed

    private void jComboBox21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox21ActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox21ActionPerformed

    private void jComboBox21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox21MouseClicked
        String grp = (String) jComboBox21.getSelectedItem();
        jComboBox13.removeAllItems();
        try {
            Connection con5 = (Connection) db_Connection.getInstance();
            String s = "select * from product where groupe ='" + grp + "'";
            try (PreparedStatement psgrp = con5.prepareStatement(s)) {
                rs = psgrp.executeQuery(s);
                while (rs.next()) {
                    jComboBox13.addItem(rs.getString("product_name"));
                }
                rs.close();
                psgrp.close();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Database Error");
                //                e.printStackTrace();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error connection");
            //            e.printStackTrace();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox21MouseClicked

    private void jTextField63ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField63ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField63ActionPerformed

    private void jTable17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable17MouseClicked
        try {

            int powt = jTable17.getSelectedRow();
            String tableclickp = (jTable17.getModel().getValueAt(powt, 0).toString());

            Connection conclik4p = (Connection) db_Connection.getInstance();

            String clik = "select * from packageproduction where packId='" + tableclickp + "' ";
            try (PreparedStatement psclikk = conclik4p.prepareStatement(clik)) {

                rs = psclikk.executeQuery();

                if (rs.next()) {
                    int tadd1 = rs.getInt("packId");
                    String tadd = String.valueOf(tadd1);
                    jTextField139.setText(tadd);
                }
                psclikk.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error connection");
            //            e.printStackTrace();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jTable17MouseClicked

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
        //        String kals = jTextArea1.getText();
        int no1 = 0;
        String rmk = jTextField3.getText();
        int voucher;
        //        try (PreparedStatement ALS = db_Connection.getInstance().prepareStatement("UPDATE production SET remarks=? where voucher_no=?")) {
        //
        //            ALS.setString(1, kals);
        //            ALS.setString(2, rmk);
        //            ALS.executeUpdate();
        //            ALS.close();
        //        } catch (Exception e) {
        //            JOptionPane.showMessageDialog(null, "Error EXECUTING");
        ////            e.printStackTrace();
        //        }
        try (PreparedStatement sa = db_Connection.getInstance().prepareStatement("UPDATE productproduction SET status='approved' where voucher_no=?")) {

            sa.setString(1, rmk);
            sa.executeUpdate();
            sa.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error EXECUTING");
            //            e.printStackTrace();
        }
        try {
            jTextField10.setText(null);
            jTextField11.setText(null);
            jTextField64.setText(null);
            jTextField63.setText(null);
            jTextField30.setText(null);
            jTextField31.setText(null);
            jTextField32.setText(null);
            jTextField62.setText(null);
            jTextField43.setText(null);
            jTextField44.setText(null);
            jTextField45.setText(null);
            jTextField23.setText(null);
            jTextField24.setText(null);
            jTextField3.setText(null);
            jTextField79.setText(null);
            jTextField80.setText(null);
            jTextField81.setText(null);
            jTextField78.setText(null);
            jTextField82.setText(null);

            jComboBox21.removeAllItems();
            jComboBox13.removeAllItems();
            jComboBox14.removeAllItems();
            jComboBox15.removeAllItems();
            jComboBox4.removeAllItems();
            jComboBox5.removeAllItems();
            jDate1.setDate(null);
            //            jTextArea1.setText(null);

            JOptionPane.showMessageDialog(null, "Data has been Saved");

            try {
                DefaultTableModel model = (DefaultTableModel) jTable10.getModel();
                model.setRowCount(no1);
                try {
                    String t = "SELECT * FROM production WHERE voucher_no IN (SELECT MAX(voucher_no) voucher_no FROM production)";
                    try (PreparedStatement wps = db_Connection.getInstance().prepareStatement(t)) {
                        rs = wps.executeQuery(t);
                        if (rs.next()) {

                            voucher = rs.getInt("voucher_no");
                            no1 = voucher + 1;
                            jTextField3.setText(String.valueOf(no1));
                        }
                        try {
                            DefaultTableModel mopela = (DefaultTableModel) jTable14.getModel();
                            int pz1 = mopela.getRowCount();
                            for (int p31 = 0; p31 < pz1; ++p31) {
                                mopela.setRowCount(0);
                            }
                            try {
                                DefaultTableModel mopel1 = (DefaultTableModel) jTable15.getModel();
                                int pz2 = mopel1.getRowCount();
                                for (int p32 = 0; p32 < pz2; ++p32) {
                                    mopel1.setRowCount(0);
                                }

                                try {
                                    DefaultTableModel mopel3 = (DefaultTableModel) jTable16.getModel();
                                    int pz3 = mopel3.getRowCount();
                                    for (int p33 = 0; p33 < pz3; ++p33) {
                                        mopel3.setRowCount(0);
                                    }

                                    try {
                                        DefaultTableModel mopel4 = (DefaultTableModel) jTable17.getModel();
                                        int pz4 = mopel4.getRowCount();
                                        for (int p34 = 0; p34 < pz4; ++p34) {
                                            mopel4.setRowCount(0);
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Error connection");
                                        //                                        e.printStackTrace();
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Error connection");
                                    //                                    e.printStackTrace();
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Error connection");
                                //                                e.printStackTrace();
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Error connection");
                            //                            e.printStackTrace();
                        }
                    }
                } catch (Exception e) {
                    //                e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Cannot save." + e);
                }
            } catch (Exception e) {
                //            e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Cannot save." + e);
            }

        } catch (Exception e) {
            //            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Cannot save." + e);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton22ActionPerformed

    private void jTable14KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable14KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable14KeyPressed

    private void jTable14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable14MouseClicked
        String decider = jTextStatus.getText();
        switch (decider) {
            case "USER":
                if (jRadioButton11.isSelected() == true) {
                    try {

                        int row = jTable14.getSelectedRow();
                        String tableclick = (jTable14.getModel().getValueAt(row, 0).toString());

                        String clik = "select * from prodpriceinclusive where ProductionID='" + tableclick + "' ";
                        try (PreparedStatement psclikk = db_Connection.getInstance().prepareStatement(clik)) {
                            rs = psclikk.executeQuery();

                            if (rs.next()) {
                                int tadd1 = rs.getInt("ProductionID");
                                String tadd = String.valueOf(tadd1);
                                jTextField64.setText(tadd);
                                jTextField62.setText(tadd);
                                jTextField63.setText(tadd);
                                jTextField68.setText(tadd);
                                Double tadd11 = rs.getDouble("quantityKGS");
                                //                        DecimalFormat proc1 = new DecimalFormat("0.0000");
                                //                        String formattedText5 = proc1.format(tadd11);
                                String tadd111 = String.valueOf(tadd11);
                                jTextField79.setText(tadd111);

                                Double stadd11 = rs.getDouble("total_manpower");
                                String stadd111 = String.valueOf(stadd11);
                                jTextField73.setText(stadd111);

                                Double seas = rs.getDouble("total_seasonal");
                                String sea = String.valueOf(seas);
                                totsea.setText(sea);

                                Double mano = rs.getDouble("total_permanent");
                                String man = String.valueOf(mano);
                                totman.setText(man);

                            }
                        }

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Error connection");
                        //                e.printStackTrace();
                    }
                } else {
                    try {

                        int row = jTable14.getSelectedRow();
                        String tableclick = (jTable14.getModel().getValueAt(row, 0).toString());

                        String clik = "select * from prodpriceinclusive where ProductionID='" + tableclick + "' ";
                        try (PreparedStatement psclikk = db_Connection.getInstance().prepareStatement(clik)) {
                            rs = psclikk.executeQuery();

                            if (rs.next()) {
                                int tadd1 = rs.getInt("ProductionID");
                                String tadd = String.valueOf(tadd1);
                                jTextField64.setText(tadd);
                                jTextField62.setText(tadd);
                                jTextField63.setText(tadd);
                                jTextField68.setText(tadd);
                                //                          Double tadd11 = rs.getDouble("quantityKGS");
                                //                String tadd111 = String.valueOf(tadd11);
                                //                  jTextField79.setText(tadd);

                            }
                        }

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Error connection");
                        //            e.printStackTrace();
                    }
                }
                break;

            case "ADMINISTRATOR":
                if (jRadioButton11.isSelected() == true) {
                    try {

                        int row = jTable14.getSelectedRow();
                        String tableclick = (jTable14.getModel().getValueAt(row, 0).toString());

                        String clik = "select * from prodpriceinclusive where ProductionID='" + tableclick + "' ";
                        try (PreparedStatement psclikk = db_Connection.getInstance().prepareStatement(clik)) {
                            rs = psclikk.executeQuery();

                            if (rs.next()) {
                                int tadd1 = rs.getInt("ProductionID");
                                String tadd = String.valueOf(tadd1);
                                jTextField64.setText(tadd);
                                jTextField62.setText(tadd);
                                jTextField63.setText(tadd);
                                jTextField68.setText(tadd);
                                Double tadd11 = rs.getDouble("quantityKGS");
                                //                        DecimalFormat proc1 = new DecimalFormat("0.0000");
                                //                        String formattedText5 = proc1.format(tadd11);
                                String tadd111 = String.valueOf(tadd11);
                                jTextField79.setText(tadd111);

                                Double stadd11 = rs.getDouble("total_manpower");
                                //                        DecimalFormat proc = new DecimalFormat("0.0000");
                                //                        String formattedText2 = proc.format(stadd11);
                                String stadd111 = String.valueOf(stadd11);
                                jTextField73.setText(stadd111);

                                Double seas = rs.getDouble("total_seasonal");
                                String sea = String.valueOf(seas);
                                totsea.setText(sea);

                                Double mano = rs.getDouble("total_permanent");
                                String man = String.valueOf(mano);
                                totman.setText(man);

                                jComboBox21.setSelectedItem(rs.getString("groupe"));
                                jComboBox26.setSelectedItem(rs.getString("splitter"));
                            }
                        }

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Error connection");
                        //                e.printStackTrace();
                    }
                } else {
                    try {

                        int row = jTable14.getSelectedRow();
                        String tableclick = (jTable14.getModel().getValueAt(row, 0).toString());

                        String clik = "select * from prodpriceinclusive where ProductionID='" + tableclick + "' ";
                        try (PreparedStatement psclikk = db_Connection.getInstance().prepareStatement(clik)) {
                            rs = psclikk.executeQuery();

                            if (rs.next()) {
                                int tadd1 = rs.getInt("ProductionID");
                                String tadd = String.valueOf(tadd1);
                                jTextField64.setText(tadd);
                                jTextField62.setText(tadd);
                                jTextField63.setText(tadd);
                                jTextField68.setText(tadd);
                                //                          Double tadd11 = rs.getDouble("quantityKGS");
                                //                String tadd111 = String.valueOf(tadd11);
                                //                  jTextField79.setText(tadd);

                            }
                        }

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Error connection");
                        //            e.printStackTrace();
                    }
                }
                break;
        }

        //  DefaultTableModel model = (DefaultTableModel) jTable40.getModel();
        //    if (jTable40.getRowCount() > 0) {
        //        if (jTable40.getSelectedRowCount() > 0) {
        //            int selectedRow[] = jTable40.getSelectedRows();
        //            for (int i : selectedRow) {
        ////                int id = Integer.parseInt(jTable40.getValueAt(i, 0).toString());
        ////                double val1 = Double.parseDouble(jTable40.getValueAt(i, 3).toString());
        ////                double val2 = Double.parseDouble(jTable40.getValueAt(i, 4).toString());
        //                model.removeRow(i);
        //            }
        //        }
        //    }
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable14MouseClicked

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        com.canning.production.addRawmaterial.rawmaterialAdd();
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jTextField31KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField31KeyPressed
        jTextField31.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent evt) {
                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    String qrr = jTextField31.getText();
                    Double rwe = Double.valueOf(qrr);
                    String kwu = (String) jComboBox15.getSelectedItem();
                    String rwa = (String) jComboBox21.getSelectedItem();
                    //            String grop = String.valueOf(rwa);
                    String swe = jTextField3.getText();
                    Integer swi = Integer.parseInt(swe);
                    String Dwe = jTextField63.getText();
                    Integer Dwi = Integer.parseInt(Dwe);

                    try {
                        PreparedStatement ps4 = db_Connection.getInstance().prepareStatement("INSERT INTO raw_materialproduction(voucher_no,raw_material,qty,ProductionID,groupe,Total_qty)"
                                + "values(?,?,?,?,?,?)");
                        ps4.setInt(1, swi);
                        ps4.setString(2, kwu);
                        ps4.setDouble(3, rwe);
                        ps4.setInt(4, Dwi);
                        ps4.setString(5, rwa);
                        ps4.setDouble(6, rwe);
                        ps4.executeUpdate();
                        //                JOptionPane.showMessageDialog(null, "The data was successfully added to the Database!");

                        //TABLE INSERT
                        try {
                            DefaultTableModel model = (DefaultTableModel) jTable15.getModel();

                            try {
                                int z3 = model.getRowCount();
                                for (int lu3 = 0; lu3 <= z3; ++lu3) {
                                    model.removeRow(0);
                                }
                            } catch (Exception e) {
                            }
                            try (PreparedStatement ps5 = db_Connection.getInstance().prepareStatement("SELECT * FROM rawmatpriceinc where voucher_no = '" + swi + "';")) {

                                rs = ps5.executeQuery();

                                while (rs.next()) {
                                    model.addRow(new Object[]{rs.getInt("ProductionID"), rs.getString("raw_material"), rs.getDouble("qty"), rs.getString("unit"), rs.getInt("RawID")});
                                }

                                try {
                                    Class.forName("com.mysql.jdbc.Driver").newInstance();
                                    Connection con18 = (Connection) DriverManager.getConnection("jdbc:mysql://192.168.1.190:3306/canning?zeroDateTimeBehavior=convertToNull", "weru", "steve23741997");
                                    //                Statement stmt4 = con18.createStatement();

                                    try {
                                        String t = "SELECT sum(qty) FROM rawmatpriceinc WHERE voucher_no= '" + swi + "';";

                                        try (PreparedStatement psc = con18.prepareStatement(t)) {
                                            rs = psc.executeQuery(t);

                                            if (rs.next()) {
                                                Double bansal = rs.getDouble(1);

                                                jTextField43.setText(String.valueOf(bansal));
                                            }
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Cannot save." + e);
                                    }
                                } catch (ClassNotFoundException | SQLException ex) {
                                    Logger.getLogger(NewJFrame.class
                                            .getName()).log(Level.SEVERE, null, ex);
                                }

                                rs.close();
                                ps5.close();

                            } catch (HeadlessException | IllegalAccessException | InstantiationException | SQLException e) {
                                //                    e.printStackTrace();
                                JOptionPane.showMessageDialog(null, "Error in connectivity");
                            }

                            ps4.close();

                        } catch (HeadlessException | SQLException ex) {
                            JOptionPane.showMessageDialog(null, ex.getMessage());
                        }

                    } catch (HeadlessException | SQLException ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage());
                    } catch (InstantiationException ex) {
                        Logger.getLogger(NewJFrame.class
                                .getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });

        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField31KeyPressed

    private void jTextField31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField31ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField31ActionPerformed

    private void jTextField31FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField31FocusGained
        jTextField31.setText("");
        jTextField32.setText("");
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField31FocusGained

    private void jTable15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable15MouseClicked
        try {

            int rowt = jTable15.getSelectedRow();
            String tableclickt = (jTable15.getModel().getValueAt(rowt, 3).toString());
//            jTextField31.setText(tableclickt);
            Connection conclik4 = (Connection) db_Connection.getInstance();
            String clik = "select * from rawmatpriceinc where RawID='" + tableclickt + "' ";
            try (PreparedStatement psclikk = conclik4.prepareStatement(clik)) {
                rs = psclikk.executeQuery();

                if (rs.next()) {
                    int tadd1 = rs.getInt("RawID");
                    String tadd = String.valueOf(tadd1);
                    jTextField80.setText(tadd);

                    Double stadd1 = rs.getDouble("Total_qty");
                    String stadd = String.valueOf(stadd1);
                    jTextField81.setText(stadd);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error connection");
            //            e.printStackTrace();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jTable15MouseClicked

    private void jComboBox15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox15ActionPerformed

        String asu = jTextLogin.getText();
//        if (asu.equals("F6")) {

        String strawm = (String) jComboBox15.getSelectedItem();
        jComboBox20.setSelectedItem("pre-cosn_no");
//        jComboBox20.removeAllItems();
//            try (PreparedStatement ps6 = db_Connection.getInstance().prepareStatement("SELECT distinct(main_material) FROM all_ingredients WHERE ingredient =? into @skram;")) {
//                ps6.setString(1, strawm);
//                ps6.execute();
//                ResultSet rsPadda = ps6.executeQuery("SELECT distinct(cons_no) FROM raw_material_issue WHERE issued_to='" + asu + "' and raw_material =@skram;");
//                while (rsPadda.next()) {
//                    jComboBox20.addItem(rsPadda.getString("cons_no"));
//                    //                                rawm.setText(rsPadda.getString("cons_no"));
//                }
        try (PreparedStatement ps6 = db_Connection.getInstance().prepareStatement("SELECT distinct concat(cons_no,'                    ',stock_in_hand)as cons_no FROM raw_material_stocks WHERE raw_material =? and factory='" + asu + "' and stock_in_hand>0;")) {
            ps6.setString(1, strawm);
            ps6.execute();
            ResultSet rsPadda = ps6.executeQuery();
            while (rsPadda.next()) {
                jComboBox20.addItem(rsPadda.getString("cons_no"));
            }
            rsPadda.close();
        } catch (SQLException e) {
            Logger.getLogger(NewJFrame.class
                    .getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(null, "Error in connectivity");
        } catch (InstantiationException ex) {
            Logger.getLogger(NewJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
//
//        } else {
//            jComboBox20.setSelectedItem("pre-cosn_no");
//        }
//            String strawma = rawm.getText();
//            try (PreparedStatement ps5 = db_Connection.getInstance().prepareStatement("SELECT * FROM raw_material_reception WHERE raw_material =?")) {
//                ps6.setString(1, strawma);
//                jComboBox20.removeAllItems();
//                try (ResultSet rsPaddam = ps5.executeQuery()) {
//                    while (rsPaddam.next()) {
//                        jComboBox20.addItem(rsPaddam.getString("cons_no"));
//                        //                                rawm.setText(rsPadda.getString("cons_no"));
//                    }
//                    rsPaddam.close();
//                    ps5.close();
//                }
//            } catch (SQLException e) {
//                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, e);
//                JOptionPane.showMessageDialog(null, "Error in connectivity");
//            } catch (InstantiationException ex) {
//                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            ps6.close();
//            rsPadda.close();

        //        String kwi = (String) jComboBox3.getSelectedItem();
        //        try {
        //            Class.forName("com.mysql.jdbc.Driver").newInstance();
        //            Connection con17 = (Connection) DriverManager.getConnection("jdbc:mysql://192.168.1.190:3306/canning?zeroDateTimeBehavior=convertToNull", "weru", "steve23741997");
        //
        //            String v = "SELECT * FROM raw_material where factory = '" + kwi + "';";
        //            try (PreparedStatement ps = con17.prepareStatement(v)) {
        //                rs = ps.executeQuery(v);
        //
        //                while (rs.next()) {
        //                    jComboBox15.addItem(rs.getString("raw_material_name"));
        //
        //                }
        //
        //                rs.close();
        //                ps.close();
        //                con17.close();
        //            } catch (Exception e) {
        //                JOptionPane.showMessageDialog(null, "Database Error");
        //            }
        //        } catch (Exception e) {
        //            JOptionPane.showMessageDialog(null, "Error connection");
        //        }
        //   try {
        //            Class.forName("com.mysql.jdbc.Driver").newInstance();
        //            Connection con5 = (Connection) DriverManager.getConnection("jdbc:mysql://192.168.1.190:3306/canning?zeroDateTimeBehavior=convertToNull", "weru", "steve23741997");
        //
        //            String s = "select * from package ";
        //            try (PreparedStatement ps = con5.prepareStatement(s)) {
        //                rs = ps.executeQuery(s);
        //
        //                while (rs.next()) {
        //                    jComboBox4.addItem(rs.getString("can_name"));
        //
        //                }
        //
        //                rs.close();
        //                ps.close();
        //                con5.close();
        //            } catch (Exception e) {
        //                JOptionPane.showMessageDialog(null, "Database Error");
        //            }
        //        } catch (Exception e) {
        //            JOptionPane.showMessageDialog(null, "Error connection");
        //        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox15ActionPerformed

    private void jTextField20KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField20KeyPressed
        String asu = jTextLogin.getText();
        String asiu = jLabel156.getText();
        String cople = jTextField20.getText();
        jTextField20.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent evt) {
                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    if (asu.equals("ADMINISTRATOR")) {

                        try {
                            PreparedStatement ps5 = db_Connection.getInstance().prepareStatement("SELECT * FROM all_average_cost WHERE product like ?");
                            ps5.setString(1, "%" + cople + "%");
                            ResultSet rsPadd = ps5.executeQuery();

                            jTableavg.setModel(rsToTableModels.aboveMarginModel.buildTableModel(rsPadd));
//                                    model.addRow(new Object[]{rsPadd.getString("product"), rsPadd.getDouble("rawcost"), rsPadd.getDouble("cancost"), rsPadd.getDouble("mancost"), rsPadd.getDouble("averageprice")});
//                                    model.addRow(new Object[]{rsPadd.getString("product"), rsPadd.getString("factory"), rsPadd.getDouble("rawcost"), rsPadd.getDouble("cancost"), rsPadd.getDouble("fuelcost"), rsPadd.getDouble("elecost"), rsPadd.getDouble("dieselcost"), rsPadd.getDouble("mancost"), rsPadd.getDouble("wastecost"), rsPadd.getDouble("averageprice"), rsPadd.getString("month")});

//                                rsPadd.close();
//                                ps5.close();
                        } catch (SQLException e) {
                            Logger.getLogger(NewJFrame.class
                                    .getName()).log(Level.SEVERE, null, e);
                            JOptionPane.showMessageDialog(null, "Error in connectivity");
                        } //                          finally{
                        //                               rsPadd.close();
                        //                                ps5.close();
                        //                          }
                        catch (InstantiationException ex) {
                            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    } else {

                        try {
                            PreparedStatement ps5 = db_Connection.getInstance().prepareStatement("SELECT * FROM averagecost WHERE product like ?");
                            ps5.setString(1, "%" + cople + "%");
                            ResultSet rsPadd = ps5.executeQuery();

                            while (rsPadd.next()) {
                                jTableavg.setModel(rsToTableModels.aboveMarginModel.buildTableModel(rsPadd));
//                                    model.addRow(new Object[]{rsPadd.getString("product"), rsPadd.getString("factory"), rsPadd.getDouble("rawcost"), rsPadd.getDouble("cancost"), rsPadd.getDouble("fuelcost"), rsPadd.getDouble("elecost"), rsPadd.getDouble("dieselcost"), rsPadd.getDouble("mancost"), rsPadd.getDouble("wastecost"), rsPadd.getDouble("averageprice"), rsPadd.getString("month")});
                            }
                            rsPadd.close();
                            ps5.close();

                        } catch (SQLException e) {
                            Logger.getLogger(NewJFrame.class
                                    .getName()).log(Level.SEVERE, null, e);
                            JOptionPane.showMessageDialog(null, "Error in connectivity");
                        } catch (InstantiationException ex) {
                            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (Exception ex) {
                            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }
                }
            }
        });

        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField20KeyPressed

    private void jButton27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton27ActionPerformed
        jComboBox12.removeAllItems();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton27ActionPerformed
    private void batch_noActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batch_noActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_batch_noActionPerformed

    private void jMenuItem38ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem38ActionPerformed
        try {
            jComboBox3.setModel(new DefaultComboBoxModel(factoryReturns.getFactories().toArray()));

            SupCombox.setModel(new DefaultComboBoxModel(supplierReturns.getSupplier().toArray()));
            rawCombox.setModel(new DefaultComboBoxModel(allIngredientReturns.getallmainMaterial().toArray()));
            ExportAndImport.issuematerial.setModel(new DefaultComboBoxModel(allIngredientReturns.getallmainMaterial().toArray()));
            ExportAndImport.issueto.setModel(new DefaultComboBoxModel(factoryReturns.getFactories().toArray()));
            ExportAndImport.jComboBox13.setModel(new DefaultComboBoxModel(factoryReturns.getFactories().toArray()));
            ExportAndImport.issueto.setModel(new DefaultComboBoxModel(factoryReturns.getFactories().toArray()));
            ExportAndImport.categorizer.setModel(new DefaultComboBoxModel(factoryReturns.getCategories().toArray()));
            BorderLayout borderlayout = new BorderLayout();
//        borderlayout
            IngFormer.removeAll();
//             IngFormer.add(ExportAndImport.raw_material_reception);
            IngFormer.add(ExportAndImport.raw_material_reception, borderlayout.CENTER);
            IngFormer.repaint();
            IngFormer.revalidate();

            MainPanel.removeAll();
            MainPanel.add(IngFormer);
            MainPanel.repaint();
            MainPanel.revalidate();

        } catch (Exception e) {
            e.printStackTrace();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem38ActionPerformed

    private void jComboBox15MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox15MouseReleased

        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox15MouseReleased

    private void jComboBox30FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox30FocusGained

        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox30FocusGained

    private void jComboBox20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox20ActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox20ActionPerformed

    private void jTable3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable3KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable3KeyReleased

    private void jTable2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable2KeyPressed
        int numRows1 = jTable3.getRowCount();
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_ENTER:
                DefaultTableModel moderode = (DefaultTableModel) jTable2.getModel();
                moderode.addRow(Paster);
                break;
            default:
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jTable2KeyPressed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked

        int numRows1 = jTable2.getRowCount();
        for (int row_b = 0; row_b < numRows1; row_b++) {
            String numberless = jTextField154.getText();
            jTable2.setValueAt(numberless, row_b, 0);
        }            // TODO add your handling code here:
    }//GEN-LAST:event_jTable2MouseClicked

    private void jComboBox26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox26ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox26ActionPerformed

    private void consieredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consieredActionPerformed
        consno.removeAllItems();
        String conpack = (String) consiered.getSelectedItem();
        String krood = "select cons_no from package_reception where package=?";
        try (PreparedStatement oloki = db_Connection.getInstance().prepareStatement(krood)) {
            oloki.setString(1, conpack);
            rs = oloki.executeQuery();
            while (rs.next()) {
                consno.addItem(rs.getString("cons_no"));

            }
            rs.close();
            oloki.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_consieredActionPerformed

    private void jMenuItem39ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem39ActionPerformed
        ExportAndImport.jLabel31.setText("PRODUCT TRACEABILITY");
        ExportAndImport.jLabel34.setText("BATCH NO");
        ExportAndImport.jLabel33.setText("PRODUCT");
        try {
            ExportAndImport.jComboBox17.setModel(new DefaultComboBoxModel(productReturns.getProduct().toArray()));
        } catch (Exception e) {
            Logger.getLogger(NewJFrame.class
                    .getName()).log(Level.SEVERE, null, e);
//                e.printStackTrace();
        }
        MainPanel.removeAll();
        MainPanel.add(ExportAndImport.Traceability_report);
        MainPanel.repaint();
        MainPanel.revalidate();

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem39ActionPerformed

    private void jMenuItem40ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem40ActionPerformed
        ExportAndImport.jLabel31.setText("RAW MATERIAL TRACEABILITY");
        ExportAndImport.jLabel34.setText("CONS NO");
        ExportAndImport.jLabel33.setText("RAW MATERIAL");

        try {
            ExportAndImport.jComboBox17.setModel(new DefaultComboBoxModel(allIngredientReturns.getallmainMaterial().toArray()));
        } catch (Exception e) {
            Logger.getLogger(NewJFrame.class
                    .getName()).log(Level.SEVERE, null, e);
//                e.printStackTrace();
        }
        MainPanel.removeAll();
        MainPanel.add(ExportAndImport.Traceability_report);
        MainPanel.repaint();
        MainPanel.revalidate();

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem40ActionPerformed

    private void jMenuItem35ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem35ActionPerformed
        MainPanel.removeAll();
        MainPanel.add(UsageAnalysis);
        MainPanel.repaint();
        MainPanel.revalidate();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem35ActionPerformed

    private void jComboBox18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox18ActionPerformed
        String category = (String) jComboBox18.getSelectedItem();
        switch (category) {
            case "Product":
                try {
                jComboBox19.setModel(new DefaultComboBoxModel(productReturns.getProduct().toArray()));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Database Error");

                java.util.logging.Logger.getLogger(NewJFrame.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, e);
            }
            break;
            case "Ingredient":
                try {
                jComboBox19.setModel(new DefaultComboBoxModel(ingredientReturns.getIngredient().toArray()));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Database Error");
                java.util.logging.Logger.getLogger(NewJFrame.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, e);
            }
            break;
            case "Raw Material":
                try {
                jComboBox19.setModel(new DefaultComboBoxModel(rawMaterialReturns.getrawMaterial().toArray()));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Database Error");
                java.util.logging.Logger.getLogger(NewJFrame.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, e);
            }
            break;
            case "Package":
                try {
                jComboBox19.setModel(new DefaultComboBoxModel(packageReturns.getPackage().toArray()));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Database Error");
                java.util.logging.Logger.getLogger(NewJFrame.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, e);
            }
            break;
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox18ActionPerformed

    private void jTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable4MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable4MouseClicked

    private void jMenuItem42ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem42ActionPerformed
        ExportAndImport.jLabel31.setText("MAIN PRODUCT TRACEABILITY");
        ExportAndImport.jLabel34.setText("BATCH NO");
        ExportAndImport.jLabel33.setText("MAIN PRODUCT");
        try {
            ExportAndImport.jComboBox17.setModel(new DefaultComboBoxModel(productReturns.getProduct().toArray()));
        } catch (Exception e) {
            Logger.getLogger(NewJFrame.class
                    .getName()).log(Level.SEVERE, null, e);
//                e.printStackTrace();
        }
        MainPanel.removeAll();
        MainPanel.add(ExportAndImport.Traceability_report);
        MainPanel.repaint();
        MainPanel.revalidate();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem42ActionPerformed

    private void jMenuItem41ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem41ActionPerformed
        ExportAndImport.jLabel31.setText("MAIN RAW MATERIAL TRACEABILITY");
        ExportAndImport.jLabel34.setText("CONS NO");
        ExportAndImport.jLabel33.setText("MAIN RAW MATERIAL");

        try {
            ExportAndImport.jComboBox17.setModel(new DefaultComboBoxModel(allIngredientReturns.getallmainMaterial().toArray()));
        } catch (Exception e) {
            Logger.getLogger(NewJFrame.class
                    .getName()).log(Level.SEVERE, null, e);
//                e.printStackTrace();
        }
        MainPanel.removeAll();
        MainPanel.add(ExportAndImport.Traceability_report);
        MainPanel.repaint();
        MainPanel.revalidate();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem41ActionPerformed

    private void jButton86ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton86ActionPerformed

        String factoe = jTextLogin.getText();
        String Waredater = ((JTextField) warehousiing_date.getDateEditor().getUiComponent()).getText();
//        String wareid1 = jTextField7.getText();
//        Integer wareid = Integer.valueOf(wareid1);
        String manpo1 = jTextField116.getText();
        Double manpo = Double.valueOf(manpo1);
         String manpo1s = jTextField91.getText();
        Double manpos = Double.valueOf(manpo1s);
         String manpo1p = jTextField97.getText();
        Double manpop = Double.valueOf(manpo1);

        Integer numero = 0;
        try {
//idmain_warehousing, warehouse, date, electricity
            try (PreparedStatement wps4 = db_Connection.getInstance().prepareStatement("INSERT INTO main_warehousing(date, warehouse, manpower)"
                    + "values(?,?,?)", Statement.RETURN_GENERATED_KEYS)) {
                wps4.setString(1, Waredater);
                wps4.setString(2, factoe);
                wps4.setDouble(3, manpo);
                 wps4.setDouble(3, manpos);
                  wps4.setDouble(3, manpop);
                numero = wps4.executeUpdate();
                ResultSet ares = wps4.getGeneratedKeys();
                if (ares.next()) {
//                jTextField3.setText(ares.getInt(1).);
                    jTextField7.setText(String.valueOf(ares.getInt(1)));
                }

            } catch (Exception e) {
                Logger.getLogger(NewJFrame.class
                        .getName()).log(Level.SEVERE, null, e);
//                e.printStackTrace();
            }
        } catch (Exception e) {
            Logger.getLogger(NewJFrame.class
                    .getName()).log(Level.SEVERE, null, e);
//                e.printStackTrace();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton86ActionPerformed

    private void jTextField114ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField114ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField114ActionPerformed

    private void jMenuItem43ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem43ActionPerformed
        new taskIt().setVisible(true);
//        mainCenter.removeAll();
//               mainCenter.add(AdminPage);
//               mainCenter.repaint();
//               mainCenter.revalidate();
//               break;        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem43ActionPerformed

    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        jLabel246.setText("Activity Table");
        try {
            DefaultTableModel modulaes = (DefaultTableModel) jTable43.getModel();
            try {
                int mudzo = modulaes.getRowCount();
                for (int l = 0; l < mudzo; l++) {
                    modulaes.removeRow(0);
                }
                jTable43.getColumnModel().getColumn(0).setHeaderValue("Activity ID");
                jTable43.getColumnModel().getColumn(1).setHeaderValue("Date");
                jTable43.getColumnModel().getColumn(2).setHeaderValue("Production Id");
                jTable43.getColumnModel().getColumn(3).setHeaderValue("Product");
                jTable43.getColumnModel().getColumn(4).setHeaderValue("Product Qty");
                jTable43.getColumnModel().getColumn(5).setHeaderValue("Carton");
                jTable43.getColumnModel().getColumn(6).setHeaderValue("Carton Qty");
//                modulaes.getColumnName(5);
                try {
                    try (PreparedStatement sitti = db_Connection.getInstance().prepareStatement("select * from prodwip where `warehouse`= ? ")) {
                        sitti.setString(1, jTextLogin.getText());
                        rs = sitti.executeQuery();
                        while (rs.next()) {
                            modulaes.addRow(new Object[]{rs.getInt("main_wh_id"), rs.getString("date"), rs.getInt("production_id"), rs.getString("product"), rs.getDouble("product_qty"), rs.getString("carton"), rs.getDouble("carton_qty")});
                        }
                        rs.close();
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
//                    e.printStackTrace();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
//                e.printStackTrace();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
//            e.printStackTrace();
        }
        jPanel56.removeAll();
        jPanel56.add(jPanelTransferList);
        jPanel56.repaint();
        jPanel56.revalidate();

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed

    private void jButton89ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton89ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton89ActionPerformed

    private void jMenuItem45ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem45ActionPerformed
        MainPanel.removeAll();
        MainPanel.add(ExportAndImport.AboveMarginCostPanel);
        MainPanel.repaint();
        MainPanel.revalidate();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem45ActionPerformed

    private void jTextField20KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField20KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField20KeyReleased

    private void jTableavgKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableavgKeyPressed
        String asu = jTextLogin.getText();
        String asiu = jLabel156.getText();
        String cople = jTextField20.getText();
        jTableavg.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent evt) {
                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    try {

                        int powt = jTableavg.getSelectedRow();
                        String tableclickp = (jTableavg.getModel().getValueAt(powt, 0).toString());

                        int row = jTableavg.getSelectedRow();
                        String tableclick = (jTableavg.getModel().getValueAt(row, 6).toString());

                        String avgdisp = jTextField20.getText();

                        try {
//            String clak= "SELECT voucher_no, `Production_ID` as PID, date, factory, quantity, product, RawCost, wasteCost, CanCost, eleCost, briqCost, manCost,Cperunit, standard_cost, `deviation_from_averagecost` as variation from above_margin_productions";
                            String clik = "SELECT \n"
                                    + "        `new_view`.`product` AS `product`,\n"
                                    + "        `new_view`.`factory` AS `factory`,\n"
                                    + "        `new_view`.`kgsperpc` AS `kgsperpc`,\n"
                                    + "       `new_view`.`IngCost`+`new_view`.`rawcost` AS `rawcost`,\n"
                                    + "	`new_view`.`LabelCost`+`new_view`.`CanCost` AS `cancost`,\n"
                                    + "        `new_view`.`briqCost` + `new_view`.`fuelCost` AS `fuelcost`,\n"
                                    + "        `new_view`.`eleCost`  AS `eleCost`,\n"
                                    + "	`new_view`.`dieselCost` AS `dieselCost`,\n"
                                    + "	`new_view`.`manCost` AS `manCost`,\n"
                                    + "	`new_view`.`wasteCost` AS `wastecost`,\n"
                                    + "     `new_view`.`Cperunit` AS `AveragePrice`,\n"
                                    + "     `new_view`.`date` AS `date`,  \n"
                                    + "     `new_view`.`quantity` AS `quantity`"
                                    + " FROM `new_view`"
                                    + " WHERE new_view.product=? ";

                            try {

                                PreparedStatement psy = db_Connection.getInstance().prepareStatement(clik);
                                psy.setString(1, avgdisp);
//                    psy.setString(2, dateaverage1);
                                ResultSet rsPadd1 = psy.executeQuery();
//                jTableavg.revalidate();
//                jTableavg.repaint();
                                while (rsPadd1.next()) {
                                    jTableavg.setModel(rsToTableModels.aboveMarginModel.buildTableModel(rsPadd1));
                                }
//                    model.addRow(new Object[]{rsPadd.getString("product"), rsPadd.getString("factory"), rsPadd.getDouble("rawcost"), rsPadd.getDouble("cancost"), rsPadd.getDouble("fuelcost"), rsPadd.getDouble("elecost"), rsPadd.getDouble("dieselcost"), rsPadd.getDouble("mancost"), rsPadd.getDouble("wastecost"), rsPadd.getDouble("averageprice"), rsPadd.getString("date"), rsPadd.getDouble("quantity")});

//          rsPadd.close();
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Error connection");
                                e.printStackTrace();
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Error connection");
                            e.printStackTrace();
                        }

                        jTextField20.setText(tableclickp);
                        jLabel156.setText(tableclick);
//            jLabel141.setText(tableclickp);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Error connection");
                        e.printStackTrace();
                    }

                }
            }
        });

        // TODO add your handling code here:
    }//GEN-LAST:event_jTableavgKeyPressed

    private void jTextField39ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField39ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField39ActionPerformed

    private void jTextField92ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField92ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField92ActionPerformed

    private void jMenuItem44ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem44ActionPerformed
        JPanel costmvmt = new JPanel();
        costmvmt.setPreferredSize(new java.awt.Dimension(1010, 840));
        DefaultTableModel model = new DefaultTableModel(
                new String[][]{{"a", "123"}, {"b", "456"}},
                new String[]{"name", "value"});

        JTable avgcostable = new JTable(model);

        JScrollPane scroll = new JScrollPane(avgcostable);
        scroll.setPreferredSize(MainPanel.getSize());
//      scroll.setBounds( 0, 10, 650, 700 ); // x, y, width, height
        try {
            String sql = "SELECT voucher_no, Production_ID, date, factory, quantity,  product,IngCost+RawCost+RawwasteCost as RawCost , wasteCost, CanCost+ LabelCost as CanCost, eleCost, fuelCost+briqCost+dieselCost as fuelCost, manCost, Cperunit,standard_cost, deviation_from_averagecost FROM canning.new_view order by date desc";
            PreparedStatement pst = db_Connection.getInstance().prepareStatement(sql);
            ResultSet rsses = pst.executeQuery();

            avgcostable.setModel(rsToTableModels.aboveMarginModel.buildTableModel(rsses));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        costmvmt.add(scroll);
        costmvmt.repaint();
        costmvmt.revalidate();
        MainPanel.removeAll();
        MainPanel.add(costmvmt);
        MainPanel.repaint();
        MainPanel.revalidate();              // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem44ActionPerformed

    private void jMenuItem48ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem48ActionPerformed
        JPanel monthprodcost = new JPanel();
        monthprodcost.setPreferredSize(new java.awt.Dimension(1010, 840));
        DefaultTableModel modelo = new DefaultTableModel(
                new String[][]{{"a", "123"}, {"b", "456"}},
                new String[]{"name", "value"});

        JTable prodcostable = new JTable(modelo);

        JScrollPane prodscroll = new JScrollPane(prodcostable);
        prodscroll.setPreferredSize(MainPanel.getSize());

//        jTableavgKeyPressed(java.awt.event.KeyEvent evt) {                                     
//        String asu = jTextLogin.getText();
//        String asiu = jLabel156.getText();
//        String cople = jTextField20.getText();
//        jTableavg.addKeyListener(new KeyAdapter() {
//            @Override
//            public void keyPressed(KeyEvent evt) {
//                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        prodcostable.addKeyListener(new KeyAdapter() {
//            @Override
            public void keyPressed(KeyEvent evt) {
                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    int powt = prodcostable.getSelectedRow();
                    String tableclickp = (prodcostable.getModel().getValueAt(powt, 0).toString());
                    jTextField9.setText(tableclickp);
                    prorptShow.voucherReport();
                    MainPanel.removeAll();
                    MainPanel.add(jPanel8);
                    MainPanel.repaint();
                    MainPanel.revalidate();

                }
            }
        });
//      scroll.setBounds( 0, 10, 650, 700 ); // x, y, width, height
        try {
            String sql = "SELECT voucher_no, Production_ID, date, factory, quantity,Rm Qty, product,IngCost+RawCost+RawwasteCost as RawCost , wasteCost, CanCost+ LabelCost as CanCost, eleCost, fuelCost+briqCost+dieselCost as fuelCost, manCost, Cperunit,standard_cost, deviation_from_averagecost FROM canning.new_view where date>date_sub((now()), interval 1 month) order by date desc";
            PreparedStatement pst = db_Connection.getInstance().prepareStatement(sql);
            ResultSet rsses = pst.executeQuery();

            prodcostable.setModel(rsToTableModels.aboveMarginModel.buildTableModel(rsses));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        monthprodcost.add(prodscroll);
        monthprodcost.repaint();
        monthprodcost.revalidate();
        MainPanel.removeAll();
        MainPanel.add(monthprodcost);
        MainPanel.repaint();
        MainPanel.revalidate();

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem48ActionPerformed

    private void jMenuItem49ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem49ActionPerformed
        JPanel monthpackcost = new JPanel();
        monthpackcost.setPreferredSize(new java.awt.Dimension(1010, 840));
        DefaultTableModel modeloe = new DefaultTableModel(
                new String[][]{{"a", "123"}, {"b", "456"}},
                new String[]{"name", "value"});

        JTable packcostable = new JTable(modeloe);

        JScrollPane packscroll = new JScrollPane(packcostable);
        packscroll.setPreferredSize(MainPanel.getSize());
//      scroll.setBounds( 0, 10, 650, 700 ); // x, y, width, height
        try {
            String sql = "SELECT * FROM canning.packingcost where date>date_sub((now()), interval 1 month) order by date desc";
            PreparedStatement pst = db_Connection.getInstance().prepareStatement(sql);
            ResultSet rsses = pst.executeQuery();

            packcostable.setModel(rsToTableModels.aboveMarginModel.buildTableModel(rsses));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        monthpackcost.add(packscroll);
        monthpackcost.repaint();
        monthpackcost.revalidate();
        MainPanel.removeAll();
        MainPanel.add(monthpackcost);
        MainPanel.repaint();
        MainPanel.revalidate();
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem49ActionPerformed

    private void jTextField22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField22ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField22ActionPerformed

    private void rawComboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rawComboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rawComboxActionPerformed

    private void jButton60ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton60ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton60ActionPerformed

    private void jComboBox30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox30ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox30ActionPerformed

    private void jMenuItem46ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem46ActionPerformed
ExportAndImport.jPanel5.removeAll();
  ExportAndImport.jPanel5.add(ExportAndImport.SummaryPanel);
        ExportAndImport.jPanel5.repaint();
        ExportAndImport.jPanel5.revalidate();
        
        IngFormer.removeAll();
        IngFormer.add(ExportAndImport.jPanel5);
        IngFormer.repaint();
        IngFormer.revalidate();

        MainPanel.removeAll();
        MainPanel.add(IngFormer);
        MainPanel.repaint();
        MainPanel.revalidate();
        
        

        

//        BorderLayout borderlayout = new BorderLayout();
//        JPanel monthprodcost = new JPanel();
//        monthprodcost.setPreferredSize(new java.awt.Dimension(1010, 840));
//        DefaultTableModel modelo = new DefaultTableModel(
//                new String[][]{{"a", "123"}, {"b", "456"}},
//                new String[]{"name", "value"});
//
//        JTable prodcostable = new JTable(modelo);
//        JScrollPane prodscroll = new JScrollPane(prodcostable);
//        prodscroll.setPreferredSize(MainPanel.getSize());
//        prodcostable.addKeyListener(new KeyAdapter() {
////            @Override
//            public void keyPressed(KeyEvent evt) {
//                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//                    int powt = prodcostable.getSelectedRow();
//                    String tableclickp = (prodcostable.getModel().getValueAt(powt, 0).toString());
//                    jTextField138.setText(tableclickp);
//                    prorptShow.productidReport();
//                    MainPanel.removeAll();
//                    MainPanel.add(jPanel8);
//                    MainPanel.repaint();
//                    MainPanel.revalidate();
//                }
//            }
//        });
//      scroll.setBounds( 0, 10, 650, 700 ); // x, y, width, height
//        try {
//            String sql = "SELECT * FROM Summary_view ";
////              String sql = "SELECT * FROM Summary_view where date>date_sub((now()), interval 1 month) order by date desc";
//            PreparedStatement pst = db_Connection.getInstance().prepareStatement(sql);
//            ResultSet rsses = pst.executeQuery();
//
//            prodcostable.setModel(rsToTableModels.aboveMarginModel.buildTableModel(rsses));
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
//        monthprodcost.add(prodscroll);
//        monthprodcost.repaint();
//        monthprodcost.revalidate();
//
//        IngFormer.removeAll();
////             IngFormer.add(ExportAndImport.raw_material_reception);
//        IngFormer.add(ExportAndImport.jPanel39, borderlayout.PAGE_START);
//        IngFormer.add(monthprodcost, borderlayout.CENTER);
//        IngFormer.repaint();
//        IngFormer.revalidate();
//
//        MainPanel.removeAll();
//        MainPanel.add(IngFormer);
//        MainPanel.repaint();
//        MainPanel.revalidate();
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem46ActionPerformed

    private void jButton68ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton68ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton68ActionPerformed

    private void jTable21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable21MouseClicked
        try {            
            int row = jTable21.getSelectedRow();
            String tableclick = (jTable21.getModel().getValueAt(row, 0).toString());
            jTextField31.setText(tableclick);
            DefaultTableModel model = (DefaultTableModel) modTable.getModel();
            try {
                int e3 = model.getRowCount();
                for (int eu3 = 0; eu3 <= e3; ++eu3) {
                    model.removeRow(0);
                }
            } catch (Exception e) {
            }    
            String clik = "select * from productproduction where voucher_no='" + tableclick + "' ";
            try (PreparedStatement psclikk = db_Connection.getInstance().prepareStatement(clik)) {
                rs = psclikk.executeQuery();
                while (rs.next()) {
                    model.addRow(new Object[]{rs.getString("product_name"), rs.getDouble("quantity")});
                }   
            }catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error connection");
                        e.printStackTrace();
        }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error connection");
                        e.printStackTrace();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable21MouseClicked

    private void jButton67ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton67ActionPerformed

        try {
            Connection conpa = (Connection) db_Connection.getInstance();
            conpa.setAutoCommit(false);
            int epocki = jTable21.getRowCount();

            String querypa = "update production set electricity=?,fuel=?,briq=?,water=?,diesel=? where voucher_no=?";
            PreparedStatement packsyt = conpa.prepareStatement(querypa);
            for (int row = 0; row < epocki; row++) {
                String vouch = (String) jTable21.getValueAt(row, 0).toString();
                String ele = (String) jTable21.getValueAt(row, 3).toString();
                Double elec = Double.valueOf(ele);
                String fue = (String) jTable21.getValueAt(row, 4).toString();
                Double fuel = Double.valueOf(fue);
                String bri = (String) jTable21.getValueAt(row, 5).toString();
                Double briq = Double.valueOf(bri);
                String wat = (String) jTable21.getValueAt(row, 6).toString();
                Double watere = Double.valueOf(wat);
                String die = (String) jTable21.getValueAt(row, 7).toString();
                Double dies = Double.valueOf(die);

                packsyt.setDouble(1, elec);
                packsyt.setDouble(2, fuel);
                packsyt.setDouble(3, briq);
                packsyt.setDouble(4, watere);
                packsyt.setDouble(5, dies);
                packsyt.setString(6, vouch);

                packsyt.addBatch();
            }
            packsyt.executeBatch();
            conpa.commit();
            packsyt.close();
        } catch (InstantiationException | NumberFormatException | SQLException ex) {
            ex.printStackTrace();
//jTextArea1     
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton67ActionPerformed

    private void totseaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totseaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totseaActionPerformed

    private void jMenuItem47ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem47ActionPerformed
        try {
            ExportAndImport.engfact.setModel(new DefaultComboBoxModel(factoryReturns.getFactories().toArray()));
            try {
                DefaultTableModel model = (DefaultTableModel) engtable.getModel();

                try {
                    int e3 = model.getRowCount();
                    for (int eu3 = 0; eu3 <= e3; ++eu3) {
                        model.removeRow(0);
                    }
                } catch (Exception e) {
                }
                try (PreparedStatement pse = db_Connection.getInstance().prepareStatement("SELECT * FROM daily_factory_energy_consumptions order by date;")) {

                    rs = pse.executeQuery();

                    while (rs.next()) {
                        model.addRow(new Object[]{rs.getString("date"), rs.getString("factory"), rs.getDouble("electricity"), rs.getDouble("boiler"), rs.getDouble("water"), rs.getDouble("diesel")});
                    }
                    rs.close();
                    pse.close();
                } catch (Exception e) {
                    //                            e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error in connectivity");
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
                //                        e.printStackTrace();
            }
            MainPanel.removeAll();
            MainPanel.add(ExportAndImport.engineering_dpt);
            MainPanel.repaint();
            MainPanel.revalidate();
        } catch (SQLException ex) {
            Logger.getLogger(ExportAndImport.class.getName()).log(Level.SEVERE, null, ex);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem47ActionPerformed

    // TODO add your handling code here:
    public void ingstock() throws HeadlessException {
//        MainPanel.removeAll();
//        MainPanel.add(jPanelING);
//        MainPanel.repaint();
//        MainPanel.revalidate();
        if ("ADMINISTRATOR".equals(jTextLogin.getText())) {

            //RADIO BUTTON DATE
            try {
                DefaultTableModel modeling = (DefaultTableModel) jTable39.getModel();

                try {
                    int z4 = modeling.getRowCount();
                    for (int lu3 = 0; lu3 <= z4; ++lu3) {
                        modeling.removeRow(0);
                    }
                } catch (Exception ex) {

                }
                try {
                    String quer = "SELECT * FROM ingredients";
                    try (PreparedStatement stmt4 = db_Connection.getInstance().prepareStatement(quer)) {
                        rs = stmt4.executeQuery(quer);
                        while (rs.next()) {
                            modeling.addRow(new Object[]{rs.getString("ingredient_name"), rs.getString("factory"), rs.getDouble("Stock_in_hand"), rs.getString("unit")});

                        }
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
//                    ex.printStackTrace();
                }
            } catch (Exception ex) {
//                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
            //END OF RADIO DATE
        } else {
            String ahsa = jTextLogin.getText();
            try {
                DefaultTableModel modeling = (DefaultTableModel) jTable39.getModel();
                try {
                    int z4 = modeling.getRowCount();
                    for (int lu3 = 0; lu3 <= z4; ++lu3) {
                        modeling.removeRow(0);
                    }
                } catch (Exception ex) {

                }
                try {

                    String quer = "SELECT * FROM ingredients where factory='" + ahsa + "'";
                    try (PreparedStatement stmt4 = db_Connection.getInstance().prepareStatement(quer)) {
                        rs = stmt4.executeQuery(quer);

                        while (rs.next()) {
                            modeling.addRow(new Object[]{rs.getString("ingredient_name"), rs.getString("factory"), rs.getDouble("Stock_in_hand"), rs.getString("unit")});

                        }
                        stmt4.close();
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
//                    ex.printStackTrace();
                }

            } catch (Exception ex) {
//                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }

        }

        // TODO add your handling code here:
    }

    public void waresalesCombo() throws HeadlessException {
        JComboBox comboUnits = new JComboBox();
        String combotbl1 = jTextLogin.getText();
        switch (jTextStatus.getText()) {
            case "WAREHOUSE":
                try {
                String clik1 = "select distinct(product) from wipstock where factory='" + combotbl1 + "' ";
                try (PreparedStatement wareclikk1 = db_Connection.getInstance().prepareStatement(clik1)) {

                    rs = wareclikk1.executeQuery();

                    while (rs.next()) {
                        comboUnits.addItem(rs.getString("product"));
                    }
                    wareclikk1.close();
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
            TableColumn sportColumn1 = jTable1.getColumnModel().getColumn(1);
            sportColumn1.setCellEditor(new DefaultCellEditor(comboUnits));
            break;
            case "ADMINISTRATOR":

                try {
                String clik1 = "select distinct(product_name) from product where factory='" + combotbl1 + "' ";
                try (PreparedStatement wareclikk1 = db_Connection.getInstance().prepareStatement(clik1)) {
                    rs = wareclikk1.executeQuery();
                    while (rs.next()) {
                        comboUnits.addItem(rs.getString("product_name"));
                    }
                    wareclikk1.close();
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
            TableColumn sportColumn2 = jTable1.getColumnModel().getColumn(1);
            sportColumn2.setCellEditor(new DefaultCellEditor(comboUnits));
            break;
            case "USER":
                try {
                String clik1 = "select distinct(product_name) from product where factory='" + combotbl1 + "' ";
                try (PreparedStatement wareclikk1 = db_Connection.getInstance().prepareStatement(clik1)) {

                    rs = wareclikk1.executeQuery();

                    while (rs.next()) {
                        comboUnits.addItem(rs.getString("product_name"));
                    }
                    wareclikk1.close();
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
            TableColumn sportColumn3 = jTable1.getColumnModel().getColumn(1);
            sportColumn3.setCellEditor(new DefaultCellEditor(comboUnits));
            break;
            default:
                JOptionPane.showMessageDialog(null, "Uknown User. Please Contact Your Sytem Administrator!!");
        }
        // TODO add your handling code here:
    }

    public void logArithmic() {
//       ExportAndImport expw = new ExportAndImport();
//                    expw.setVisible(true);
        String unamee = jTextField_Username.getText();
        String pwad = String.valueOf(jPasswordField_Password.getPassword());
        TableColumn rawcombo = ExportAndImport.jTable15.getColumnModel().getColumn(1);
        TableColumn supcombo = ExportAndImport.jTable15.getColumnModel().getColumn(5);
        rawcombo.setCellEditor(new DefaultCellEditor(rawCombox));
        supcombo.setCellEditor(new DefaultCellEditor(SupCombox));
        try (PreparedStatement claese = db_Connection.getInstance().prepareStatement("select * from canning.logintbl where username=? and password=?")) {
            claese.setString(1, unamee);
            claese.setString(2, pwad);
            rs = claese.executeQuery();
            if (rs.next()) {
                String pudii = rs.getString("status");
                switch (pudii) {
                    case "ADMINISTRATOR":
//                        jPanelStart1.remove(jPanelLogin);
//                        MainPanel.revalidate();
//                        MainPanel.add(jPanelStart1);

                        jMenuBar1.setVisible(true);
                        jTextLogin.setText(rs.getString("class"));
                        jTextStatus.setText(rs.getString("status"));
                        jTextUser.setText(rs.getString("Username"));
                        subof.setText(rs.getString("subsidiary_of"));
                        jMenu5.setEnabled(true);
                        jMenuItem10.setEnabled(true);
                        jMenuItem11.setEnabled(true);
                        jMenuItem22.setEnabled(true);
                        jMenuItem23.setEnabled(true);
                        jMenuItem28.setEnabled(true);
                        jMenu9.setEnabled(true);
                        jPanelStart1.remove(jPanelLogin);
                        loadFactories();

//                        ExportAndImport exp = new ExportAndImport();
//                    exp.setVisible(true);
                        jMenu5.setVisible(true);
                        break;
                    case "USER":
                        try {
                        jTextLogin.setText(rs.getString("class"));
                        jTextStatus.setText(rs.getString("status"));
                        jTextUser.setText(rs.getString("Username"));
                        jMenu5.setVisible(false);
                        jMenuItem9.setVisible(false);
                        jMenuItem4.setVisible(false);
                        jMenuItem7.setVisible(false);
                        jMenuItem31.setVisible(false);
                        jMenuItem6.setVisible(false);
                        jMenuItem15.setVisible(false);
                        jPanelStart1.remove(jPanelLogin);
                        loadFactories();

                        try {
                            jMenuBar1.setVisible(true);
//                         ExportAndImport expf = new ExportAndImport();
//                    expf.setVisible(true);
                        } catch (Exception e) {
//                            e.printStackTrace();
                        }
                    } catch (Exception e) {
//                            e.printStackTrace();
                    }
                    break;
                    case "WAREHOUSE":
                        try {
                        jMenuBar1.setVisible(true);
                        jToolBar2.setVisible(true);
                        jTextLogin.setText(rs.getString("class"));
                        jTextStatus.setText(rs.getString("status"));
                        jTextSubsidiary.setText(rs.getString("subsidiary_of"));
                        jTextUser.setText(rs.getString("Username"));
                        jMenu5.setVisible(false);
                        jMenu7.setVisible(false);
                        jMenu4.setVisible(false);
                        jMenu3.setVisible(false);
                        jMenuItem9.setVisible(false);
                        jMenuItem4.setVisible(false);
                        jMenuItem7.setVisible(false);
                        jMenuItem6.setVisible(false);
                        jMenuItem18.setVisible(false);
                        jMenuItem18.setVisible(false);
                        jMenuItem20.setVisible(false);
                        jMenuItem21.setVisible(false);
                        jMenuItem27.setVisible(false);
                        jMenuItem3.setVisible(false);
                        jMenuItem5.setVisible(false);
                        jMenuItem16.setVisible(false);
                        jPanelStart1.remove(jPanelLogin);

                        loadFactories();
                    } catch (Exception e) {
//                            e.printStackTrace();
                    }
                    break;
                    case "CENTRAL":
                        try {
                        jTextLogin.setText(rs.getString("class"));
                        jTextStatus.setText(rs.getString("status"));
                        jTextUser.setText(rs.getString("Username"));
                        jMenu5.setVisible(false);
                        jMenuItem9.setVisible(false);
                        jMenuItem4.setVisible(false);
                        jMenuItem7.setVisible(false);
                        jMenuItem31.setVisible(false);
                        jMenuItem6.setVisible(false);
                        jMenuItem15.setVisible(false);
                        jPanelStart1.remove(jPanelLogin);
                        loadFactories();

                        try {
                            jMenuBar1.setVisible(true);
//                         ExportAndImport expf = new ExportAndImport();
//                    expf.setVisible(true);
                        } catch (Exception e) {
//                            e.printStackTrace();
                        }
                    } catch (Exception e) {
//                            e.printStackTrace();
                    }
                    break;
                    default:

                        break;
                }
            } else {
                JOptionPane.showMessageDialog(null, "Incorrect Username or Password!");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Incorrect Username or Password!");
            e.printStackTrace();
        }
    }

    public void loadFactories() throws HeadlessException {
        jCombotoe.removeAllItems();
        try {
            PreparedStatement psc1st = db_Connection.getInstance().prepareStatement("SELECT * FROM factories");
            try {
                rs = psc1st.executeQuery();
                while (rs.next()) {
                    jCombotoe.addItem(rs.getString("factory"));
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Database Error");
//                e.printStackTrace();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error connection");
//            e.printStackTrace();
        }
    }

    public void TableNamesTest() {
        DefaultTableModel model = new DefaultTableModel() {
            String[] employee = {"emp 1", "emp 2", "emp 3", "emp 4"};

            @Override
            public int getColumnCount() {
                return employee.length;
            }

            @Override
            public String getColumnName(int index) {
                return employee[index];
            }
        };
        jTable1.setModel(model);
        add(new JScrollPane(jTable1));
        pack();
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setVisible(true);
    }

    public void Factorycombo() throws HeadlessException {
        jComboBox21.removeAllItems();//grp
        jComboBox13.removeAllItems();//prod
        jComboBox14.removeAllItems();//ingr
        jComboBox15.removeAllItems();//rawmat
        jComboBox5.removeAllItems();//label
        jComboBox4.removeAllItems();//package
        jComboBox26.removeAllItems();//grp
        try {
            jComboBox21.setModel(new DefaultComboBoxModel(groupReturns.getGroupe().toArray()));
            jComboBox26.setModel(new DefaultComboBoxModel(groupReturns.getGroupe().toArray()));
//            ExportAndImport.pprod.setModel(new DefaultComboBoxModel(productReturns.getProduct().toArray()));
            jComboBox13.setModel(new DefaultComboBoxModel(productReturns.getProduct().toArray()));
            jComboBox14.setModel(new DefaultComboBoxModel(ingredientReturns.getIngredient().toArray()));
            jComboBox15.setModel(new DefaultComboBoxModel(rawMaterialReturns.getrawMaterial().toArray()));
            jComboBox4.setModel(new DefaultComboBoxModel(packageReturns.getPackage().toArray()));
            jComboBox5.setModel(new DefaultComboBoxModel(labelReturns.getLabel().toArray()));
            consiered.setModel(new DefaultComboBoxModel(packageReturns.getPackage().toArray()));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Database Error");
        }
        // TODO add your handling code here:
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Preeve(2500);
                new NewJFrame().setVisible(true);
//                new ExportAndImport().setVisible(true);
                new ExportAndImport();
//                new packageReturns();
            }

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static com.toedter.calendar.JDateChooser Choose1;
    public static com.toedter.calendar.JDateChooser Choose2;
    public static javax.swing.JPanel IngFormer;
    public static javax.swing.JPanel MainPanel;
    private javax.swing.JPanel StocksPanel;
    public static javax.swing.JComboBox<String> SupCombox;
    public static javax.swing.JPanel UsageAnalysis;
    private javax.swing.JPanel WarehouseStock;
    public static javax.swing.JTextField batch_no;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroupPackage;
    public static javax.swing.JComboBox<String> consiered;
    private javax.swing.JLabel decider;
    public static com.toedter.calendar.JDateChooser enddate;
    private javax.swing.JTextField fieldin;
    private javax.swing.JTextField fieldmanp;
    private javax.swing.JTextField fieldout;
    private javax.swing.JTextField fieldwaste;
    public static javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    public static javax.swing.JButton jButton100;
    private javax.swing.JButton jButton101;
    private javax.swing.JButton jButton102;
    private javax.swing.JButton jButton103;
    private javax.swing.JButton jButton104;
    private javax.swing.JButton jButton105;
    private javax.swing.JButton jButton106;
    private javax.swing.JButton jButton107;
    public static javax.swing.JButton jButton108;
    public static javax.swing.JButton jButton109;
    private javax.swing.JButton jButton11;
    public static javax.swing.JButton jButton110;
    public static javax.swing.JButton jButton111;
    public static javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    public static javax.swing.JButton jButton14;
    public static javax.swing.JButton jButton15;
    public static javax.swing.JButton jButton16;
    public static javax.swing.JButton jButton17;
    public static javax.swing.JButton jButton18;
    public static javax.swing.JButton jButton19;
    public static javax.swing.JButton jButton2;
    public static javax.swing.JButton jButton20;
    public static javax.swing.JButton jButton21;
    public static javax.swing.JButton jButton22;
    public static javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    public static javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    public static javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    public static javax.swing.JButton jButton30;
    private javax.swing.JButton jButton31;
    public static javax.swing.JButton jButton32;
    public static javax.swing.JButton jButton33;
    private javax.swing.JButton jButton34;
    public static javax.swing.JButton jButton35;
    public static javax.swing.JButton jButton36;
    private javax.swing.JButton jButton37;
    private javax.swing.JButton jButton38;
    public static javax.swing.JButton jButton39;
    private javax.swing.JButton jButton4;
    public static javax.swing.JButton jButton40;
    private javax.swing.JButton jButton41;
    private javax.swing.JButton jButton42;
    private javax.swing.JButton jButton43;
    private javax.swing.JButton jButton44;
    private javax.swing.JButton jButton45;
    private javax.swing.JButton jButton46;
    private javax.swing.JButton jButton47;
    private javax.swing.JButton jButton48;
    private javax.swing.JButton jButton49;
    private javax.swing.JButton jButton5;
    public javax.swing.JButton jButton50;
    private javax.swing.JButton jButton51;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton53;
    private javax.swing.JButton jButton54;
    public static javax.swing.JButton jButton55;
    private javax.swing.JButton jButton56;
    private javax.swing.JButton jButton57;
    private javax.swing.JButton jButton58;
    private javax.swing.JButton jButton59;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton60;
    private javax.swing.JButton jButton61;
    private javax.swing.JButton jButton62;
    private javax.swing.JButton jButton63;
    public static javax.swing.JButton jButton64;
    private javax.swing.JButton jButton65;
    private javax.swing.JButton jButton66;
    private javax.swing.JButton jButton67;
    private javax.swing.JButton jButton68;
    private javax.swing.JButton jButton69;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton72;
    private javax.swing.JButton jButton73;
    private javax.swing.JButton jButton74;
    private javax.swing.JButton jButton75;
    private javax.swing.JButton jButton76;
    private javax.swing.JButton jButton77;
    private javax.swing.JButton jButton78;
    private javax.swing.JButton jButton79;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton80;
    private javax.swing.JButton jButton81;
    private javax.swing.JButton jButton82;
    private javax.swing.JButton jButton83;
    private javax.swing.JButton jButton84;
    private javax.swing.JButton jButton85;
    private javax.swing.JButton jButton86;
    private javax.swing.JButton jButton88;
    private javax.swing.JButton jButton89;
    public static javax.swing.JButton jButton9;
    private javax.swing.JButton jButton90;
    private javax.swing.JButton jButton91;
    public static javax.swing.JButton jButton92;
    public static javax.swing.JButton jButton93;
    private javax.swing.JButton jButton94;
    public static javax.swing.JButton jButton95;
    private javax.swing.JButton jButton96;
    private javax.swing.JButton jButton97;
    public static javax.swing.JButton jButton98;
    private javax.swing.JButton jButton99;
    public static javax.swing.JButton jButtonAdd_productproduction;
    public static javax.swing.JButton jButtonDelete_productproduction;
    private javax.swing.JButton jButtonDiscard;
    private javax.swing.JButton jButtonReset_Product;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSave_Product;
    private javax.swing.JButton jButtonSaveall;
    public static javax.swing.JButton jButtonSplit_productproduction;
    private javax.swing.JButton jButton_Cancel;
    private javax.swing.JButton jButton_Login;
    private javax.swing.JButton jButton_savepack;
    public static javax.swing.JButton jButtondisplay;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox10;
    private javax.swing.JComboBox<String> jComboBox12;
    public static javax.swing.JComboBox<String> jComboBox13;
    public static javax.swing.JComboBox<String> jComboBox14;
    public static javax.swing.JComboBox jComboBox15;
    public static javax.swing.JComboBox<String> jComboBox16;
    public static javax.swing.JComboBox<String> jComboBox17;
    public static javax.swing.JComboBox jComboBox18;
    public static javax.swing.JComboBox jComboBox19;
    private javax.swing.JComboBox<String> jComboBox2;
    public static javax.swing.JComboBox<String> jComboBox20;
    public static javax.swing.JComboBox jComboBox21;
    public static javax.swing.JComboBox<String> jComboBox22;
    private javax.swing.JComboBox<String> jComboBox23;
    public static javax.swing.JComboBox<String> jComboBox24;
    private javax.swing.JComboBox<String> jComboBox25;
    public static javax.swing.JComboBox<String> jComboBox26;
    public static javax.swing.JComboBox<String> jComboBox27;
    private javax.swing.JComboBox<String> jComboBox29;
    public static javax.swing.JComboBox<String> jComboBox3;
    public static javax.swing.JComboBox<String> jComboBox30;
    public static javax.swing.JComboBox<String> jComboBox31;
    private javax.swing.JComboBox<String> jComboBox32;
    private javax.swing.JComboBox<String> jComboBox33;
    private javax.swing.JComboBox<String> jComboBox34;
    public static javax.swing.JComboBox<String> jComboBox35;
    private javax.swing.JComboBox<String> jComboBox36;
    private javax.swing.JComboBox<String> jComboBox38;
    public static javax.swing.JComboBox jComboBox4;
    public static javax.swing.JComboBox<String> jComboBox43;
    private javax.swing.JComboBox<String> jComboBox46;
    public static javax.swing.JComboBox<String> jComboBox48;
    public static javax.swing.JComboBox jComboBox5;
    private javax.swing.JComboBox<String> jComboBox6;
    private javax.swing.JComboBox<String> jComboBox7;
    private javax.swing.JComboBox<String> jComboBox8;
    private javax.swing.JComboBox<String> jComboBox9;
    public static javax.swing.JComboBox<String> jComboBoxavg;
    private javax.swing.JComboBox<String> jComboFrom;
    private javax.swing.JComboBox<String> jComboName;
    private javax.swing.JComboBox<String> jComboRawPast;
    private javax.swing.JComboBox<String> jCombo_label;
    private javax.swing.JComboBox<String> jCombo_package;
    private javax.swing.JComboBox<String> jCombofof;
    private javax.swing.JComboBox<String> jCombopprod;
    private javax.swing.JComboBox<String> jComborecp;
    private javax.swing.JComboBox<String> jCombosort;
    private javax.swing.JComboBox<String> jCombosorttype;
    public static javax.swing.JComboBox<String> jCombotoe;
    public static com.toedter.calendar.JDateChooser jDate1;
    public static com.toedter.calendar.JDateChooser jDate1st;
    public static com.toedter.calendar.JDateChooser jDate2;
    public static com.toedter.calendar.JDateChooser jDate2nd;
    public static com.toedter.calendar.JDateChooser jDate5;
    public static com.toedter.calendar.JDateChooser jDate6;
    public static com.toedter.calendar.JDateChooser jDateChooser1;
    public static com.toedter.calendar.JDateChooser jDateChooser2;
    public static com.toedter.calendar.JDateChooser jDateChooser3;
    private com.toedter.calendar.JDateChooser jDateChooser4;
    private com.toedter.calendar.JDateChooser jDateChooser5;
    private com.toedter.calendar.JDateChooser jDateChooser6;
    private com.toedter.calendar.JDateChooser jDateChooser7;
    private com.toedter.calendar.JDateChooser jDatePacking;
    private com.toedter.calendar.JDateChooser jDatePast;
    private com.toedter.calendar.JDateChooser jDateWarehouse;
    private com.toedter.calendar.JDateChooser jDaterecp;
    private com.toedter.calendar.JDateChooser jDatesct;
    private com.toedter.calendar.JDateChooser jDatesort;
    public static javax.swing.JDialog jDialog1;
    public static javax.swing.JLabel jLabeavg;
    private javax.swing.JLabel jLabel1;
    public static javax.swing.JLabel jLabel10;
    public static javax.swing.JLabel jLabel100;
    public static javax.swing.JLabel jLabel101;
    public static javax.swing.JLabel jLabel102;
    public static javax.swing.JLabel jLabel103;
    private javax.swing.JLabel jLabel104;
    public static javax.swing.JLabel jLabel105;
    private javax.swing.JLabel jLabel106;
    private javax.swing.JLabel jLabel107;
    public static javax.swing.JLabel jLabel108;
    public static javax.swing.JLabel jLabel109;
    public static javax.swing.JLabel jLabel11;
    public static javax.swing.JLabel jLabel110;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel112;
    private javax.swing.JLabel jLabel113;
    private javax.swing.JLabel jLabel114;
    public static javax.swing.JLabel jLabel115;
    public static javax.swing.JLabel jLabel116;
    public static javax.swing.JLabel jLabel117;
    public static javax.swing.JLabel jLabel118;
    public static javax.swing.JLabel jLabel119;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel120;
    private javax.swing.JLabel jLabel121;
    private javax.swing.JLabel jLabel122;
    private javax.swing.JLabel jLabel123;
    private javax.swing.JLabel jLabel124;
    private javax.swing.JLabel jLabel125;
    public static javax.swing.JLabel jLabel126;
    public static javax.swing.JLabel jLabel127;
    public static javax.swing.JLabel jLabel128;
    public static javax.swing.JLabel jLabel129;
    private javax.swing.JLabel jLabel13;
    public static javax.swing.JLabel jLabel130;
    private javax.swing.JLabel jLabel131;
    private javax.swing.JLabel jLabel132;
    public static javax.swing.JLabel jLabel135;
    private javax.swing.JLabel jLabel137;
    private javax.swing.JLabel jLabel138;
    private javax.swing.JLabel jLabel139;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel140;
    private javax.swing.JLabel jLabel141;
    public static javax.swing.JLabel jLabel142;
    public static javax.swing.JLabel jLabel143;
    private javax.swing.JLabel jLabel144;
    public static javax.swing.JLabel jLabel145;
    private javax.swing.JLabel jLabel146;
    private javax.swing.JLabel jLabel147;
    private javax.swing.JLabel jLabel148;
    private javax.swing.JLabel jLabel149;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel150;
    private javax.swing.JLabel jLabel151;
    private javax.swing.JLabel jLabel152;
    public static javax.swing.JLabel jLabel153;
    public static javax.swing.JLabel jLabel154;
    public static javax.swing.JLabel jLabel155;
    public static javax.swing.JLabel jLabel156;
    private javax.swing.JLabel jLabel157;
    public static javax.swing.JLabel jLabel158;
    private javax.swing.JLabel jLabel159;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel160;
    private javax.swing.JLabel jLabel161;
    private javax.swing.JLabel jLabel162;
    private javax.swing.JLabel jLabel163;
    private javax.swing.JLabel jLabel164;
    public static javax.swing.JLabel jLabel166;
    public static javax.swing.JLabel jLabel167;
    public static javax.swing.JLabel jLabel168;
    public static javax.swing.JLabel jLabel169;
    public static javax.swing.JLabel jLabel17;
    public static javax.swing.JLabel jLabel170;
    public static javax.swing.JLabel jLabel171;
    public static javax.swing.JLabel jLabel172;
    public static javax.swing.JLabel jLabel173;
    public static javax.swing.JLabel jLabel174;
    public static javax.swing.JLabel jLabel175;
    public static javax.swing.JLabel jLabel176;
    public static javax.swing.JLabel jLabel177;
    public static javax.swing.JLabel jLabel178;
    private javax.swing.JLabel jLabel179;
    public static javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel180;
    private javax.swing.JLabel jLabel181;
    private javax.swing.JLabel jLabel182;
    private javax.swing.JLabel jLabel183;
    private javax.swing.JLabel jLabel184;
    public static javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel191;
    private javax.swing.JLabel jLabel192;
    private javax.swing.JLabel jLabel193;
    private javax.swing.JLabel jLabel194;
    private javax.swing.JLabel jLabel195;
    private javax.swing.JLabel jLabel196;
    private javax.swing.JLabel jLabel197;
    private javax.swing.JLabel jLabel198;
    private javax.swing.JLabel jLabel199;
    private javax.swing.JLabel jLabel2;
    public static javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel200;
    private javax.swing.JLabel jLabel201;
    private javax.swing.JLabel jLabel202;
    private javax.swing.JLabel jLabel203;
    private javax.swing.JLabel jLabel204;
    private javax.swing.JLabel jLabel206;
    private javax.swing.JLabel jLabel207;
    private javax.swing.JLabel jLabel208;
    private javax.swing.JLabel jLabel209;
    public static javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel210;
    private javax.swing.JLabel jLabel211;
    private javax.swing.JLabel jLabel212;
    private javax.swing.JLabel jLabel213;
    private javax.swing.JLabel jLabel214;
    private javax.swing.JLabel jLabel215;
    private javax.swing.JLabel jLabel216;
    private javax.swing.JLabel jLabel217;
    private javax.swing.JLabel jLabel218;
    private javax.swing.JLabel jLabel219;
    public static javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel225;
    private javax.swing.JLabel jLabel229;
    public static javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel230;
    private javax.swing.JLabel jLabel231;
    private javax.swing.JLabel jLabel232;
    private javax.swing.JLabel jLabel233;
    private javax.swing.JLabel jLabel234;
    private javax.swing.JLabel jLabel235;
    private javax.swing.JLabel jLabel236;
    private javax.swing.JLabel jLabel237;
    public static javax.swing.JLabel jLabel238;
    public static javax.swing.JLabel jLabel239;
    private javax.swing.JLabel jLabel24;
    public static javax.swing.JLabel jLabel240;
    public static javax.swing.JLabel jLabel241;
    public static javax.swing.JLabel jLabel242;
    public static javax.swing.JLabel jLabel243;
    public static javax.swing.JLabel jLabel244;
    public static javax.swing.JLabel jLabel245;
    private javax.swing.JLabel jLabel246;
    private javax.swing.JLabel jLabel247;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    public static javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    public static javax.swing.JLabel jLabel48;
    public static javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    public static javax.swing.JLabel jLabel50;
    public static javax.swing.JLabel jLabel51;
    public static javax.swing.JLabel jLabel52;
    public static javax.swing.JLabel jLabel53;
    public static javax.swing.JLabel jLabel54;
    public static javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    public static javax.swing.JLabel jLabel57;
    public static javax.swing.JLabel jLabel58;
    public static javax.swing.JLabel jLabel59;
    public static javax.swing.JLabel jLabel6;
    public static javax.swing.JLabel jLabel60;
    public static javax.swing.JLabel jLabel61;
    public static javax.swing.JLabel jLabel62;
    public static javax.swing.JLabel jLabel63;
    public static javax.swing.JLabel jLabel64;
    public static javax.swing.JLabel jLabel65;
    public static javax.swing.JLabel jLabel66;
    public static javax.swing.JLabel jLabel67;
    public static javax.swing.JLabel jLabel68;
    public static javax.swing.JLabel jLabel69;
    public static javax.swing.JLabel jLabel7;
    public static javax.swing.JLabel jLabel70;
    public static javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    public static javax.swing.JLabel jLabel75;
    public static javax.swing.JLabel jLabel76;
    public static javax.swing.JLabel jLabel77;
    public static javax.swing.JLabel jLabel78;
    public static javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    public static javax.swing.JLabel jLabel80;
    public static javax.swing.JLabel jLabel81;
    public static javax.swing.JLabel jLabel82;
    public static javax.swing.JLabel jLabel83;
    public static javax.swing.JLabel jLabel84;
    public static javax.swing.JLabel jLabel85;
    public static javax.swing.JLabel jLabel86;
    public static javax.swing.JLabel jLabel87;
    public static javax.swing.JLabel jLabel88;
    public static javax.swing.JLabel jLabel89;
    private javax.swing.JLabel jLabel9;
    public static javax.swing.JLabel jLabel90;
    public static javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabel92;
    public static javax.swing.JLabel jLabel93;
    public static javax.swing.JLabel jLabel94;
    public static javax.swing.JLabel jLabel95;
    private javax.swing.JLabel jLabel96;
    public static javax.swing.JLabel jLabel97;
    public static javax.swing.JLabel jLabel98;
    public static javax.swing.JLabel jLabel99;
    private javax.swing.JLabel jLabel_Password;
    private javax.swing.JLabel jLabel_Username;
    public static javax.swing.JLabel jLabelavg;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu12;
    private javax.swing.JMenu jMenu13;
    private javax.swing.JMenu jMenu14;
    private javax.swing.JMenu jMenu15;
    private javax.swing.JMenu jMenu16;
    private javax.swing.JMenu jMenu17;
    private javax.swing.JMenu jMenu19;
    public static javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu20;
    private javax.swing.JMenu jMenu21;
    private javax.swing.JMenu jMenu22;
    private javax.swing.JMenu jMenu23;
    private javax.swing.JMenu jMenu3;
    public static javax.swing.JMenu jMenu4;
    public static javax.swing.JMenu jMenu5;
    public static javax.swing.JMenu jMenu6;
    public static javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    public static javax.swing.JMenu jMenu9;
    public static javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    public static javax.swing.JMenuItem jMenuItem10;
    public static javax.swing.JMenuItem jMenuItem11;
    public static javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    public static javax.swing.JMenuItem jMenuItem17;
    public static javax.swing.JMenuItem jMenuItem18;
    public static javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    public static javax.swing.JMenuItem jMenuItem20;
    public static javax.swing.JMenuItem jMenuItem21;
    public static javax.swing.JMenuItem jMenuItem22;
    public static javax.swing.JMenuItem jMenuItem23;
    public static javax.swing.JMenuItem jMenuItem24;
    public static javax.swing.JMenuItem jMenuItem25;
    private javax.swing.JMenuItem jMenuItem26;
    private javax.swing.JMenuItem jMenuItem27;
    private javax.swing.JMenuItem jMenuItem28;
    private javax.swing.JMenuItem jMenuItem29;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem30;
    private javax.swing.JMenuItem jMenuItem31;
    private javax.swing.JMenuItem jMenuItem32;
    private javax.swing.JMenuItem jMenuItem33;
    private javax.swing.JMenuItem jMenuItem34;
    private javax.swing.JMenuItem jMenuItem35;
    private javax.swing.JMenuItem jMenuItem36;
    private javax.swing.JMenuItem jMenuItem37;
    private javax.swing.JMenuItem jMenuItem38;
    private javax.swing.JMenuItem jMenuItem39;
    public static javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem40;
    private javax.swing.JMenuItem jMenuItem41;
    private javax.swing.JMenuItem jMenuItem42;
    private javax.swing.JMenuItem jMenuItem43;
    private javax.swing.JMenuItem jMenuItem44;
    private javax.swing.JMenuItem jMenuItem45;
    private javax.swing.JMenuItem jMenuItem46;
    private javax.swing.JMenuItem jMenuItem47;
    private javax.swing.JMenuItem jMenuItem48;
    private javax.swing.JMenuItem jMenuItem49;
    private javax.swing.JMenuItem jMenuItem5;
    public static javax.swing.JMenuItem jMenuItem6;
    public static javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    public static javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    public static javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    public static javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    public static javax.swing.JPanel jPanel17;
    public static javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    public javax.swing.JPanel jPanel2;
    public static javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    public static javax.swing.JPanel jPanel23;
    public static javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    public static javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel2Carded;
    public static javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    public static javax.swing.JPanel jPanel3Carded;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    public static javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JPanel jPanel49;
    public static javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel50;
    private javax.swing.JPanel jPanel51;
    private javax.swing.JPanel jPanel52;
    private javax.swing.JPanel jPanel53;
    private javax.swing.JPanel jPanel54;
    private javax.swing.JPanel jPanel55;
    private javax.swing.JPanel jPanel56;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel62;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel7Carded;
    public static javax.swing.JPanel jPanel8;
    public static javax.swing.JPanel jPanel9;
    public static javax.swing.JPanel jPanelAverageCost;
    private javax.swing.JPanel jPanelConsumption;
    private javax.swing.JPanel jPanelFactory;
    private javax.swing.JPanel jPanelING;
    private javax.swing.JPanel jPanelLoader;
    private javax.swing.JPanel jPanelLogin;
    private javax.swing.JPanel jPanelMenu2;
    private javax.swing.JPanel jPanelPStock;
    private javax.swing.JPanel jPanelPacking;
    private javax.swing.JPanel jPanelPasteurization;
    private javax.swing.JPanel jPanelPck;
    private javax.swing.JPanel jPanelRawMaterialMovement;
    private javax.swing.JPanel jPanelRecp;
    private javax.swing.JPanel jPanelSorting;
    private javax.swing.JPanel jPanelStart1;
    private javax.swing.JPanel jPanelTabpacking;
    private javax.swing.JPanel jPanelTabpackrpt;
    public static javax.swing.JPanel jPanelTransfer;
    private javax.swing.JPanel jPanelTransferList;
    private javax.swing.JPanel jPanelWarehouse;
    private javax.swing.JPanel jPanelWithFunctions;
    private javax.swing.JPanel jPanelmodVouch;
    private javax.swing.JPanel jPanelpackDetails;
    private javax.swing.JPanel jPanelsalesstockupdate;
    private javax.swing.JPasswordField jPasswordField_Password;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JTextField jProdWarehouse;
    public static javax.swing.JRadioButton jRadioButton1;
    public static javax.swing.JRadioButton jRadioButton10;
    public static javax.swing.JRadioButton jRadioButton11;
    public static javax.swing.JRadioButton jRadioButton12;
    public static javax.swing.JRadioButton jRadioButton13;
    public static javax.swing.JRadioButton jRadioButton14;
    private javax.swing.JRadioButton jRadioButton15;
    private javax.swing.JRadioButton jRadioButton16;
    private javax.swing.JRadioButton jRadioButton17;
    public static javax.swing.JRadioButton jRadioButton2;
    public static javax.swing.JRadioButton jRadioButton20;
    public static javax.swing.JRadioButton jRadioButton21;
    private javax.swing.JRadioButton jRadioButton22;
    public static javax.swing.JRadioButton jRadioButton23;
    public static javax.swing.JRadioButton jRadioButton3;
    public static javax.swing.JRadioButton jRadioButton4;
    public static javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton7;
    public static javax.swing.JRadioButton jRadioButton8;
    public static javax.swing.JRadioButton jRadioButton9;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JScrollPane jScrollPane10;
    public static javax.swing.JScrollPane jScrollPane11;
    public static javax.swing.JScrollPane jScrollPane12;
    public static javax.swing.JScrollPane jScrollPane13;
    public static javax.swing.JScrollPane jScrollPane14;
    public static javax.swing.JScrollPane jScrollPane15;
    public static javax.swing.JScrollPane jScrollPane16;
    public static javax.swing.JScrollPane jScrollPane17;
    public static javax.swing.JScrollPane jScrollPane18;
    public static javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JScrollPane jScrollPane26;
    private javax.swing.JScrollPane jScrollPane27;
    private javax.swing.JScrollPane jScrollPane28;
    private javax.swing.JScrollPane jScrollPane29;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane30;
    private javax.swing.JScrollPane jScrollPane31;
    private javax.swing.JScrollPane jScrollPane32;
    private javax.swing.JScrollPane jScrollPane33;
    private javax.swing.JScrollPane jScrollPane34;
    private javax.swing.JScrollPane jScrollPane38;
    private javax.swing.JScrollPane jScrollPane39;
    public static javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane40;
    private javax.swing.JScrollPane jScrollPane41;
    private javax.swing.JScrollPane jScrollPane43;
    private javax.swing.JScrollPane jScrollPane45;
    private javax.swing.JScrollPane jScrollPane46;
    private javax.swing.JScrollPane jScrollPane47;
    public static javax.swing.JScrollPane jScrollPane48;
    public static javax.swing.JScrollPane jScrollPane49;
    public static javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane50;
    private javax.swing.JScrollPane jScrollPane51;
    private javax.swing.JScrollPane jScrollPane52;
    private javax.swing.JScrollPane jScrollPane53;
    private javax.swing.JScrollPane jScrollPane54;
    private javax.swing.JScrollPane jScrollPane6;
    public static javax.swing.JScrollPane jScrollPane7;
    public static javax.swing.JScrollPane jScrollPane8;
    public static javax.swing.JScrollPane jScrollPane9;
    public static javax.swing.JScrollPane jScrollPaneavg;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    public static javax.swing.JTable jTable10;
    public static javax.swing.JTable jTable11;
    private javax.swing.JTable jTable12;
    private javax.swing.JTable jTable13;
    public static javax.swing.JTable jTable14;
    public static javax.swing.JTable jTable15;
    public static javax.swing.JTable jTable16;
    public static javax.swing.JTable jTable17;
    public static javax.swing.JTable jTable18;
    private javax.swing.JTable jTable19;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable20;
    private javax.swing.JTable jTable21;
    private javax.swing.JTable jTable22;
    private javax.swing.JTable jTable23;
    private javax.swing.JTable jTable26;
    private javax.swing.JTable jTable27;
    private javax.swing.JTable jTable28;
    private javax.swing.JTable jTable29;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable33;
    private javax.swing.JTable jTable34;
    private javax.swing.JTable jTable35;
    private javax.swing.JTable jTable37;
    private javax.swing.JTable jTable39;
    public static javax.swing.JTable jTable4;
    private javax.swing.JTable jTable40;
    private javax.swing.JTable jTable41;
    public static javax.swing.JTable jTable42;
    private javax.swing.JTable jTable43;
    private javax.swing.JTable jTable44;
    public static javax.swing.JTable jTable5;
    public static javax.swing.JTable jTable6;
    public static javax.swing.JTable jTable7;
    public static javax.swing.JTable jTable8;
    public static javax.swing.JTable jTable9;
    private javax.swing.JTable jTable_consumedproduct;
    private javax.swing.JTable jTable_ppack;
    public static javax.swing.JTable jTableavg;
    private javax.swing.JTable jTablerecp;
    private javax.swing.JTextArea jTextArea1;
    public static javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextField jTextField1;
    public static javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField109;
    public static javax.swing.JTextField jTextField11;
    public static javax.swing.JTextField jTextField110;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField112;
    private javax.swing.JTextField jTextField113;
    private javax.swing.JTextField jTextField114;
    private javax.swing.JTextField jTextField115;
    private javax.swing.JTextField jTextField116;
    private javax.swing.JTextField jTextField117;
    public static javax.swing.JTextField jTextField118;
    public static javax.swing.JTextField jTextField12;
    public static javax.swing.JTextField jTextField122;
    public static javax.swing.JTextField jTextField123;
    public static javax.swing.JTextField jTextField128;
    public static javax.swing.JTextField jTextField129;
    private javax.swing.JTextField jTextField13;
    public static javax.swing.JTextField jTextField130;
    public static javax.swing.JTextField jTextField131;
    public static javax.swing.JTextField jTextField132;
    public static javax.swing.JTextField jTextField133;
    public static javax.swing.JTextField jTextField134;
    public static javax.swing.JTextField jTextField135;
    public static javax.swing.JTextField jTextField136;
    public static javax.swing.JTextField jTextField137;
    public static javax.swing.JTextField jTextField138;
    public static javax.swing.JTextField jTextField139;
    private javax.swing.JTextField jTextField14;
    public static javax.swing.JTextField jTextField140;
    public static javax.swing.JTextField jTextField141;
    public static javax.swing.JTextField jTextField148;
    public static javax.swing.JTextField jTextField149;
    private javax.swing.JTextField jTextField15;
    public static javax.swing.JTextField jTextField154;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField160;
    private javax.swing.JTextField jTextField162;
    private javax.swing.JTextField jTextField163;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField18;
    private javax.swing.JTextField jTextField19;
    private javax.swing.JTextField jTextField2;
    public static javax.swing.JTextField jTextField20;
    private javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField22;
    public static javax.swing.JTextField jTextField23;
    public static javax.swing.JTextField jTextField24;
    public static javax.swing.JTextField jTextField25;
    public static javax.swing.JTextField jTextField26;
    public static javax.swing.JTextField jTextField27;
    public static javax.swing.JTextField jTextField28;
    public static javax.swing.JTextField jTextField29;
    public static javax.swing.JTextField jTextField3;
    public static javax.swing.JTextField jTextField30;
    public static javax.swing.JTextField jTextField31;
    public static javax.swing.JTextField jTextField32;
    public static javax.swing.JTextField jTextField33;
    public static javax.swing.JTextField jTextField34;
    public static javax.swing.JTextField jTextField35;
    private javax.swing.JTextField jTextField36;
    private javax.swing.JTextField jTextField37;
    private javax.swing.JTextField jTextField38;
    public static javax.swing.JTextField jTextField39;
    private javax.swing.JTextField jTextField4;
    public static javax.swing.JTextField jTextField40;
    public static javax.swing.JTextField jTextField41;
    public static javax.swing.JTextField jTextField42;
    public static javax.swing.JTextField jTextField43;
    public static javax.swing.JTextField jTextField44;
    public static javax.swing.JTextField jTextField45;
    private javax.swing.JTextField jTextField46;
    public static javax.swing.JTextField jTextField47;
    public static javax.swing.JTextField jTextField48;
    public static javax.swing.JTextField jTextField49;
    public static javax.swing.JTextField jTextField5;
    public static javax.swing.JTextField jTextField50;
    public static javax.swing.JTextField jTextField51;
    public static javax.swing.JTextField jTextField52;
    public static javax.swing.JTextField jTextField53;
    public static javax.swing.JTextField jTextField54;
    public static javax.swing.JTextField jTextField55;
    public static javax.swing.JTextField jTextField56;
    public static javax.swing.JTextField jTextField57;
    public static javax.swing.JTextField jTextField58;
    public static javax.swing.JTextField jTextField59;
    private javax.swing.JTextField jTextField6;
    public static javax.swing.JTextField jTextField60;
    public static javax.swing.JTextField jTextField61;
    public static javax.swing.JTextField jTextField62;
    public static javax.swing.JTextField jTextField63;
    public static javax.swing.JTextField jTextField64;
    public static javax.swing.JTextField jTextField65;
    public static javax.swing.JTextField jTextField66;
    public static javax.swing.JTextField jTextField67;
    public static javax.swing.JTextField jTextField68;
    public static javax.swing.JTextField jTextField69;
    public static javax.swing.JTextField jTextField7;
    public static javax.swing.JTextField jTextField70;
    public static javax.swing.JTextField jTextField71;
    public static javax.swing.JTextField jTextField72;
    public static javax.swing.JTextField jTextField73;
    public static javax.swing.JTextField jTextField74;
    public static javax.swing.JTextField jTextField75;
    public static javax.swing.JTextField jTextField76;
    public static javax.swing.JTextField jTextField77;
    public static javax.swing.JTextField jTextField78;
    public static javax.swing.JTextField jTextField79;
    private javax.swing.JTextField jTextField8;
    public static javax.swing.JTextField jTextField80;
    public static javax.swing.JTextField jTextField81;
    public static javax.swing.JTextField jTextField82;
    public static javax.swing.JTextField jTextField83;
    public static javax.swing.JTextField jTextField84;
    private javax.swing.JTextField jTextField85;
    private javax.swing.JTextField jTextField86;
    public static javax.swing.JTextField jTextField87;
    public static javax.swing.JTextField jTextField88;
    public static javax.swing.JTextField jTextField89;
    public static javax.swing.JTextField jTextField9;
    private javax.swing.JTextField jTextField90;
    private javax.swing.JTextField jTextField91;
    public static javax.swing.JTextField jTextField92;
    private javax.swing.JTextField jTextField93;
    public static javax.swing.JTextField jTextField94;
    public static javax.swing.JTextField jTextField95;
    public static javax.swing.JTextField jTextField96;
    private javax.swing.JTextField jTextField97;
    public static javax.swing.JTextField jTextField98;
    public static javax.swing.JTextField jTextField99;
    private static javax.swing.JTextField jTextField_Username;
    public static javax.swing.JTextField jTextFieldid;
    private javax.swing.JTextField jTextId;
    public static javax.swing.JTextField jTextLogin;
    private javax.swing.JTextField jTextQty;
    public static javax.swing.JTextField jTextStatus;
    private javax.swing.JTextField jTextSubsidiary;
    public static javax.swing.JTextField jTextUser;
    private javax.swing.JTextField jTextWarehouse;
    private javax.swing.JTextField jText_lblqty;
    private javax.swing.JTextField jText_manpower;
    private javax.swing.JTextField jText_packageqty;
    public static javax.swing.JTextArea jTextcomm;
    private javax.swing.JTextArea jTextcomment;
    public static javax.swing.JTextField jTextid;
    public static javax.swing.JTextField jTextmainidtransferlist;
    private javax.swing.JTextField jTextpackid;
    private javax.swing.JTextField jTextpaqty;
    private javax.swing.JTextField jTextpid;
    private javax.swing.JTextField jTextppname;
    private javax.swing.JTextField jTextppqty;
    public static javax.swing.JTextField jTextprod;
    private javax.swing.JTextField jTextqtybefore;
    private javax.swing.JTextField jTextsortmanpower;
    private javax.swing.JTextField jTextsortqtyafter;
    private javax.swing.JTextField jTextsortwaste;
    public static javax.swing.JTextField jTexty;
    private javax.swing.JToolBar jToolBar2;
    public static com.toedter.calendar.JDateChooser jtransDate;
    private javax.swing.JLabel manpo;
    private javax.swing.JTable modTable;
    private javax.swing.JLabel past_no;
    private javax.swing.JPanel productmovement;
    public static javax.swing.JComboBox<String> rawCombox;
    public static javax.swing.JTextField rawm;
    private javax.swing.JPanel stocksproduct;
    public static javax.swing.JTextField subof;
    public static javax.swing.JTable tabledisp;
    public static javax.swing.JTextField totman;
    public static javax.swing.JTextField totsea;
    private com.toedter.calendar.JDateChooser warehousiing_date;
    private javax.swing.JLabel waste;
    // End of variables declaration//GEN-END:variables
}
